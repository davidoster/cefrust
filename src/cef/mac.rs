/* automatically generated by rust-bindgen */

#![allow(dead_code)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
use cef::cef_string_t;

///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_main_args_t {
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__cef_main_args_t() {
    assert_eq!(::std::mem::size_of::<_cef_main_args_t>() , 16usize);
    assert_eq!(::std::mem::align_of::<_cef_main_args_t>() , 8usize);
}
impl Clone for _cef_main_args_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_window_info_t {
    pub window_name: cef_string_t,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    ///
    pub hidden: ::std::os::raw::c_int,
    ///
    pub parent_view: *mut ::std::os::raw::c_void,
    ///
    pub windowless_rendering_enabled: ::std::os::raw::c_int,
    ///
    pub transparent_painting_enabled: ::std::os::raw::c_int,
    ///
    pub view: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__cef_window_info_t() {
    assert_eq!(::std::mem::size_of::<_cef_window_info_t>() , 72usize);
    assert_eq!(::std::mem::align_of::<_cef_window_info_t>() , 8usize);
}
impl Clone for _cef_window_info_t {
    fn clone(&self) -> Self { *self }
}
