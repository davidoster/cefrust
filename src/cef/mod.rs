/* automatically generated by rust-bindgen */

#![allow(dead_code)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#[cfg(target_os = "linux")] pub mod linux;
#[cfg(target_os = "linux")] pub use self::linux::_cef_window_info_t;
#[cfg(target_os = "linux")] pub use self::linux::_cef_main_args_t;
#[cfg(target_os = "macos")] pub mod mac;
#[cfg(target_os = "macos")] pub use self::mac::_cef_window_info_t;
#[cfg(target_os = "macos")] pub use self::mac::_cef_main_args_t;
#[cfg(windows)] pub mod win;
#[cfg(windows)] pub use self::win::_cef_window_info_t;
#[cfg(windows)] pub use self::win::_cef_main_args_t;

pub type wchar_t = ::std::os::raw::c_int;
pub type int64 = ::std::os::raw::c_long;
pub type int32 = ::std::os::raw::c_int;
pub type uint32 = ::std::os::raw::c_uint;
pub type char16 = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_string_wide_t {
    pub str: *mut wchar_t,
    pub length: usize,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(str: *mut wchar_t)>,
}
#[test]
fn bindgen_test_layout__cef_string_wide_t() {
    assert_eq!(::std::mem::size_of::<_cef_string_wide_t>() , 24usize);
    assert_eq!(::std::mem::align_of::<_cef_string_wide_t>() , 8usize);
}
impl Clone for _cef_string_wide_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_string_wide_t = _cef_string_wide_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_string_utf8_t {
    pub str: *mut ::std::os::raw::c_char,
    pub length: usize,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(str:
                                                             *mut ::std::os::raw::c_char)>,
}
#[test]
fn bindgen_test_layout__cef_string_utf8_t() {
    assert_eq!(::std::mem::size_of::<_cef_string_utf8_t>() , 24usize);
    assert_eq!(::std::mem::align_of::<_cef_string_utf8_t>() , 8usize);
}
impl Clone for _cef_string_utf8_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_string_utf8_t = _cef_string_utf8_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_string_utf16_t {
    pub str: *mut char16,
    pub length: usize,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(str: *mut char16)>,
}
#[test]
fn bindgen_test_layout__cef_string_utf16_t() {
    assert_eq!(::std::mem::size_of::<_cef_string_utf16_t>() , 24usize);
    assert_eq!(::std::mem::align_of::<_cef_string_utf16_t>() , 8usize);
}
impl Clone for _cef_string_utf16_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_string_utf16_t = _cef_string_utf16_t;
extern "C" {
    ///
    pub fn cef_string_wide_set(src: *const wchar_t, src_len: usize,
                               output: *mut cef_string_wide_t,
                               copy: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf8_set(src: *const ::std::os::raw::c_char,
                               src_len: usize, output: *mut cef_string_utf8_t,
                               copy: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_set(src: *const char16, src_len: usize,
                                output: *mut cef_string_utf16_t,
                                copy: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    ///
    pub fn cef_string_wide_clear(str: *mut cef_string_wide_t);
}
extern "C" {
    pub fn cef_string_utf8_clear(str: *mut cef_string_utf8_t);
}
extern "C" {
    pub fn cef_string_utf16_clear(str: *mut cef_string_utf16_t);
}
extern "C" {
    ///
    pub fn cef_string_wide_cmp(str1: *const cef_string_wide_t,
                               str2: *const cef_string_wide_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf8_cmp(str1: *const cef_string_utf8_t,
                               str2: *const cef_string_utf8_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_cmp(str1: *const cef_string_utf16_t,
                                str2: *const cef_string_utf16_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    ///
    pub fn cef_string_wide_to_utf8(src: *const wchar_t, src_len: usize,
                                   output: *mut cef_string_utf8_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf8_to_wide(src: *const ::std::os::raw::c_char,
                                   src_len: usize,
                                   output: *mut cef_string_wide_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_wide_to_utf16(src: *const wchar_t, src_len: usize,
                                    output: *mut cef_string_utf16_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_to_wide(src: *const char16, src_len: usize,
                                    output: *mut cef_string_wide_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf8_to_utf16(src: *const ::std::os::raw::c_char,
                                    src_len: usize,
                                    output: *mut cef_string_utf16_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_utf16_to_utf8(src: *const char16, src_len: usize,
                                    output: *mut cef_string_utf8_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    ///
    pub fn cef_string_ascii_to_wide(src: *const ::std::os::raw::c_char,
                                    src_len: usize,
                                    output: *mut cef_string_wide_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_string_ascii_to_utf16(src: *const ::std::os::raw::c_char,
                                     src_len: usize,
                                     output: *mut cef_string_utf16_t)
     -> ::std::os::raw::c_int;
}
///
pub type cef_string_userfree_wide_t = *mut cef_string_wide_t;
pub type cef_string_userfree_utf8_t = *mut cef_string_utf8_t;
pub type cef_string_userfree_utf16_t = *mut cef_string_utf16_t;
extern "C" {
    ///
    pub fn cef_string_userfree_wide_alloc() -> cef_string_userfree_wide_t;
}
extern "C" {
    pub fn cef_string_userfree_utf8_alloc() -> cef_string_userfree_utf8_t;
}
extern "C" {
    pub fn cef_string_userfree_utf16_alloc() -> cef_string_userfree_utf16_t;
}
extern "C" {
    ///
    pub fn cef_string_userfree_wide_free(str: cef_string_userfree_wide_t);
}
extern "C" {
    pub fn cef_string_userfree_utf8_free(str: cef_string_userfree_utf8_t);
}
extern "C" {
    pub fn cef_string_userfree_utf16_free(str: cef_string_userfree_utf16_t);
}
pub type cef_string_t = cef_string_utf16_t;
///
pub type cef_string_list_t = *mut ::std::os::raw::c_void;
extern "C" {
    ///
    pub fn cef_string_list_alloc() -> cef_string_list_t;
}
extern "C" {
    ///
    pub fn cef_string_list_size(list: cef_string_list_t) -> usize;
}
extern "C" {
    ///
    pub fn cef_string_list_value(list: cef_string_list_t, index: usize,
                                 value: *mut cef_string_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    ///
    pub fn cef_string_list_append(list: cef_string_list_t,
                                  value: *const cef_string_t);
}
extern "C" {
    ///
    pub fn cef_string_list_clear(list: cef_string_list_t);
}
extern "C" {
    ///
    pub fn cef_string_list_free(list: cef_string_list_t);
}
extern "C" {
    ///
    pub fn cef_string_list_copy(list: cef_string_list_t) -> cef_string_list_t;
}
pub type __time_t = ::std::os::raw::c_long;
pub type time_t = __time_t;
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_time_t {
    pub year: ::std::os::raw::c_int,
    pub month: ::std::os::raw::c_int,
    pub day_of_week: ::std::os::raw::c_int,
    pub day_of_month: ::std::os::raw::c_int,
    pub hour: ::std::os::raw::c_int,
    pub minute: ::std::os::raw::c_int,
    pub second: ::std::os::raw::c_int,
    pub millisecond: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_time_t() {
    assert_eq!(::std::mem::size_of::<_cef_time_t>() , 32usize);
    assert_eq!(::std::mem::align_of::<_cef_time_t>() , 4usize);
}
impl Clone for _cef_time_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_time_t = _cef_time_t;
extern "C" {
    ///
    pub fn cef_time_to_timet(cef_time: *const cef_time_t, time: *mut time_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_time_from_timet(time: time_t, cef_time: *mut cef_time_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    ///
    pub fn cef_time_to_doublet(cef_time: *const cef_time_t, time: *mut f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cef_time_from_doublet(time: f64, cef_time: *mut cef_time_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    ///
    pub fn cef_time_now(cef_time: *mut cef_time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    ///
    pub fn cef_time_delta(cef_time1: *const cef_time_t,
                          cef_time2: *const cef_time_t,
                          delta: *mut ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XEvent([u8; 0]);
pub type XEvent = _XEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XDisplay([u8; 0]);
pub type XDisplay = _XDisplay;
extern "C" {
    ///
    pub fn cef_get_xdisplay() -> *mut XDisplay;
}
pub type cef_window_info_t = _cef_window_info_t;
pub type cef_color_t = uint32;
pub const LOGSEVERITY_DEFAULT: _bindgen_ty_3 =
    _bindgen_ty_3::LOGSEVERITY_DEFAULT;
pub const LOGSEVERITY_VERBOSE: _bindgen_ty_3 =
    _bindgen_ty_3::LOGSEVERITY_VERBOSE;
pub const LOGSEVERITY_INFO: _bindgen_ty_3 = _bindgen_ty_3::LOGSEVERITY_INFO;
pub const LOGSEVERITY_WARNING: _bindgen_ty_3 =
    _bindgen_ty_3::LOGSEVERITY_WARNING;
pub const LOGSEVERITY_ERROR: _bindgen_ty_3 = _bindgen_ty_3::LOGSEVERITY_ERROR;
pub const LOGSEVERITY_DISABLE: _bindgen_ty_3 =
    _bindgen_ty_3::LOGSEVERITY_DISABLE;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_3 {
    LOGSEVERITY_DEFAULT = 0,
    LOGSEVERITY_VERBOSE = 1,
    LOGSEVERITY_INFO = 2,
    LOGSEVERITY_WARNING = 3,
    LOGSEVERITY_ERROR = 4,
    LOGSEVERITY_DISABLE = 99,
}
pub use self::_bindgen_ty_3 as cef_log_severity_t;
pub const STATE_DEFAULT: _bindgen_ty_4 = _bindgen_ty_4::STATE_DEFAULT;
pub const STATE_ENABLED: _bindgen_ty_4 = _bindgen_ty_4::STATE_ENABLED;
pub const STATE_DISABLED: _bindgen_ty_4 = _bindgen_ty_4::STATE_DISABLED;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_4 {
    STATE_DEFAULT = 0,
    STATE_ENABLED = 1,
    STATE_DISABLED = 2,
}
pub use self::_bindgen_ty_4 as cef_state_t;
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_settings_t {
    ///
    pub size: usize,
    ///
    pub single_process: ::std::os::raw::c_int,
    ///
    pub no_sandbox: ::std::os::raw::c_int,
    ///
    pub browser_subprocess_path: cef_string_t,
    ///
    pub multi_threaded_message_loop: ::std::os::raw::c_int,
    ///
    pub external_message_pump: ::std::os::raw::c_int,
    ///
    pub windowless_rendering_enabled: ::std::os::raw::c_int,
    ///
    pub command_line_args_disabled: ::std::os::raw::c_int,
    ///
    pub cache_path: cef_string_t,
    ///
    pub user_data_path: cef_string_t,
    ///
    pub persist_session_cookies: ::std::os::raw::c_int,
    ///
    pub persist_user_preferences: ::std::os::raw::c_int,
    ///
    pub user_agent: cef_string_t,
    ///
    pub product_version: cef_string_t,
    ///
    pub locale: cef_string_t,
    ///
    pub log_file: cef_string_t,
    ///
    pub log_severity: cef_log_severity_t,
    ///
    pub javascript_flags: cef_string_t,
    ///
    pub resources_dir_path: cef_string_t,
    ///
    pub locales_dir_path: cef_string_t,
    ///
    pub pack_loading_disabled: ::std::os::raw::c_int,
    ///
    pub remote_debugging_port: ::std::os::raw::c_int,
    ///
    pub uncaught_exception_stack_size: ::std::os::raw::c_int,
    ///
    pub context_safety_implementation: ::std::os::raw::c_int,
    ///
    pub ignore_certificate_errors: ::std::os::raw::c_int,
    ///
    pub enable_net_security_expiration: ::std::os::raw::c_int,
    ///
    pub background_color: cef_color_t,
    ///
    pub accept_language_list: cef_string_t,
}
#[test]
fn bindgen_test_layout__cef_settings_t() {
    assert_eq!(::std::mem::size_of::<_cef_settings_t>() , 344usize);
    assert_eq!(::std::mem::align_of::<_cef_settings_t>() , 8usize);
}
impl Clone for _cef_settings_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_request_context_settings_t {
    ///
    pub size: usize,
    ///
    pub cache_path: cef_string_t,
    ///
    pub persist_session_cookies: ::std::os::raw::c_int,
    ///
    pub persist_user_preferences: ::std::os::raw::c_int,
    ///
    pub ignore_certificate_errors: ::std::os::raw::c_int,
    ///
    pub enable_net_security_expiration: ::std::os::raw::c_int,
    ///
    pub accept_language_list: cef_string_t,
}
#[test]
fn bindgen_test_layout__cef_request_context_settings_t() {
    assert_eq!(::std::mem::size_of::<_cef_request_context_settings_t>() ,
               72usize);
    assert_eq!(::std::mem::align_of::<_cef_request_context_settings_t>() ,
               8usize);
}
impl Clone for _cef_request_context_settings_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_browser_settings_t {
    ///
    pub size: usize,
    ///
    pub windowless_frame_rate: ::std::os::raw::c_int,
    ///
    pub standard_font_family: cef_string_t,
    pub fixed_font_family: cef_string_t,
    pub serif_font_family: cef_string_t,
    pub sans_serif_font_family: cef_string_t,
    pub cursive_font_family: cef_string_t,
    pub fantasy_font_family: cef_string_t,
    pub default_font_size: ::std::os::raw::c_int,
    pub default_fixed_font_size: ::std::os::raw::c_int,
    pub minimum_font_size: ::std::os::raw::c_int,
    pub minimum_logical_font_size: ::std::os::raw::c_int,
    ///
    pub default_encoding: cef_string_t,
    ///
    pub remote_fonts: cef_state_t,
    ///
    pub javascript: cef_state_t,
    ///
    pub javascript_open_windows: cef_state_t,
    ///
    pub javascript_close_windows: cef_state_t,
    ///
    pub javascript_access_clipboard: cef_state_t,
    ///
    pub javascript_dom_paste: cef_state_t,
    ///
    pub caret_browsing: cef_state_t,
    ///
    pub plugins: cef_state_t,
    ///
    pub universal_access_from_file_urls: cef_state_t,
    ///
    pub file_access_from_file_urls: cef_state_t,
    ///
    pub web_security: cef_state_t,
    ///
    pub image_loading: cef_state_t,
    ///
    pub image_shrink_standalone_to_fit: cef_state_t,
    ///
    pub text_area_resize: cef_state_t,
    ///
    pub tab_to_links: cef_state_t,
    ///
    pub local_storage: cef_state_t,
    ///
    pub databases: cef_state_t,
    ///
    pub application_cache: cef_state_t,
    ///
    pub webgl: cef_state_t,
    ///
    pub background_color: cef_color_t,
    ///
    pub accept_language_list: cef_string_t,
}
#[test]
fn bindgen_test_layout__cef_browser_settings_t() {
    assert_eq!(::std::mem::size_of::<_cef_browser_settings_t>() , 304usize);
    assert_eq!(::std::mem::align_of::<_cef_browser_settings_t>() , 8usize);
}
impl Clone for _cef_browser_settings_t {
    fn clone(&self) -> Self { *self }
}
pub const RV_CANCEL: _bindgen_ty_5 = _bindgen_ty_5::RV_CANCEL;
pub const RV_CONTINUE: _bindgen_ty_5 = _bindgen_ty_5::RV_CONTINUE;
pub const RV_CONTINUE_ASYNC: _bindgen_ty_5 = _bindgen_ty_5::RV_CONTINUE_ASYNC;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_5 {
    RV_CANCEL = 0,
    RV_CONTINUE = 1,
    RV_CONTINUE_ASYNC = 2,
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_cookie_t {
    ///
    pub name: cef_string_t,
    ///
    pub value: cef_string_t,
    ///
    pub domain: cef_string_t,
    ///
    pub path: cef_string_t,
    ///
    pub secure: ::std::os::raw::c_int,
    ///
    pub httponly: ::std::os::raw::c_int,
    ///
    pub creation: cef_time_t,
    ///
    pub last_access: cef_time_t,
    ///
    pub has_expires: ::std::os::raw::c_int,
    pub expires: cef_time_t,
}
#[test]
fn bindgen_test_layout__cef_cookie_t() {
    assert_eq!(::std::mem::size_of::<_cef_cookie_t>() , 208usize);
    assert_eq!(::std::mem::align_of::<_cef_cookie_t>() , 8usize);
}
impl Clone for _cef_cookie_t {
    fn clone(&self) -> Self { *self }
}
pub const TS_ABNORMAL_TERMINATION: _bindgen_ty_6 =
    _bindgen_ty_6::TS_ABNORMAL_TERMINATION;
pub const TS_PROCESS_WAS_KILLED: _bindgen_ty_6 =
    _bindgen_ty_6::TS_PROCESS_WAS_KILLED;
pub const TS_PROCESS_CRASHED: _bindgen_ty_6 =
    _bindgen_ty_6::TS_PROCESS_CRASHED;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_6 {
    TS_ABNORMAL_TERMINATION = 0,
    TS_PROCESS_WAS_KILLED = 1,
    TS_PROCESS_CRASHED = 2,
}
pub use self::_bindgen_ty_6 as cef_termination_status_t;
pub const ERR_NONE: _bindgen_ty_9 = _bindgen_ty_9::ERR_NONE;
pub const ERR_FAILED: _bindgen_ty_9 = _bindgen_ty_9::ERR_FAILED;
pub const ERR_ABORTED: _bindgen_ty_9 = _bindgen_ty_9::ERR_ABORTED;
pub const ERR_INVALID_ARGUMENT: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_INVALID_ARGUMENT;
pub const ERR_INVALID_HANDLE: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_INVALID_HANDLE;
pub const ERR_FILE_NOT_FOUND: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_FILE_NOT_FOUND;
pub const ERR_TIMED_OUT: _bindgen_ty_9 = _bindgen_ty_9::ERR_TIMED_OUT;
pub const ERR_FILE_TOO_BIG: _bindgen_ty_9 = _bindgen_ty_9::ERR_FILE_TOO_BIG;
pub const ERR_UNEXPECTED: _bindgen_ty_9 = _bindgen_ty_9::ERR_UNEXPECTED;
pub const ERR_ACCESS_DENIED: _bindgen_ty_9 = _bindgen_ty_9::ERR_ACCESS_DENIED;
pub const ERR_NOT_IMPLEMENTED: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_NOT_IMPLEMENTED;
pub const ERR_CONNECTION_CLOSED: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_CONNECTION_CLOSED;
pub const ERR_CONNECTION_RESET: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_CONNECTION_RESET;
pub const ERR_CONNECTION_REFUSED: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_CONNECTION_REFUSED;
pub const ERR_CONNECTION_ABORTED: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_CONNECTION_ABORTED;
pub const ERR_CONNECTION_FAILED: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_CONNECTION_FAILED;
pub const ERR_NAME_NOT_RESOLVED: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_NAME_NOT_RESOLVED;
pub const ERR_INTERNET_DISCONNECTED: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_INTERNET_DISCONNECTED;
pub const ERR_SSL_PROTOCOL_ERROR: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_SSL_PROTOCOL_ERROR;
pub const ERR_ADDRESS_INVALID: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_ADDRESS_INVALID;
pub const ERR_ADDRESS_UNREACHABLE: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_ADDRESS_UNREACHABLE;
pub const ERR_SSL_CLIENT_AUTH_CERT_NEEDED: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_SSL_CLIENT_AUTH_CERT_NEEDED;
pub const ERR_TUNNEL_CONNECTION_FAILED: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_TUNNEL_CONNECTION_FAILED;
pub const ERR_NO_SSL_VERSIONS_ENABLED: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_NO_SSL_VERSIONS_ENABLED;
pub const ERR_SSL_VERSION_OR_CIPHER_MISMATCH: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_SSL_VERSION_OR_CIPHER_MISMATCH;
pub const ERR_SSL_RENEGOTIATION_REQUESTED: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_SSL_RENEGOTIATION_REQUESTED;
pub const ERR_CERT_COMMON_NAME_INVALID: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_CERT_COMMON_NAME_INVALID;
pub const ERR_CERT_BEGIN: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_CERT_COMMON_NAME_INVALID;
pub const ERR_CERT_DATE_INVALID: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_CERT_DATE_INVALID;
pub const ERR_CERT_AUTHORITY_INVALID: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_CERT_AUTHORITY_INVALID;
pub const ERR_CERT_CONTAINS_ERRORS: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_CERT_CONTAINS_ERRORS;
pub const ERR_CERT_NO_REVOCATION_MECHANISM: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_CERT_NO_REVOCATION_MECHANISM;
pub const ERR_CERT_UNABLE_TO_CHECK_REVOCATION: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_CERT_UNABLE_TO_CHECK_REVOCATION;
pub const ERR_CERT_REVOKED: _bindgen_ty_9 = _bindgen_ty_9::ERR_CERT_REVOKED;
pub const ERR_CERT_INVALID: _bindgen_ty_9 = _bindgen_ty_9::ERR_CERT_INVALID;
pub const ERR_CERT_WEAK_SIGNATURE_ALGORITHM: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_CERT_WEAK_SIGNATURE_ALGORITHM;
pub const ERR_CERT_NON_UNIQUE_NAME: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_CERT_NON_UNIQUE_NAME;
pub const ERR_CERT_WEAK_KEY: _bindgen_ty_9 = _bindgen_ty_9::ERR_CERT_WEAK_KEY;
pub const ERR_CERT_NAME_CONSTRAINT_VIOLATION: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_CERT_NAME_CONSTRAINT_VIOLATION;
pub const ERR_CERT_VALIDITY_TOO_LONG: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_CERT_VALIDITY_TOO_LONG;
pub const ERR_CERT_END: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_CERT_VALIDITY_TOO_LONG;
pub const ERR_INVALID_URL: _bindgen_ty_9 = _bindgen_ty_9::ERR_INVALID_URL;
pub const ERR_DISALLOWED_URL_SCHEME: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_DISALLOWED_URL_SCHEME;
pub const ERR_UNKNOWN_URL_SCHEME: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_UNKNOWN_URL_SCHEME;
pub const ERR_TOO_MANY_REDIRECTS: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_TOO_MANY_REDIRECTS;
pub const ERR_UNSAFE_REDIRECT: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_UNSAFE_REDIRECT;
pub const ERR_UNSAFE_PORT: _bindgen_ty_9 = _bindgen_ty_9::ERR_UNSAFE_PORT;
pub const ERR_INVALID_RESPONSE: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_INVALID_RESPONSE;
pub const ERR_INVALID_CHUNKED_ENCODING: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_INVALID_CHUNKED_ENCODING;
pub const ERR_METHOD_NOT_SUPPORTED: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_METHOD_NOT_SUPPORTED;
pub const ERR_UNEXPECTED_PROXY_AUTH: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_UNEXPECTED_PROXY_AUTH;
pub const ERR_EMPTY_RESPONSE: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_EMPTY_RESPONSE;
pub const ERR_RESPONSE_HEADERS_TOO_BIG: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_RESPONSE_HEADERS_TOO_BIG;
pub const ERR_CACHE_MISS: _bindgen_ty_9 = _bindgen_ty_9::ERR_CACHE_MISS;
pub const ERR_INSECURE_RESPONSE: _bindgen_ty_9 =
    _bindgen_ty_9::ERR_INSECURE_RESPONSE;
#[repr(i32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_9 {
    ERR_NONE = 0,
    ERR_FAILED = -2,
    ERR_ABORTED = -3,
    ERR_INVALID_ARGUMENT = -4,
    ERR_INVALID_HANDLE = -5,
    ERR_FILE_NOT_FOUND = -6,
    ERR_TIMED_OUT = -7,
    ERR_FILE_TOO_BIG = -8,
    ERR_UNEXPECTED = -9,
    ERR_ACCESS_DENIED = -10,
    ERR_NOT_IMPLEMENTED = -11,
    ERR_CONNECTION_CLOSED = -100,
    ERR_CONNECTION_RESET = -101,
    ERR_CONNECTION_REFUSED = -102,
    ERR_CONNECTION_ABORTED = -103,
    ERR_CONNECTION_FAILED = -104,
    ERR_NAME_NOT_RESOLVED = -105,
    ERR_INTERNET_DISCONNECTED = -106,
    ERR_SSL_PROTOCOL_ERROR = -107,
    ERR_ADDRESS_INVALID = -108,
    ERR_ADDRESS_UNREACHABLE = -109,
    ERR_SSL_CLIENT_AUTH_CERT_NEEDED = -110,
    ERR_TUNNEL_CONNECTION_FAILED = -111,
    ERR_NO_SSL_VERSIONS_ENABLED = -112,
    ERR_SSL_VERSION_OR_CIPHER_MISMATCH = -113,
    ERR_SSL_RENEGOTIATION_REQUESTED = -114,
    ERR_CERT_COMMON_NAME_INVALID = -200,
    ERR_CERT_DATE_INVALID = -201,
    ERR_CERT_AUTHORITY_INVALID = -202,
    ERR_CERT_CONTAINS_ERRORS = -203,
    ERR_CERT_NO_REVOCATION_MECHANISM = -204,
    ERR_CERT_UNABLE_TO_CHECK_REVOCATION = -205,
    ERR_CERT_REVOKED = -206,
    ERR_CERT_INVALID = -207,
    ERR_CERT_WEAK_SIGNATURE_ALGORITHM = -208,
    ERR_CERT_NON_UNIQUE_NAME = -210,
    ERR_CERT_WEAK_KEY = -211,
    ERR_CERT_NAME_CONSTRAINT_VIOLATION = -212,
    ERR_CERT_VALIDITY_TOO_LONG = -213,
    ERR_INVALID_URL = -300,
    ERR_DISALLOWED_URL_SCHEME = -301,
    ERR_UNKNOWN_URL_SCHEME = -302,
    ERR_TOO_MANY_REDIRECTS = -310,
    ERR_UNSAFE_REDIRECT = -311,
    ERR_UNSAFE_PORT = -312,
    ERR_INVALID_RESPONSE = -320,
    ERR_INVALID_CHUNKED_ENCODING = -321,
    ERR_METHOD_NOT_SUPPORTED = -322,
    ERR_UNEXPECTED_PROXY_AUTH = -323,
    ERR_EMPTY_RESPONSE = -324,
    ERR_RESPONSE_HEADERS_TOO_BIG = -325,
    ERR_CACHE_MISS = -400,
    ERR_INSECURE_RESPONSE = -501,
}
pub use self::_bindgen_ty_9 as cef_errorcode_t;
pub const CERT_STATUS_NONE: _bindgen_ty_10 = _bindgen_ty_10::CERT_STATUS_NONE;
pub const CERT_STATUS_COMMON_NAME_INVALID: _bindgen_ty_10 =
    _bindgen_ty_10::CERT_STATUS_COMMON_NAME_INVALID;
pub const CERT_STATUS_DATE_INVALID: _bindgen_ty_10 =
    _bindgen_ty_10::CERT_STATUS_DATE_INVALID;
pub const CERT_STATUS_AUTHORITY_INVALID: _bindgen_ty_10 =
    _bindgen_ty_10::CERT_STATUS_AUTHORITY_INVALID;
pub const CERT_STATUS_NO_REVOCATION_MECHANISM: _bindgen_ty_10 =
    _bindgen_ty_10::CERT_STATUS_NO_REVOCATION_MECHANISM;
pub const CERT_STATUS_UNABLE_TO_CHECK_REVOCATION: _bindgen_ty_10 =
    _bindgen_ty_10::CERT_STATUS_UNABLE_TO_CHECK_REVOCATION;
pub const CERT_STATUS_REVOKED: _bindgen_ty_10 =
    _bindgen_ty_10::CERT_STATUS_REVOKED;
pub const CERT_STATUS_INVALID: _bindgen_ty_10 =
    _bindgen_ty_10::CERT_STATUS_INVALID;
pub const CERT_STATUS_WEAK_SIGNATURE_ALGORITHM: _bindgen_ty_10 =
    _bindgen_ty_10::CERT_STATUS_WEAK_SIGNATURE_ALGORITHM;
pub const CERT_STATUS_NON_UNIQUE_NAME: _bindgen_ty_10 =
    _bindgen_ty_10::CERT_STATUS_NON_UNIQUE_NAME;
pub const CERT_STATUS_WEAK_KEY: _bindgen_ty_10 =
    _bindgen_ty_10::CERT_STATUS_WEAK_KEY;
pub const CERT_STATUS_PINNED_KEY_MISSING: _bindgen_ty_10 =
    _bindgen_ty_10::CERT_STATUS_PINNED_KEY_MISSING;
pub const CERT_STATUS_NAME_CONSTRAINT_VIOLATION: _bindgen_ty_10 =
    _bindgen_ty_10::CERT_STATUS_NAME_CONSTRAINT_VIOLATION;
pub const CERT_STATUS_VALIDITY_TOO_LONG: _bindgen_ty_10 =
    _bindgen_ty_10::CERT_STATUS_VALIDITY_TOO_LONG;
pub const CERT_STATUS_IS_EV: _bindgen_ty_10 =
    _bindgen_ty_10::CERT_STATUS_IS_EV;
pub const CERT_STATUS_REV_CHECKING_ENABLED: _bindgen_ty_10 =
    _bindgen_ty_10::CERT_STATUS_REV_CHECKING_ENABLED;
pub const CERT_STATUS_SHA1_SIGNATURE_PRESENT: _bindgen_ty_10 =
    _bindgen_ty_10::CERT_STATUS_SHA1_SIGNATURE_PRESENT;
pub const CERT_STATUS_CT_COMPLIANCE_FAILED: _bindgen_ty_10 =
    _bindgen_ty_10::CERT_STATUS_CT_COMPLIANCE_FAILED;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_10 {
    CERT_STATUS_NONE = 0,
    CERT_STATUS_COMMON_NAME_INVALID = 1,
    CERT_STATUS_DATE_INVALID = 2,
    CERT_STATUS_AUTHORITY_INVALID = 4,
    CERT_STATUS_NO_REVOCATION_MECHANISM = 16,
    CERT_STATUS_UNABLE_TO_CHECK_REVOCATION = 32,
    CERT_STATUS_REVOKED = 64,
    CERT_STATUS_INVALID = 128,
    CERT_STATUS_WEAK_SIGNATURE_ALGORITHM = 256,
    CERT_STATUS_NON_UNIQUE_NAME = 1024,
    CERT_STATUS_WEAK_KEY = 2048,
    CERT_STATUS_PINNED_KEY_MISSING = 8192,
    CERT_STATUS_NAME_CONSTRAINT_VIOLATION = 16384,
    CERT_STATUS_VALIDITY_TOO_LONG = 32768,
    CERT_STATUS_IS_EV = 65536,
    CERT_STATUS_REV_CHECKING_ENABLED = 131072,
    CERT_STATUS_SHA1_SIGNATURE_PRESENT = 524288,
    CERT_STATUS_CT_COMPLIANCE_FAILED = 1048576,
}
pub use self::_bindgen_ty_10 as cef_cert_status_t;
pub const WOD_UNKNOWN: _bindgen_ty_11 = _bindgen_ty_11::WOD_UNKNOWN;
pub const WOD_CURRENT_TAB: _bindgen_ty_11 = _bindgen_ty_11::WOD_CURRENT_TAB;
pub const WOD_SINGLETON_TAB: _bindgen_ty_11 =
    _bindgen_ty_11::WOD_SINGLETON_TAB;
pub const WOD_NEW_FOREGROUND_TAB: _bindgen_ty_11 =
    _bindgen_ty_11::WOD_NEW_FOREGROUND_TAB;
pub const WOD_NEW_BACKGROUND_TAB: _bindgen_ty_11 =
    _bindgen_ty_11::WOD_NEW_BACKGROUND_TAB;
pub const WOD_NEW_POPUP: _bindgen_ty_11 = _bindgen_ty_11::WOD_NEW_POPUP;
pub const WOD_NEW_WINDOW: _bindgen_ty_11 = _bindgen_ty_11::WOD_NEW_WINDOW;
pub const WOD_SAVE_TO_DISK: _bindgen_ty_11 = _bindgen_ty_11::WOD_SAVE_TO_DISK;
pub const WOD_OFF_THE_RECORD: _bindgen_ty_11 =
    _bindgen_ty_11::WOD_OFF_THE_RECORD;
pub const WOD_IGNORE_ACTION: _bindgen_ty_11 =
    _bindgen_ty_11::WOD_IGNORE_ACTION;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_11 {
    WOD_UNKNOWN = 0,
    WOD_CURRENT_TAB = 1,
    WOD_SINGLETON_TAB = 2,
    WOD_NEW_FOREGROUND_TAB = 3,
    WOD_NEW_BACKGROUND_TAB = 4,
    WOD_NEW_POPUP = 5,
    WOD_NEW_WINDOW = 6,
    WOD_SAVE_TO_DISK = 7,
    WOD_OFF_THE_RECORD = 8,
    WOD_IGNORE_ACTION = 9,
}
pub use self::_bindgen_ty_11 as cef_window_open_disposition_t;
pub const DRAG_OPERATION_NONE: _bindgen_ty_12 =
    _bindgen_ty_12::DRAG_OPERATION_NONE;
pub const DRAG_OPERATION_COPY: _bindgen_ty_12 =
    _bindgen_ty_12::DRAG_OPERATION_COPY;
pub const DRAG_OPERATION_LINK: _bindgen_ty_12 =
    _bindgen_ty_12::DRAG_OPERATION_LINK;
pub const DRAG_OPERATION_GENERIC: _bindgen_ty_12 =
    _bindgen_ty_12::DRAG_OPERATION_GENERIC;
pub const DRAG_OPERATION_PRIVATE: _bindgen_ty_12 =
    _bindgen_ty_12::DRAG_OPERATION_PRIVATE;
pub const DRAG_OPERATION_MOVE: _bindgen_ty_12 =
    _bindgen_ty_12::DRAG_OPERATION_MOVE;
pub const DRAG_OPERATION_DELETE: _bindgen_ty_12 =
    _bindgen_ty_12::DRAG_OPERATION_DELETE;
pub const DRAG_OPERATION_EVERY: _bindgen_ty_12 =
    _bindgen_ty_12::DRAG_OPERATION_EVERY;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_12 {
    DRAG_OPERATION_NONE = 0,
    DRAG_OPERATION_COPY = 1,
    DRAG_OPERATION_LINK = 2,
    DRAG_OPERATION_GENERIC = 4,
    DRAG_OPERATION_PRIVATE = 8,
    DRAG_OPERATION_MOVE = 16,
    DRAG_OPERATION_DELETE = 32,
    DRAG_OPERATION_EVERY = 4294967295,
}
pub use self::_bindgen_ty_12 as cef_drag_operations_mask_t;
pub const V8_ACCESS_CONTROL_DEFAULT: _bindgen_ty_13 =
    _bindgen_ty_13::V8_ACCESS_CONTROL_DEFAULT;
pub const V8_ACCESS_CONTROL_ALL_CAN_READ: _bindgen_ty_13 =
    _bindgen_ty_13::V8_ACCESS_CONTROL_ALL_CAN_READ;
pub const V8_ACCESS_CONTROL_ALL_CAN_WRITE: _bindgen_ty_13 =
    _bindgen_ty_13::V8_ACCESS_CONTROL_ALL_CAN_WRITE;
pub const V8_ACCESS_CONTROL_PROHIBITS_OVERWRITING: _bindgen_ty_13 =
    _bindgen_ty_13::V8_ACCESS_CONTROL_PROHIBITS_OVERWRITING;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_13 {
    V8_ACCESS_CONTROL_DEFAULT = 0,
    V8_ACCESS_CONTROL_ALL_CAN_READ = 1,
    V8_ACCESS_CONTROL_ALL_CAN_WRITE = 2,
    V8_ACCESS_CONTROL_PROHIBITS_OVERWRITING = 4,
}
pub use self::_bindgen_ty_13 as cef_v8_accesscontrol_t;
pub const V8_PROPERTY_ATTRIBUTE_NONE: _bindgen_ty_14 =
    _bindgen_ty_14::V8_PROPERTY_ATTRIBUTE_NONE;
pub const V8_PROPERTY_ATTRIBUTE_READONLY: _bindgen_ty_14 =
    _bindgen_ty_14::V8_PROPERTY_ATTRIBUTE_READONLY;
pub const V8_PROPERTY_ATTRIBUTE_DONTENUM: _bindgen_ty_14 =
    _bindgen_ty_14::V8_PROPERTY_ATTRIBUTE_DONTENUM;
pub const V8_PROPERTY_ATTRIBUTE_DONTDELETE: _bindgen_ty_14 =
    _bindgen_ty_14::V8_PROPERTY_ATTRIBUTE_DONTDELETE;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_14 {
    V8_PROPERTY_ATTRIBUTE_NONE = 0,
    V8_PROPERTY_ATTRIBUTE_READONLY = 1,
    V8_PROPERTY_ATTRIBUTE_DONTENUM = 2,
    V8_PROPERTY_ATTRIBUTE_DONTDELETE = 4,
}
pub use self::_bindgen_ty_14 as cef_v8_propertyattribute_t;
pub const PDE_TYPE_EMPTY: _bindgen_ty_15 = _bindgen_ty_15::PDE_TYPE_EMPTY;
pub const PDE_TYPE_BYTES: _bindgen_ty_15 = _bindgen_ty_15::PDE_TYPE_BYTES;
pub const PDE_TYPE_FILE: _bindgen_ty_15 = _bindgen_ty_15::PDE_TYPE_FILE;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_15 {
    PDE_TYPE_EMPTY = 0,
    PDE_TYPE_BYTES = 1,
    PDE_TYPE_FILE = 2,
}
pub const RT_MAIN_FRAME: _bindgen_ty_16 = _bindgen_ty_16::RT_MAIN_FRAME;
pub const RT_SUB_FRAME: _bindgen_ty_16 = _bindgen_ty_16::RT_SUB_FRAME;
pub const RT_STYLESHEET: _bindgen_ty_16 = _bindgen_ty_16::RT_STYLESHEET;
pub const RT_SCRIPT: _bindgen_ty_16 = _bindgen_ty_16::RT_SCRIPT;
pub const RT_IMAGE: _bindgen_ty_16 = _bindgen_ty_16::RT_IMAGE;
pub const RT_FONT_RESOURCE: _bindgen_ty_16 = _bindgen_ty_16::RT_FONT_RESOURCE;
pub const RT_SUB_RESOURCE: _bindgen_ty_16 = _bindgen_ty_16::RT_SUB_RESOURCE;
pub const RT_OBJECT: _bindgen_ty_16 = _bindgen_ty_16::RT_OBJECT;
pub const RT_MEDIA: _bindgen_ty_16 = _bindgen_ty_16::RT_MEDIA;
pub const RT_WORKER: _bindgen_ty_16 = _bindgen_ty_16::RT_WORKER;
pub const RT_SHARED_WORKER: _bindgen_ty_16 = _bindgen_ty_16::RT_SHARED_WORKER;
pub const RT_PREFETCH: _bindgen_ty_16 = _bindgen_ty_16::RT_PREFETCH;
pub const RT_FAVICON: _bindgen_ty_16 = _bindgen_ty_16::RT_FAVICON;
pub const RT_XHR: _bindgen_ty_16 = _bindgen_ty_16::RT_XHR;
pub const RT_PING: _bindgen_ty_16 = _bindgen_ty_16::RT_PING;
pub const RT_SERVICE_WORKER: _bindgen_ty_16 =
    _bindgen_ty_16::RT_SERVICE_WORKER;
pub const RT_CSP_REPORT: _bindgen_ty_16 = _bindgen_ty_16::RT_CSP_REPORT;
pub const RT_PLUGIN_RESOURCE: _bindgen_ty_16 =
    _bindgen_ty_16::RT_PLUGIN_RESOURCE;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_16 {
    RT_MAIN_FRAME = 0,
    RT_SUB_FRAME = 1,
    RT_STYLESHEET = 2,
    RT_SCRIPT = 3,
    RT_IMAGE = 4,
    RT_FONT_RESOURCE = 5,
    RT_SUB_RESOURCE = 6,
    RT_OBJECT = 7,
    RT_MEDIA = 8,
    RT_WORKER = 9,
    RT_SHARED_WORKER = 10,
    RT_PREFETCH = 11,
    RT_FAVICON = 12,
    RT_XHR = 13,
    RT_PING = 14,
    RT_SERVICE_WORKER = 15,
    RT_CSP_REPORT = 16,
    RT_PLUGIN_RESOURCE = 17,
}
pub const TT_LINK: _bindgen_ty_17 = _bindgen_ty_17::TT_LINK;
pub const TT_EXPLICIT: _bindgen_ty_17 = _bindgen_ty_17::TT_EXPLICIT;
pub const TT_AUTO_SUBFRAME: _bindgen_ty_17 = _bindgen_ty_17::TT_AUTO_SUBFRAME;
pub const TT_MANUAL_SUBFRAME: _bindgen_ty_17 =
    _bindgen_ty_17::TT_MANUAL_SUBFRAME;
pub const TT_FORM_SUBMIT: _bindgen_ty_17 = _bindgen_ty_17::TT_FORM_SUBMIT;
pub const TT_RELOAD: _bindgen_ty_17 = _bindgen_ty_17::TT_RELOAD;
pub const TT_SOURCE_MASK: _bindgen_ty_17 = _bindgen_ty_17::TT_SOURCE_MASK;
pub const TT_BLOCKED_FLAG: _bindgen_ty_17 = _bindgen_ty_17::TT_BLOCKED_FLAG;
pub const TT_FORWARD_BACK_FLAG: _bindgen_ty_17 =
    _bindgen_ty_17::TT_FORWARD_BACK_FLAG;
pub const TT_CHAIN_START_FLAG: _bindgen_ty_17 =
    _bindgen_ty_17::TT_CHAIN_START_FLAG;
pub const TT_CHAIN_END_FLAG: _bindgen_ty_17 =
    _bindgen_ty_17::TT_CHAIN_END_FLAG;
pub const TT_CLIENT_REDIRECT_FLAG: _bindgen_ty_17 =
    _bindgen_ty_17::TT_CLIENT_REDIRECT_FLAG;
pub const TT_SERVER_REDIRECT_FLAG: _bindgen_ty_17 =
    _bindgen_ty_17::TT_SERVER_REDIRECT_FLAG;
pub const TT_IS_REDIRECT_MASK: _bindgen_ty_17 =
    _bindgen_ty_17::TT_IS_REDIRECT_MASK;
pub const TT_QUALIFIER_MASK: _bindgen_ty_17 =
    _bindgen_ty_17::TT_QUALIFIER_MASK;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_17 {
    TT_LINK = 0,
    TT_EXPLICIT = 1,
    TT_AUTO_SUBFRAME = 3,
    TT_MANUAL_SUBFRAME = 4,
    TT_FORM_SUBMIT = 7,
    TT_RELOAD = 8,
    TT_SOURCE_MASK = 255,
    TT_BLOCKED_FLAG = 8388608,
    TT_FORWARD_BACK_FLAG = 16777216,
    TT_CHAIN_START_FLAG = 268435456,
    TT_CHAIN_END_FLAG = 536870912,
    TT_CLIENT_REDIRECT_FLAG = 1073741824,
    TT_SERVER_REDIRECT_FLAG = 2147483648,
    TT_IS_REDIRECT_MASK = 3221225472,
    TT_QUALIFIER_MASK = 4294967040,
}
pub use self::_bindgen_ty_17 as cef_transition_type_t;
pub const UR_UNKNOWN: _bindgen_ty_19 = _bindgen_ty_19::UR_UNKNOWN;
pub const UR_SUCCESS: _bindgen_ty_19 = _bindgen_ty_19::UR_SUCCESS;
pub const UR_IO_PENDING: _bindgen_ty_19 = _bindgen_ty_19::UR_IO_PENDING;
pub const UR_CANCELED: _bindgen_ty_19 = _bindgen_ty_19::UR_CANCELED;
pub const UR_FAILED: _bindgen_ty_19 = _bindgen_ty_19::UR_FAILED;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_19 {
    UR_UNKNOWN = 0,
    UR_SUCCESS = 1,
    UR_IO_PENDING = 2,
    UR_CANCELED = 3,
    UR_FAILED = 4,
}
pub use self::_bindgen_ty_19 as cef_urlrequest_status_t;
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_point_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_point_t() {
    assert_eq!(::std::mem::size_of::<_cef_point_t>() , 8usize);
    assert_eq!(::std::mem::align_of::<_cef_point_t>() , 4usize);
}
impl Clone for _cef_point_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_point_t = _cef_point_t;
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_rect_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_rect_t() {
    assert_eq!(::std::mem::size_of::<_cef_rect_t>() , 16usize);
    assert_eq!(::std::mem::align_of::<_cef_rect_t>() , 4usize);
}
impl Clone for _cef_rect_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_rect_t = _cef_rect_t;
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_size_t {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_size_t() {
    assert_eq!(::std::mem::size_of::<_cef_size_t>() , 8usize);
    assert_eq!(::std::mem::align_of::<_cef_size_t>() , 4usize);
}
impl Clone for _cef_size_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_size_t = _cef_size_t;
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_range_t {
    pub from: ::std::os::raw::c_int,
    pub to: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_range_t() {
    assert_eq!(::std::mem::size_of::<_cef_range_t>() , 8usize);
    assert_eq!(::std::mem::align_of::<_cef_range_t>() , 4usize);
}
impl Clone for _cef_range_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_range_t = _cef_range_t;
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_draggable_region_t {
    ///
    pub bounds: cef_rect_t,
    ///
    pub draggable: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_draggable_region_t() {
    assert_eq!(::std::mem::size_of::<_cef_draggable_region_t>() , 20usize);
    assert_eq!(::std::mem::align_of::<_cef_draggable_region_t>() , 4usize);
}
impl Clone for _cef_draggable_region_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_draggable_region_t = _cef_draggable_region_t;
pub const PID_BROWSER: _bindgen_ty_20 = _bindgen_ty_20::PID_BROWSER;
pub const PID_RENDERER: _bindgen_ty_20 = _bindgen_ty_20::PID_RENDERER;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_20 { PID_BROWSER = 0, PID_RENDERER = 1, }
pub use self::_bindgen_ty_20 as cef_process_id_t;
pub const TID_UI: _bindgen_ty_21 = _bindgen_ty_21::TID_UI;
pub const TID_DB: _bindgen_ty_21 = _bindgen_ty_21::TID_DB;
pub const TID_FILE: _bindgen_ty_21 = _bindgen_ty_21::TID_FILE;
pub const TID_FILE_USER_BLOCKING: _bindgen_ty_21 =
    _bindgen_ty_21::TID_FILE_USER_BLOCKING;
pub const TID_PROCESS_LAUNCHER: _bindgen_ty_21 =
    _bindgen_ty_21::TID_PROCESS_LAUNCHER;
pub const TID_CACHE: _bindgen_ty_21 = _bindgen_ty_21::TID_CACHE;
pub const TID_IO: _bindgen_ty_21 = _bindgen_ty_21::TID_IO;
pub const TID_RENDERER: _bindgen_ty_21 = _bindgen_ty_21::TID_RENDERER;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_21 {
    TID_UI = 0,
    TID_DB = 1,
    TID_FILE = 2,
    TID_FILE_USER_BLOCKING = 3,
    TID_PROCESS_LAUNCHER = 4,
    TID_CACHE = 5,
    TID_IO = 6,
    TID_RENDERER = 7,
}
pub use self::_bindgen_ty_21 as cef_thread_id_t;
pub const VTYPE_INVALID: _bindgen_ty_25 = _bindgen_ty_25::VTYPE_INVALID;
pub const VTYPE_NULL: _bindgen_ty_25 = _bindgen_ty_25::VTYPE_NULL;
pub const VTYPE_BOOL: _bindgen_ty_25 = _bindgen_ty_25::VTYPE_BOOL;
pub const VTYPE_INT: _bindgen_ty_25 = _bindgen_ty_25::VTYPE_INT;
pub const VTYPE_DOUBLE: _bindgen_ty_25 = _bindgen_ty_25::VTYPE_DOUBLE;
pub const VTYPE_STRING: _bindgen_ty_25 = _bindgen_ty_25::VTYPE_STRING;
pub const VTYPE_BINARY: _bindgen_ty_25 = _bindgen_ty_25::VTYPE_BINARY;
pub const VTYPE_DICTIONARY: _bindgen_ty_25 = _bindgen_ty_25::VTYPE_DICTIONARY;
pub const VTYPE_LIST: _bindgen_ty_25 = _bindgen_ty_25::VTYPE_LIST;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_25 {
    VTYPE_INVALID = 0,
    VTYPE_NULL = 1,
    VTYPE_BOOL = 2,
    VTYPE_INT = 3,
    VTYPE_DOUBLE = 4,
    VTYPE_STRING = 5,
    VTYPE_BINARY = 6,
    VTYPE_DICTIONARY = 7,
    VTYPE_LIST = 8,
}
pub const JSDIALOGTYPE_ALERT: _bindgen_ty_26 =
    _bindgen_ty_26::JSDIALOGTYPE_ALERT;
pub const JSDIALOGTYPE_CONFIRM: _bindgen_ty_26 =
    _bindgen_ty_26::JSDIALOGTYPE_CONFIRM;
pub const JSDIALOGTYPE_PROMPT: _bindgen_ty_26 =
    _bindgen_ty_26::JSDIALOGTYPE_PROMPT;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_26 {
    JSDIALOGTYPE_ALERT = 0,
    JSDIALOGTYPE_CONFIRM = 1,
    JSDIALOGTYPE_PROMPT = 2,
}
pub use self::_bindgen_ty_26 as cef_jsdialog_type_t;
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_screen_info_t {
    ///
    pub device_scale_factor: f32,
    ///
    pub depth: ::std::os::raw::c_int,
    ///
    pub depth_per_component: ::std::os::raw::c_int,
    ///
    pub is_monochrome: ::std::os::raw::c_int,
    ///
    pub rect: cef_rect_t,
    ///
    pub available_rect: cef_rect_t,
}
#[test]
fn bindgen_test_layout__cef_screen_info_t() {
    assert_eq!(::std::mem::size_of::<_cef_screen_info_t>() , 48usize);
    assert_eq!(::std::mem::align_of::<_cef_screen_info_t>() , 4usize);
}
impl Clone for _cef_screen_info_t {
    fn clone(&self) -> Self { *self }
}
pub const MBT_LEFT: _bindgen_ty_28 = _bindgen_ty_28::MBT_LEFT;
pub const MBT_MIDDLE: _bindgen_ty_28 = _bindgen_ty_28::MBT_MIDDLE;
pub const MBT_RIGHT: _bindgen_ty_28 = _bindgen_ty_28::MBT_RIGHT;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_28 { MBT_LEFT = 0, MBT_MIDDLE = 1, MBT_RIGHT = 2, }
pub use self::_bindgen_ty_28 as cef_mouse_button_type_t;
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_mouse_event_t {
    ///
    pub x: ::std::os::raw::c_int,
    ///
    pub y: ::std::os::raw::c_int,
    ///
    pub modifiers: uint32,
}
#[test]
fn bindgen_test_layout__cef_mouse_event_t() {
    assert_eq!(::std::mem::size_of::<_cef_mouse_event_t>() , 12usize);
    assert_eq!(::std::mem::align_of::<_cef_mouse_event_t>() , 4usize);
}
impl Clone for _cef_mouse_event_t {
    fn clone(&self) -> Self { *self }
}
pub const PET_VIEW: _bindgen_ty_29 = _bindgen_ty_29::PET_VIEW;
pub const PET_POPUP: _bindgen_ty_29 = _bindgen_ty_29::PET_POPUP;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_29 { PET_VIEW = 0, PET_POPUP = 1, }
pub use self::_bindgen_ty_29 as cef_paint_element_type_t;
pub const EVENTFLAG_NONE: _bindgen_ty_30 = _bindgen_ty_30::EVENTFLAG_NONE;
pub const EVENTFLAG_CAPS_LOCK_ON: _bindgen_ty_30 =
    _bindgen_ty_30::EVENTFLAG_CAPS_LOCK_ON;
pub const EVENTFLAG_SHIFT_DOWN: _bindgen_ty_30 =
    _bindgen_ty_30::EVENTFLAG_SHIFT_DOWN;
pub const EVENTFLAG_CONTROL_DOWN: _bindgen_ty_30 =
    _bindgen_ty_30::EVENTFLAG_CONTROL_DOWN;
pub const EVENTFLAG_ALT_DOWN: _bindgen_ty_30 =
    _bindgen_ty_30::EVENTFLAG_ALT_DOWN;
pub const EVENTFLAG_LEFT_MOUSE_BUTTON: _bindgen_ty_30 =
    _bindgen_ty_30::EVENTFLAG_LEFT_MOUSE_BUTTON;
pub const EVENTFLAG_MIDDLE_MOUSE_BUTTON: _bindgen_ty_30 =
    _bindgen_ty_30::EVENTFLAG_MIDDLE_MOUSE_BUTTON;
pub const EVENTFLAG_RIGHT_MOUSE_BUTTON: _bindgen_ty_30 =
    _bindgen_ty_30::EVENTFLAG_RIGHT_MOUSE_BUTTON;
pub const EVENTFLAG_COMMAND_DOWN: _bindgen_ty_30 =
    _bindgen_ty_30::EVENTFLAG_COMMAND_DOWN;
pub const EVENTFLAG_NUM_LOCK_ON: _bindgen_ty_30 =
    _bindgen_ty_30::EVENTFLAG_NUM_LOCK_ON;
pub const EVENTFLAG_IS_KEY_PAD: _bindgen_ty_30 =
    _bindgen_ty_30::EVENTFLAG_IS_KEY_PAD;
pub const EVENTFLAG_IS_LEFT: _bindgen_ty_30 =
    _bindgen_ty_30::EVENTFLAG_IS_LEFT;
pub const EVENTFLAG_IS_RIGHT: _bindgen_ty_30 =
    _bindgen_ty_30::EVENTFLAG_IS_RIGHT;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_30 {
    EVENTFLAG_NONE = 0,
    EVENTFLAG_CAPS_LOCK_ON = 1,
    EVENTFLAG_SHIFT_DOWN = 2,
    EVENTFLAG_CONTROL_DOWN = 4,
    EVENTFLAG_ALT_DOWN = 8,
    EVENTFLAG_LEFT_MOUSE_BUTTON = 16,
    EVENTFLAG_MIDDLE_MOUSE_BUTTON = 32,
    EVENTFLAG_RIGHT_MOUSE_BUTTON = 64,
    EVENTFLAG_COMMAND_DOWN = 128,
    EVENTFLAG_NUM_LOCK_ON = 256,
    EVENTFLAG_IS_KEY_PAD = 512,
    EVENTFLAG_IS_LEFT = 1024,
    EVENTFLAG_IS_RIGHT = 2048,
}
pub use self::_bindgen_ty_30 as cef_event_flags_t;
pub const MENUITEMTYPE_NONE: _bindgen_ty_31 =
    _bindgen_ty_31::MENUITEMTYPE_NONE;
pub const MENUITEMTYPE_COMMAND: _bindgen_ty_31 =
    _bindgen_ty_31::MENUITEMTYPE_COMMAND;
pub const MENUITEMTYPE_CHECK: _bindgen_ty_31 =
    _bindgen_ty_31::MENUITEMTYPE_CHECK;
pub const MENUITEMTYPE_RADIO: _bindgen_ty_31 =
    _bindgen_ty_31::MENUITEMTYPE_RADIO;
pub const MENUITEMTYPE_SEPARATOR: _bindgen_ty_31 =
    _bindgen_ty_31::MENUITEMTYPE_SEPARATOR;
pub const MENUITEMTYPE_SUBMENU: _bindgen_ty_31 =
    _bindgen_ty_31::MENUITEMTYPE_SUBMENU;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_31 {
    MENUITEMTYPE_NONE = 0,
    MENUITEMTYPE_COMMAND = 1,
    MENUITEMTYPE_CHECK = 2,
    MENUITEMTYPE_RADIO = 3,
    MENUITEMTYPE_SEPARATOR = 4,
    MENUITEMTYPE_SUBMENU = 5,
}
pub const CM_TYPEFLAG_NONE: _bindgen_ty_32 = _bindgen_ty_32::CM_TYPEFLAG_NONE;
pub const CM_TYPEFLAG_PAGE: _bindgen_ty_32 = _bindgen_ty_32::CM_TYPEFLAG_PAGE;
pub const CM_TYPEFLAG_FRAME: _bindgen_ty_32 =
    _bindgen_ty_32::CM_TYPEFLAG_FRAME;
pub const CM_TYPEFLAG_LINK: _bindgen_ty_32 = _bindgen_ty_32::CM_TYPEFLAG_LINK;
pub const CM_TYPEFLAG_MEDIA: _bindgen_ty_32 =
    _bindgen_ty_32::CM_TYPEFLAG_MEDIA;
pub const CM_TYPEFLAG_SELECTION: _bindgen_ty_32 =
    _bindgen_ty_32::CM_TYPEFLAG_SELECTION;
pub const CM_TYPEFLAG_EDITABLE: _bindgen_ty_32 =
    _bindgen_ty_32::CM_TYPEFLAG_EDITABLE;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_32 {
    CM_TYPEFLAG_NONE = 0,
    CM_TYPEFLAG_PAGE = 1,
    CM_TYPEFLAG_FRAME = 2,
    CM_TYPEFLAG_LINK = 4,
    CM_TYPEFLAG_MEDIA = 8,
    CM_TYPEFLAG_SELECTION = 16,
    CM_TYPEFLAG_EDITABLE = 32,
}
pub const CM_MEDIATYPE_NONE: _bindgen_ty_33 =
    _bindgen_ty_33::CM_MEDIATYPE_NONE;
pub const CM_MEDIATYPE_IMAGE: _bindgen_ty_33 =
    _bindgen_ty_33::CM_MEDIATYPE_IMAGE;
pub const CM_MEDIATYPE_VIDEO: _bindgen_ty_33 =
    _bindgen_ty_33::CM_MEDIATYPE_VIDEO;
pub const CM_MEDIATYPE_AUDIO: _bindgen_ty_33 =
    _bindgen_ty_33::CM_MEDIATYPE_AUDIO;
pub const CM_MEDIATYPE_FILE: _bindgen_ty_33 =
    _bindgen_ty_33::CM_MEDIATYPE_FILE;
pub const CM_MEDIATYPE_PLUGIN: _bindgen_ty_33 =
    _bindgen_ty_33::CM_MEDIATYPE_PLUGIN;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_33 {
    CM_MEDIATYPE_NONE = 0,
    CM_MEDIATYPE_IMAGE = 1,
    CM_MEDIATYPE_VIDEO = 2,
    CM_MEDIATYPE_AUDIO = 3,
    CM_MEDIATYPE_FILE = 4,
    CM_MEDIATYPE_PLUGIN = 5,
}
pub const CM_MEDIAFLAG_NONE: _bindgen_ty_34 =
    _bindgen_ty_34::CM_MEDIAFLAG_NONE;
pub const CM_MEDIAFLAG_ERROR: _bindgen_ty_34 =
    _bindgen_ty_34::CM_MEDIAFLAG_ERROR;
pub const CM_MEDIAFLAG_PAUSED: _bindgen_ty_34 =
    _bindgen_ty_34::CM_MEDIAFLAG_PAUSED;
pub const CM_MEDIAFLAG_MUTED: _bindgen_ty_34 =
    _bindgen_ty_34::CM_MEDIAFLAG_MUTED;
pub const CM_MEDIAFLAG_LOOP: _bindgen_ty_34 =
    _bindgen_ty_34::CM_MEDIAFLAG_LOOP;
pub const CM_MEDIAFLAG_CAN_SAVE: _bindgen_ty_34 =
    _bindgen_ty_34::CM_MEDIAFLAG_CAN_SAVE;
pub const CM_MEDIAFLAG_HAS_AUDIO: _bindgen_ty_34 =
    _bindgen_ty_34::CM_MEDIAFLAG_HAS_AUDIO;
pub const CM_MEDIAFLAG_HAS_VIDEO: _bindgen_ty_34 =
    _bindgen_ty_34::CM_MEDIAFLAG_HAS_VIDEO;
pub const CM_MEDIAFLAG_CONTROL_ROOT_ELEMENT: _bindgen_ty_34 =
    _bindgen_ty_34::CM_MEDIAFLAG_CONTROL_ROOT_ELEMENT;
pub const CM_MEDIAFLAG_CAN_PRINT: _bindgen_ty_34 =
    _bindgen_ty_34::CM_MEDIAFLAG_CAN_PRINT;
pub const CM_MEDIAFLAG_CAN_ROTATE: _bindgen_ty_34 =
    _bindgen_ty_34::CM_MEDIAFLAG_CAN_ROTATE;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_34 {
    CM_MEDIAFLAG_NONE = 0,
    CM_MEDIAFLAG_ERROR = 1,
    CM_MEDIAFLAG_PAUSED = 2,
    CM_MEDIAFLAG_MUTED = 4,
    CM_MEDIAFLAG_LOOP = 8,
    CM_MEDIAFLAG_CAN_SAVE = 16,
    CM_MEDIAFLAG_HAS_AUDIO = 32,
    CM_MEDIAFLAG_HAS_VIDEO = 64,
    CM_MEDIAFLAG_CONTROL_ROOT_ELEMENT = 128,
    CM_MEDIAFLAG_CAN_PRINT = 256,
    CM_MEDIAFLAG_CAN_ROTATE = 512,
}
pub const CM_EDITFLAG_NONE: _bindgen_ty_35 = _bindgen_ty_35::CM_EDITFLAG_NONE;
pub const CM_EDITFLAG_CAN_UNDO: _bindgen_ty_35 =
    _bindgen_ty_35::CM_EDITFLAG_CAN_UNDO;
pub const CM_EDITFLAG_CAN_REDO: _bindgen_ty_35 =
    _bindgen_ty_35::CM_EDITFLAG_CAN_REDO;
pub const CM_EDITFLAG_CAN_CUT: _bindgen_ty_35 =
    _bindgen_ty_35::CM_EDITFLAG_CAN_CUT;
pub const CM_EDITFLAG_CAN_COPY: _bindgen_ty_35 =
    _bindgen_ty_35::CM_EDITFLAG_CAN_COPY;
pub const CM_EDITFLAG_CAN_PASTE: _bindgen_ty_35 =
    _bindgen_ty_35::CM_EDITFLAG_CAN_PASTE;
pub const CM_EDITFLAG_CAN_DELETE: _bindgen_ty_35 =
    _bindgen_ty_35::CM_EDITFLAG_CAN_DELETE;
pub const CM_EDITFLAG_CAN_SELECT_ALL: _bindgen_ty_35 =
    _bindgen_ty_35::CM_EDITFLAG_CAN_SELECT_ALL;
pub const CM_EDITFLAG_CAN_TRANSLATE: _bindgen_ty_35 =
    _bindgen_ty_35::CM_EDITFLAG_CAN_TRANSLATE;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_35 {
    CM_EDITFLAG_NONE = 0,
    CM_EDITFLAG_CAN_UNDO = 1,
    CM_EDITFLAG_CAN_REDO = 2,
    CM_EDITFLAG_CAN_CUT = 4,
    CM_EDITFLAG_CAN_COPY = 8,
    CM_EDITFLAG_CAN_PASTE = 16,
    CM_EDITFLAG_CAN_DELETE = 32,
    CM_EDITFLAG_CAN_SELECT_ALL = 64,
    CM_EDITFLAG_CAN_TRANSLATE = 128,
}
pub const KEYEVENT_RAWKEYDOWN: _bindgen_ty_36 =
    _bindgen_ty_36::KEYEVENT_RAWKEYDOWN;
pub const KEYEVENT_KEYDOWN: _bindgen_ty_36 = _bindgen_ty_36::KEYEVENT_KEYDOWN;
pub const KEYEVENT_KEYUP: _bindgen_ty_36 = _bindgen_ty_36::KEYEVENT_KEYUP;
pub const KEYEVENT_CHAR: _bindgen_ty_36 = _bindgen_ty_36::KEYEVENT_CHAR;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_36 {
    KEYEVENT_RAWKEYDOWN = 0,
    KEYEVENT_KEYDOWN = 1,
    KEYEVENT_KEYUP = 2,
    KEYEVENT_CHAR = 3,
}
pub use self::_bindgen_ty_36 as cef_key_event_type_t;
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_key_event_t {
    ///
    pub type_: cef_key_event_type_t,
    ///
    pub modifiers: uint32,
    ///
    pub windows_key_code: ::std::os::raw::c_int,
    ///
    pub native_key_code: ::std::os::raw::c_int,
    ///
    pub is_system_key: ::std::os::raw::c_int,
    ///
    pub character: char16,
    ///
    pub unmodified_character: char16,
    ///
    pub focus_on_editable_field: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_key_event_t() {
    assert_eq!(::std::mem::size_of::<_cef_key_event_t>() , 28usize);
    assert_eq!(::std::mem::align_of::<_cef_key_event_t>() , 4usize);
}
impl Clone for _cef_key_event_t {
    fn clone(&self) -> Self { *self }
}
pub const FOCUS_SOURCE_NAVIGATION: _bindgen_ty_37 =
    _bindgen_ty_37::FOCUS_SOURCE_NAVIGATION;
pub const FOCUS_SOURCE_SYSTEM: _bindgen_ty_37 =
    _bindgen_ty_37::FOCUS_SOURCE_SYSTEM;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_37 {
    FOCUS_SOURCE_NAVIGATION = 0,
    FOCUS_SOURCE_SYSTEM = 1,
}
pub use self::_bindgen_ty_37 as cef_focus_source_t;
pub const NAVIGATION_LINK_CLICKED: _bindgen_ty_38 =
    _bindgen_ty_38::NAVIGATION_LINK_CLICKED;
pub const NAVIGATION_FORM_SUBMITTED: _bindgen_ty_38 =
    _bindgen_ty_38::NAVIGATION_FORM_SUBMITTED;
pub const NAVIGATION_BACK_FORWARD: _bindgen_ty_38 =
    _bindgen_ty_38::NAVIGATION_BACK_FORWARD;
pub const NAVIGATION_RELOAD: _bindgen_ty_38 =
    _bindgen_ty_38::NAVIGATION_RELOAD;
pub const NAVIGATION_FORM_RESUBMITTED: _bindgen_ty_38 =
    _bindgen_ty_38::NAVIGATION_FORM_RESUBMITTED;
pub const NAVIGATION_OTHER: _bindgen_ty_38 = _bindgen_ty_38::NAVIGATION_OTHER;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_38 {
    NAVIGATION_LINK_CLICKED = 0,
    NAVIGATION_FORM_SUBMITTED = 1,
    NAVIGATION_BACK_FORWARD = 2,
    NAVIGATION_RELOAD = 3,
    NAVIGATION_FORM_RESUBMITTED = 4,
    NAVIGATION_OTHER = 5,
}
pub use self::_bindgen_ty_38 as cef_navigation_type_t;
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_popup_features_t {
    pub x: ::std::os::raw::c_int,
    pub xSet: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub ySet: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub widthSet: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub heightSet: ::std::os::raw::c_int,
    pub menuBarVisible: ::std::os::raw::c_int,
    pub statusBarVisible: ::std::os::raw::c_int,
    pub toolBarVisible: ::std::os::raw::c_int,
    pub locationBarVisible: ::std::os::raw::c_int,
    pub scrollbarsVisible: ::std::os::raw::c_int,
    pub resizable: ::std::os::raw::c_int,
    pub fullscreen: ::std::os::raw::c_int,
    pub dialog: ::std::os::raw::c_int,
    pub additionalFeatures: cef_string_list_t,
}
#[test]
fn bindgen_test_layout__cef_popup_features_t() {
    assert_eq!(::std::mem::size_of::<_cef_popup_features_t>() , 72usize);
    assert_eq!(::std::mem::align_of::<_cef_popup_features_t>() , 8usize);
}
impl Clone for _cef_popup_features_t {
    fn clone(&self) -> Self { *self }
}
pub const DOM_DOCUMENT_TYPE_UNKNOWN: _bindgen_ty_41 =
    _bindgen_ty_41::DOM_DOCUMENT_TYPE_UNKNOWN;
pub const DOM_DOCUMENT_TYPE_HTML: _bindgen_ty_41 =
    _bindgen_ty_41::DOM_DOCUMENT_TYPE_HTML;
pub const DOM_DOCUMENT_TYPE_XHTML: _bindgen_ty_41 =
    _bindgen_ty_41::DOM_DOCUMENT_TYPE_XHTML;
pub const DOM_DOCUMENT_TYPE_PLUGIN: _bindgen_ty_41 =
    _bindgen_ty_41::DOM_DOCUMENT_TYPE_PLUGIN;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_41 {
    DOM_DOCUMENT_TYPE_UNKNOWN = 0,
    DOM_DOCUMENT_TYPE_HTML = 1,
    DOM_DOCUMENT_TYPE_XHTML = 2,
    DOM_DOCUMENT_TYPE_PLUGIN = 3,
}
pub const DOM_NODE_TYPE_UNSUPPORTED: _bindgen_ty_44 =
    _bindgen_ty_44::DOM_NODE_TYPE_UNSUPPORTED;
pub const DOM_NODE_TYPE_ELEMENT: _bindgen_ty_44 =
    _bindgen_ty_44::DOM_NODE_TYPE_ELEMENT;
pub const DOM_NODE_TYPE_ATTRIBUTE: _bindgen_ty_44 =
    _bindgen_ty_44::DOM_NODE_TYPE_ATTRIBUTE;
pub const DOM_NODE_TYPE_TEXT: _bindgen_ty_44 =
    _bindgen_ty_44::DOM_NODE_TYPE_TEXT;
pub const DOM_NODE_TYPE_CDATA_SECTION: _bindgen_ty_44 =
    _bindgen_ty_44::DOM_NODE_TYPE_CDATA_SECTION;
pub const DOM_NODE_TYPE_PROCESSING_INSTRUCTIONS: _bindgen_ty_44 =
    _bindgen_ty_44::DOM_NODE_TYPE_PROCESSING_INSTRUCTIONS;
pub const DOM_NODE_TYPE_COMMENT: _bindgen_ty_44 =
    _bindgen_ty_44::DOM_NODE_TYPE_COMMENT;
pub const DOM_NODE_TYPE_DOCUMENT: _bindgen_ty_44 =
    _bindgen_ty_44::DOM_NODE_TYPE_DOCUMENT;
pub const DOM_NODE_TYPE_DOCUMENT_TYPE: _bindgen_ty_44 =
    _bindgen_ty_44::DOM_NODE_TYPE_DOCUMENT_TYPE;
pub const DOM_NODE_TYPE_DOCUMENT_FRAGMENT: _bindgen_ty_44 =
    _bindgen_ty_44::DOM_NODE_TYPE_DOCUMENT_FRAGMENT;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_44 {
    DOM_NODE_TYPE_UNSUPPORTED = 0,
    DOM_NODE_TYPE_ELEMENT = 1,
    DOM_NODE_TYPE_ATTRIBUTE = 2,
    DOM_NODE_TYPE_TEXT = 3,
    DOM_NODE_TYPE_CDATA_SECTION = 4,
    DOM_NODE_TYPE_PROCESSING_INSTRUCTIONS = 5,
    DOM_NODE_TYPE_COMMENT = 6,
    DOM_NODE_TYPE_DOCUMENT = 7,
    DOM_NODE_TYPE_DOCUMENT_TYPE = 8,
    DOM_NODE_TYPE_DOCUMENT_FRAGMENT = 9,
}
pub const FILE_DIALOG_OPEN: _bindgen_ty_45 = _bindgen_ty_45::FILE_DIALOG_OPEN;
pub const FILE_DIALOG_OPEN_MULTIPLE: _bindgen_ty_45 =
    _bindgen_ty_45::FILE_DIALOG_OPEN_MULTIPLE;
pub const FILE_DIALOG_OPEN_FOLDER: _bindgen_ty_45 =
    _bindgen_ty_45::FILE_DIALOG_OPEN_FOLDER;
pub const FILE_DIALOG_SAVE: _bindgen_ty_45 = _bindgen_ty_45::FILE_DIALOG_SAVE;
pub const FILE_DIALOG_TYPE_MASK: _bindgen_ty_45 =
    _bindgen_ty_45::FILE_DIALOG_TYPE_MASK;
pub const FILE_DIALOG_OVERWRITEPROMPT_FLAG: _bindgen_ty_45 =
    _bindgen_ty_45::FILE_DIALOG_OVERWRITEPROMPT_FLAG;
pub const FILE_DIALOG_HIDEREADONLY_FLAG: _bindgen_ty_45 =
    _bindgen_ty_45::FILE_DIALOG_HIDEREADONLY_FLAG;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_45 {
    FILE_DIALOG_OPEN = 0,
    FILE_DIALOG_OPEN_MULTIPLE = 1,
    FILE_DIALOG_OPEN_FOLDER = 2,
    FILE_DIALOG_SAVE = 3,
    FILE_DIALOG_TYPE_MASK = 255,
    FILE_DIALOG_OVERWRITEPROMPT_FLAG = 16777216,
    FILE_DIALOG_HIDEREADONLY_FLAG = 33554432,
}
pub use self::_bindgen_ty_45 as cef_file_dialog_mode_t;
pub const COLOR_MODEL_UNKNOWN: _bindgen_ty_47 =
    _bindgen_ty_47::COLOR_MODEL_UNKNOWN;
pub const COLOR_MODEL_GRAY: _bindgen_ty_47 = _bindgen_ty_47::COLOR_MODEL_GRAY;
pub const COLOR_MODEL_COLOR: _bindgen_ty_47 =
    _bindgen_ty_47::COLOR_MODEL_COLOR;
pub const COLOR_MODEL_CMYK: _bindgen_ty_47 = _bindgen_ty_47::COLOR_MODEL_CMYK;
pub const COLOR_MODEL_CMY: _bindgen_ty_47 = _bindgen_ty_47::COLOR_MODEL_CMY;
pub const COLOR_MODEL_KCMY: _bindgen_ty_47 = _bindgen_ty_47::COLOR_MODEL_KCMY;
pub const COLOR_MODEL_CMY_K: _bindgen_ty_47 =
    _bindgen_ty_47::COLOR_MODEL_CMY_K;
pub const COLOR_MODEL_BLACK: _bindgen_ty_47 =
    _bindgen_ty_47::COLOR_MODEL_BLACK;
pub const COLOR_MODEL_GRAYSCALE: _bindgen_ty_47 =
    _bindgen_ty_47::COLOR_MODEL_GRAYSCALE;
pub const COLOR_MODEL_RGB: _bindgen_ty_47 = _bindgen_ty_47::COLOR_MODEL_RGB;
pub const COLOR_MODEL_RGB16: _bindgen_ty_47 =
    _bindgen_ty_47::COLOR_MODEL_RGB16;
pub const COLOR_MODEL_RGBA: _bindgen_ty_47 = _bindgen_ty_47::COLOR_MODEL_RGBA;
pub const COLOR_MODEL_COLORMODE_COLOR: _bindgen_ty_47 =
    _bindgen_ty_47::COLOR_MODEL_COLORMODE_COLOR;
pub const COLOR_MODEL_COLORMODE_MONOCHROME: _bindgen_ty_47 =
    _bindgen_ty_47::COLOR_MODEL_COLORMODE_MONOCHROME;
pub const COLOR_MODEL_HP_COLOR_COLOR: _bindgen_ty_47 =
    _bindgen_ty_47::COLOR_MODEL_HP_COLOR_COLOR;
pub const COLOR_MODEL_HP_COLOR_BLACK: _bindgen_ty_47 =
    _bindgen_ty_47::COLOR_MODEL_HP_COLOR_BLACK;
pub const COLOR_MODEL_PRINTOUTMODE_NORMAL: _bindgen_ty_47 =
    _bindgen_ty_47::COLOR_MODEL_PRINTOUTMODE_NORMAL;
pub const COLOR_MODEL_PRINTOUTMODE_NORMAL_GRAY: _bindgen_ty_47 =
    _bindgen_ty_47::COLOR_MODEL_PRINTOUTMODE_NORMAL_GRAY;
pub const COLOR_MODEL_PROCESSCOLORMODEL_CMYK: _bindgen_ty_47 =
    _bindgen_ty_47::COLOR_MODEL_PROCESSCOLORMODEL_CMYK;
pub const COLOR_MODEL_PROCESSCOLORMODEL_GREYSCALE: _bindgen_ty_47 =
    _bindgen_ty_47::COLOR_MODEL_PROCESSCOLORMODEL_GREYSCALE;
pub const COLOR_MODEL_PROCESSCOLORMODEL_RGB: _bindgen_ty_47 =
    _bindgen_ty_47::COLOR_MODEL_PROCESSCOLORMODEL_RGB;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_47 {
    COLOR_MODEL_UNKNOWN = 0,
    COLOR_MODEL_GRAY = 1,
    COLOR_MODEL_COLOR = 2,
    COLOR_MODEL_CMYK = 3,
    COLOR_MODEL_CMY = 4,
    COLOR_MODEL_KCMY = 5,
    COLOR_MODEL_CMY_K = 6,
    COLOR_MODEL_BLACK = 7,
    COLOR_MODEL_GRAYSCALE = 8,
    COLOR_MODEL_RGB = 9,
    COLOR_MODEL_RGB16 = 10,
    COLOR_MODEL_RGBA = 11,
    COLOR_MODEL_COLORMODE_COLOR = 12,
    COLOR_MODEL_COLORMODE_MONOCHROME = 13,
    COLOR_MODEL_HP_COLOR_COLOR = 14,
    COLOR_MODEL_HP_COLOR_BLACK = 15,
    COLOR_MODEL_PRINTOUTMODE_NORMAL = 16,
    COLOR_MODEL_PRINTOUTMODE_NORMAL_GRAY = 17,
    COLOR_MODEL_PROCESSCOLORMODEL_CMYK = 18,
    COLOR_MODEL_PROCESSCOLORMODEL_GREYSCALE = 19,
    COLOR_MODEL_PROCESSCOLORMODEL_RGB = 20,
}
pub use self::_bindgen_ty_47 as cef_color_model_t;
pub const DUPLEX_MODE_UNKNOWN: _bindgen_ty_48 =
    _bindgen_ty_48::DUPLEX_MODE_UNKNOWN;
pub const DUPLEX_MODE_SIMPLEX: _bindgen_ty_48 =
    _bindgen_ty_48::DUPLEX_MODE_SIMPLEX;
pub const DUPLEX_MODE_LONG_EDGE: _bindgen_ty_48 =
    _bindgen_ty_48::DUPLEX_MODE_LONG_EDGE;
pub const DUPLEX_MODE_SHORT_EDGE: _bindgen_ty_48 =
    _bindgen_ty_48::DUPLEX_MODE_SHORT_EDGE;
#[repr(i32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_48 {
    DUPLEX_MODE_UNKNOWN = -1,
    DUPLEX_MODE_SIMPLEX = 0,
    DUPLEX_MODE_LONG_EDGE = 1,
    DUPLEX_MODE_SHORT_EDGE = 2,
}
pub use self::_bindgen_ty_48 as cef_duplex_mode_t;
pub const CT_POINTER: _bindgen_ty_49 = _bindgen_ty_49::CT_POINTER;
pub const CT_CROSS: _bindgen_ty_49 = _bindgen_ty_49::CT_CROSS;
pub const CT_HAND: _bindgen_ty_49 = _bindgen_ty_49::CT_HAND;
pub const CT_IBEAM: _bindgen_ty_49 = _bindgen_ty_49::CT_IBEAM;
pub const CT_WAIT: _bindgen_ty_49 = _bindgen_ty_49::CT_WAIT;
pub const CT_HELP: _bindgen_ty_49 = _bindgen_ty_49::CT_HELP;
pub const CT_EASTRESIZE: _bindgen_ty_49 = _bindgen_ty_49::CT_EASTRESIZE;
pub const CT_NORTHRESIZE: _bindgen_ty_49 = _bindgen_ty_49::CT_NORTHRESIZE;
pub const CT_NORTHEASTRESIZE: _bindgen_ty_49 =
    _bindgen_ty_49::CT_NORTHEASTRESIZE;
pub const CT_NORTHWESTRESIZE: _bindgen_ty_49 =
    _bindgen_ty_49::CT_NORTHWESTRESIZE;
pub const CT_SOUTHRESIZE: _bindgen_ty_49 = _bindgen_ty_49::CT_SOUTHRESIZE;
pub const CT_SOUTHEASTRESIZE: _bindgen_ty_49 =
    _bindgen_ty_49::CT_SOUTHEASTRESIZE;
pub const CT_SOUTHWESTRESIZE: _bindgen_ty_49 =
    _bindgen_ty_49::CT_SOUTHWESTRESIZE;
pub const CT_WESTRESIZE: _bindgen_ty_49 = _bindgen_ty_49::CT_WESTRESIZE;
pub const CT_NORTHSOUTHRESIZE: _bindgen_ty_49 =
    _bindgen_ty_49::CT_NORTHSOUTHRESIZE;
pub const CT_EASTWESTRESIZE: _bindgen_ty_49 =
    _bindgen_ty_49::CT_EASTWESTRESIZE;
pub const CT_NORTHEASTSOUTHWESTRESIZE: _bindgen_ty_49 =
    _bindgen_ty_49::CT_NORTHEASTSOUTHWESTRESIZE;
pub const CT_NORTHWESTSOUTHEASTRESIZE: _bindgen_ty_49 =
    _bindgen_ty_49::CT_NORTHWESTSOUTHEASTRESIZE;
pub const CT_COLUMNRESIZE: _bindgen_ty_49 = _bindgen_ty_49::CT_COLUMNRESIZE;
pub const CT_ROWRESIZE: _bindgen_ty_49 = _bindgen_ty_49::CT_ROWRESIZE;
pub const CT_MIDDLEPANNING: _bindgen_ty_49 = _bindgen_ty_49::CT_MIDDLEPANNING;
pub const CT_EASTPANNING: _bindgen_ty_49 = _bindgen_ty_49::CT_EASTPANNING;
pub const CT_NORTHPANNING: _bindgen_ty_49 = _bindgen_ty_49::CT_NORTHPANNING;
pub const CT_NORTHEASTPANNING: _bindgen_ty_49 =
    _bindgen_ty_49::CT_NORTHEASTPANNING;
pub const CT_NORTHWESTPANNING: _bindgen_ty_49 =
    _bindgen_ty_49::CT_NORTHWESTPANNING;
pub const CT_SOUTHPANNING: _bindgen_ty_49 = _bindgen_ty_49::CT_SOUTHPANNING;
pub const CT_SOUTHEASTPANNING: _bindgen_ty_49 =
    _bindgen_ty_49::CT_SOUTHEASTPANNING;
pub const CT_SOUTHWESTPANNING: _bindgen_ty_49 =
    _bindgen_ty_49::CT_SOUTHWESTPANNING;
pub const CT_WESTPANNING: _bindgen_ty_49 = _bindgen_ty_49::CT_WESTPANNING;
pub const CT_MOVE: _bindgen_ty_49 = _bindgen_ty_49::CT_MOVE;
pub const CT_VERTICALTEXT: _bindgen_ty_49 = _bindgen_ty_49::CT_VERTICALTEXT;
pub const CT_CELL: _bindgen_ty_49 = _bindgen_ty_49::CT_CELL;
pub const CT_CONTEXTMENU: _bindgen_ty_49 = _bindgen_ty_49::CT_CONTEXTMENU;
pub const CT_ALIAS: _bindgen_ty_49 = _bindgen_ty_49::CT_ALIAS;
pub const CT_PROGRESS: _bindgen_ty_49 = _bindgen_ty_49::CT_PROGRESS;
pub const CT_NODROP: _bindgen_ty_49 = _bindgen_ty_49::CT_NODROP;
pub const CT_COPY: _bindgen_ty_49 = _bindgen_ty_49::CT_COPY;
pub const CT_NONE: _bindgen_ty_49 = _bindgen_ty_49::CT_NONE;
pub const CT_NOTALLOWED: _bindgen_ty_49 = _bindgen_ty_49::CT_NOTALLOWED;
pub const CT_ZOOMIN: _bindgen_ty_49 = _bindgen_ty_49::CT_ZOOMIN;
pub const CT_ZOOMOUT: _bindgen_ty_49 = _bindgen_ty_49::CT_ZOOMOUT;
pub const CT_GRAB: _bindgen_ty_49 = _bindgen_ty_49::CT_GRAB;
pub const CT_GRABBING: _bindgen_ty_49 = _bindgen_ty_49::CT_GRABBING;
pub const CT_CUSTOM: _bindgen_ty_49 = _bindgen_ty_49::CT_CUSTOM;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_49 {
    CT_POINTER = 0,
    CT_CROSS = 1,
    CT_HAND = 2,
    CT_IBEAM = 3,
    CT_WAIT = 4,
    CT_HELP = 5,
    CT_EASTRESIZE = 6,
    CT_NORTHRESIZE = 7,
    CT_NORTHEASTRESIZE = 8,
    CT_NORTHWESTRESIZE = 9,
    CT_SOUTHRESIZE = 10,
    CT_SOUTHEASTRESIZE = 11,
    CT_SOUTHWESTRESIZE = 12,
    CT_WESTRESIZE = 13,
    CT_NORTHSOUTHRESIZE = 14,
    CT_EASTWESTRESIZE = 15,
    CT_NORTHEASTSOUTHWESTRESIZE = 16,
    CT_NORTHWESTSOUTHEASTRESIZE = 17,
    CT_COLUMNRESIZE = 18,
    CT_ROWRESIZE = 19,
    CT_MIDDLEPANNING = 20,
    CT_EASTPANNING = 21,
    CT_NORTHPANNING = 22,
    CT_NORTHEASTPANNING = 23,
    CT_NORTHWESTPANNING = 24,
    CT_SOUTHPANNING = 25,
    CT_SOUTHEASTPANNING = 26,
    CT_SOUTHWESTPANNING = 27,
    CT_WESTPANNING = 28,
    CT_MOVE = 29,
    CT_VERTICALTEXT = 30,
    CT_CELL = 31,
    CT_CONTEXTMENU = 32,
    CT_ALIAS = 33,
    CT_PROGRESS = 34,
    CT_NODROP = 35,
    CT_COPY = 36,
    CT_NONE = 37,
    CT_NOTALLOWED = 38,
    CT_ZOOMIN = 39,
    CT_ZOOMOUT = 40,
    CT_GRAB = 41,
    CT_GRABBING = 42,
    CT_CUSTOM = 43,
}
pub use self::_bindgen_ty_49 as cef_cursor_type_t;
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_cursor_info_t {
    pub hotspot: cef_point_t,
    pub image_scale_factor: f32,
    pub buffer: *mut ::std::os::raw::c_void,
    pub size: cef_size_t,
}
#[test]
fn bindgen_test_layout__cef_cursor_info_t() {
    assert_eq!(::std::mem::size_of::<_cef_cursor_info_t>() , 32usize);
    assert_eq!(::std::mem::align_of::<_cef_cursor_info_t>() , 8usize);
}
impl Clone for _cef_cursor_info_t {
    fn clone(&self) -> Self { *self }
}
pub const PDF_PRINT_MARGIN_DEFAULT: _bindgen_ty_54 =
    _bindgen_ty_54::PDF_PRINT_MARGIN_DEFAULT;
pub const PDF_PRINT_MARGIN_NONE: _bindgen_ty_54 =
    _bindgen_ty_54::PDF_PRINT_MARGIN_NONE;
pub const PDF_PRINT_MARGIN_MINIMUM: _bindgen_ty_54 =
    _bindgen_ty_54::PDF_PRINT_MARGIN_MINIMUM;
pub const PDF_PRINT_MARGIN_CUSTOM: _bindgen_ty_54 =
    _bindgen_ty_54::PDF_PRINT_MARGIN_CUSTOM;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_54 {
    PDF_PRINT_MARGIN_DEFAULT = 0,
    PDF_PRINT_MARGIN_NONE = 1,
    PDF_PRINT_MARGIN_MINIMUM = 2,
    PDF_PRINT_MARGIN_CUSTOM = 3,
}
pub use self::_bindgen_ty_54 as cef_pdf_print_margin_type_t;
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_pdf_print_settings_t {
    ///
    pub header_footer_title: cef_string_t,
    ///
    pub header_footer_url: cef_string_t,
    ///
    pub page_width: ::std::os::raw::c_int,
    pub page_height: ::std::os::raw::c_int,
    ///
    pub margin_top: f64,
    pub margin_right: f64,
    pub margin_bottom: f64,
    pub margin_left: f64,
    ///
    pub margin_type: cef_pdf_print_margin_type_t,
    ///
    pub header_footer_enabled: ::std::os::raw::c_int,
    ///
    pub selection_only: ::std::os::raw::c_int,
    ///
    pub landscape: ::std::os::raw::c_int,
    ///
    pub backgrounds_enabled: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_pdf_print_settings_t() {
    assert_eq!(::std::mem::size_of::<_cef_pdf_print_settings_t>() , 112usize);
    assert_eq!(::std::mem::align_of::<_cef_pdf_print_settings_t>() , 8usize);
}
impl Clone for _cef_pdf_print_settings_t {
    fn clone(&self) -> Self { *self }
}
pub const SCALE_FACTOR_NONE: _bindgen_ty_55 =
    _bindgen_ty_55::SCALE_FACTOR_NONE;
pub const SCALE_FACTOR_100P: _bindgen_ty_55 =
    _bindgen_ty_55::SCALE_FACTOR_100P;
pub const SCALE_FACTOR_125P: _bindgen_ty_55 =
    _bindgen_ty_55::SCALE_FACTOR_125P;
pub const SCALE_FACTOR_133P: _bindgen_ty_55 =
    _bindgen_ty_55::SCALE_FACTOR_133P;
pub const SCALE_FACTOR_140P: _bindgen_ty_55 =
    _bindgen_ty_55::SCALE_FACTOR_140P;
pub const SCALE_FACTOR_150P: _bindgen_ty_55 =
    _bindgen_ty_55::SCALE_FACTOR_150P;
pub const SCALE_FACTOR_180P: _bindgen_ty_55 =
    _bindgen_ty_55::SCALE_FACTOR_180P;
pub const SCALE_FACTOR_200P: _bindgen_ty_55 =
    _bindgen_ty_55::SCALE_FACTOR_200P;
pub const SCALE_FACTOR_250P: _bindgen_ty_55 =
    _bindgen_ty_55::SCALE_FACTOR_250P;
pub const SCALE_FACTOR_300P: _bindgen_ty_55 =
    _bindgen_ty_55::SCALE_FACTOR_300P;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_55 {
    SCALE_FACTOR_NONE = 0,
    SCALE_FACTOR_100P = 1,
    SCALE_FACTOR_125P = 2,
    SCALE_FACTOR_133P = 3,
    SCALE_FACTOR_140P = 4,
    SCALE_FACTOR_150P = 5,
    SCALE_FACTOR_180P = 6,
    SCALE_FACTOR_200P = 7,
    SCALE_FACTOR_250P = 8,
    SCALE_FACTOR_300P = 9,
}
pub use self::_bindgen_ty_55 as cef_scale_factor_t;
pub const PLUGIN_POLICY_ALLOW: _bindgen_ty_56 =
    _bindgen_ty_56::PLUGIN_POLICY_ALLOW;
pub const PLUGIN_POLICY_DETECT_IMPORTANT: _bindgen_ty_56 =
    _bindgen_ty_56::PLUGIN_POLICY_DETECT_IMPORTANT;
pub const PLUGIN_POLICY_BLOCK: _bindgen_ty_56 =
    _bindgen_ty_56::PLUGIN_POLICY_BLOCK;
pub const PLUGIN_POLICY_DISABLE: _bindgen_ty_56 =
    _bindgen_ty_56::PLUGIN_POLICY_DISABLE;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_56 {
    PLUGIN_POLICY_ALLOW = 0,
    PLUGIN_POLICY_DETECT_IMPORTANT = 1,
    PLUGIN_POLICY_BLOCK = 2,
    PLUGIN_POLICY_DISABLE = 3,
}
pub use self::_bindgen_ty_56 as cef_plugin_policy_t;
pub const REFERRER_POLICY_ALWAYS: _bindgen_ty_57 =
    _bindgen_ty_57::REFERRER_POLICY_ALWAYS;
pub const REFERRER_POLICY_DEFAULT: _bindgen_ty_57 =
    _bindgen_ty_57::REFERRER_POLICY_DEFAULT;
pub const REFERRER_POLICY_NO_REFERRER_WHEN_DOWNGRADE: _bindgen_ty_57 =
    _bindgen_ty_57::REFERRER_POLICY_NO_REFERRER_WHEN_DOWNGRADE;
pub const REFERRER_POLICY_NEVER: _bindgen_ty_57 =
    _bindgen_ty_57::REFERRER_POLICY_NEVER;
pub const REFERRER_POLICY_ORIGIN: _bindgen_ty_57 =
    _bindgen_ty_57::REFERRER_POLICY_ORIGIN;
pub const REFERRER_POLICY_ORIGIN_WHEN_CROSS_ORIGIN: _bindgen_ty_57 =
    _bindgen_ty_57::REFERRER_POLICY_ORIGIN_WHEN_CROSS_ORIGIN;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_57 {
    REFERRER_POLICY_ALWAYS = 0,
    REFERRER_POLICY_DEFAULT = 1,
    REFERRER_POLICY_NO_REFERRER_WHEN_DOWNGRADE = 2,
    REFERRER_POLICY_NEVER = 3,
    REFERRER_POLICY_ORIGIN = 4,
    REFERRER_POLICY_ORIGIN_WHEN_CROSS_ORIGIN = 5,
}
pub use self::_bindgen_ty_57 as cef_referrer_policy_t;
pub const RESPONSE_FILTER_NEED_MORE_DATA: _bindgen_ty_58 =
    _bindgen_ty_58::RESPONSE_FILTER_NEED_MORE_DATA;
pub const RESPONSE_FILTER_DONE: _bindgen_ty_58 =
    _bindgen_ty_58::RESPONSE_FILTER_DONE;
pub const RESPONSE_FILTER_ERROR: _bindgen_ty_58 =
    _bindgen_ty_58::RESPONSE_FILTER_ERROR;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_58 {
    RESPONSE_FILTER_NEED_MORE_DATA = 0,
    RESPONSE_FILTER_DONE = 1,
    RESPONSE_FILTER_ERROR = 2,
}
pub const CEF_COLOR_TYPE_RGBA_8888: _bindgen_ty_59 =
    _bindgen_ty_59::CEF_COLOR_TYPE_RGBA_8888;
pub const CEF_COLOR_TYPE_BGRA_8888: _bindgen_ty_59 =
    _bindgen_ty_59::CEF_COLOR_TYPE_BGRA_8888;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_59 {
    CEF_COLOR_TYPE_RGBA_8888 = 0,
    CEF_COLOR_TYPE_BGRA_8888 = 1,
}
pub use self::_bindgen_ty_59 as cef_color_type_t;
pub const CEF_ALPHA_TYPE_OPAQUE: _bindgen_ty_60 =
    _bindgen_ty_60::CEF_ALPHA_TYPE_OPAQUE;
pub const CEF_ALPHA_TYPE_PREMULTIPLIED: _bindgen_ty_60 =
    _bindgen_ty_60::CEF_ALPHA_TYPE_PREMULTIPLIED;
pub const CEF_ALPHA_TYPE_POSTMULTIPLIED: _bindgen_ty_60 =
    _bindgen_ty_60::CEF_ALPHA_TYPE_POSTMULTIPLIED;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_60 {
    CEF_ALPHA_TYPE_OPAQUE = 0,
    CEF_ALPHA_TYPE_PREMULTIPLIED = 1,
    CEF_ALPHA_TYPE_POSTMULTIPLIED = 2,
}
pub use self::_bindgen_ty_60 as cef_alpha_type_t;
pub const SSL_CONNECTION_VERSION_UNKNOWN: _bindgen_ty_67 =
    _bindgen_ty_67::SSL_CONNECTION_VERSION_UNKNOWN;
pub const SSL_CONNECTION_VERSION_SSL2: _bindgen_ty_67 =
    _bindgen_ty_67::SSL_CONNECTION_VERSION_SSL2;
pub const SSL_CONNECTION_VERSION_SSL3: _bindgen_ty_67 =
    _bindgen_ty_67::SSL_CONNECTION_VERSION_SSL3;
pub const SSL_CONNECTION_VERSION_TLS1: _bindgen_ty_67 =
    _bindgen_ty_67::SSL_CONNECTION_VERSION_TLS1;
pub const SSL_CONNECTION_VERSION_TLS1_1: _bindgen_ty_67 =
    _bindgen_ty_67::SSL_CONNECTION_VERSION_TLS1_1;
pub const SSL_CONNECTION_VERSION_TLS1_2: _bindgen_ty_67 =
    _bindgen_ty_67::SSL_CONNECTION_VERSION_TLS1_2;
pub const SSL_CONNECTION_VERSION_QUIC: _bindgen_ty_67 =
    _bindgen_ty_67::SSL_CONNECTION_VERSION_QUIC;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_67 {
    SSL_CONNECTION_VERSION_UNKNOWN = 0,
    SSL_CONNECTION_VERSION_SSL2 = 1,
    SSL_CONNECTION_VERSION_SSL3 = 2,
    SSL_CONNECTION_VERSION_TLS1 = 3,
    SSL_CONNECTION_VERSION_TLS1_1 = 4,
    SSL_CONNECTION_VERSION_TLS1_2 = 5,
    SSL_CONNECTION_VERSION_QUIC = 7,
}
pub const SSL_CONTENT_NORMAL_CONTENT: _bindgen_ty_68 =
    _bindgen_ty_68::SSL_CONTENT_NORMAL_CONTENT;
pub const SSL_CONTENT_DISPLAYED_INSECURE_CONTENT: _bindgen_ty_68 =
    _bindgen_ty_68::SSL_CONTENT_DISPLAYED_INSECURE_CONTENT;
pub const SSL_CONTENT_RAN_INSECURE_CONTENT: _bindgen_ty_68 =
    _bindgen_ty_68::SSL_CONTENT_RAN_INSECURE_CONTENT;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_68 {
    SSL_CONTENT_NORMAL_CONTENT = 0,
    SSL_CONTENT_DISPLAYED_INSECURE_CONTENT = 1,
    SSL_CONTENT_RAN_INSECURE_CONTENT = 2,
}
pub const CEF_CDM_REGISTRATION_ERROR_NONE: _bindgen_ty_69 =
    _bindgen_ty_69::CEF_CDM_REGISTRATION_ERROR_NONE;
pub const CEF_CDM_REGISTRATION_ERROR_INCORRECT_CONTENTS: _bindgen_ty_69 =
    _bindgen_ty_69::CEF_CDM_REGISTRATION_ERROR_INCORRECT_CONTENTS;
pub const CEF_CDM_REGISTRATION_ERROR_INCOMPATIBLE: _bindgen_ty_69 =
    _bindgen_ty_69::CEF_CDM_REGISTRATION_ERROR_INCOMPATIBLE;
pub const CEF_CDM_REGISTRATION_ERROR_NOT_SUPPORTED: _bindgen_ty_69 =
    _bindgen_ty_69::CEF_CDM_REGISTRATION_ERROR_NOT_SUPPORTED;
#[repr(u32)]
///
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_69 {
    CEF_CDM_REGISTRATION_ERROR_NONE = 0,
    CEF_CDM_REGISTRATION_ERROR_INCORRECT_CONTENTS = 1,
    CEF_CDM_REGISTRATION_ERROR_INCOMPATIBLE = 2,
    CEF_CDM_REGISTRATION_ERROR_NOT_SUPPORTED = 3,
}
pub use self::_bindgen_ty_69 as cef_cdm_registration_error_t;
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_composition_underline_t {
    ///
    pub range: cef_range_t,
    ///
    pub color: cef_color_t,
    ///
    pub background_color: cef_color_t,
    ///
    pub thick: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__cef_composition_underline_t() {
    assert_eq!(::std::mem::size_of::<_cef_composition_underline_t>() ,
               20usize);
    assert_eq!(::std::mem::align_of::<_cef_composition_underline_t>() ,
               4usize);
}
impl Clone for _cef_composition_underline_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_composition_underline_t = _cef_composition_underline_t;
///
pub type cef_string_map_t = *mut ::std::os::raw::c_void;
extern "C" {
    ///
    pub fn cef_string_map_alloc() -> cef_string_map_t;
}
extern "C" {
    ///
    pub fn cef_string_map_size(map: cef_string_map_t) -> usize;
}
extern "C" {
    ///
    pub fn cef_string_map_find(map: cef_string_map_t,
                               key: *const cef_string_t,
                               value: *mut cef_string_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    ///
    pub fn cef_string_map_key(map: cef_string_map_t, index: usize,
                              key: *mut cef_string_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    ///
    pub fn cef_string_map_value(map: cef_string_map_t, index: usize,
                                value: *mut cef_string_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    ///
    pub fn cef_string_map_append(map: cef_string_map_t,
                                 key: *const cef_string_t,
                                 value: *const cef_string_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    ///
    pub fn cef_string_map_clear(map: cef_string_map_t);
}
extern "C" {
    ///
    pub fn cef_string_map_free(map: cef_string_map_t);
}
///
pub type cef_string_multimap_t = *mut ::std::os::raw::c_void;
extern "C" {
    ///
    pub fn cef_string_multimap_alloc() -> cef_string_multimap_t;
}
extern "C" {
    ///
    pub fn cef_string_multimap_size(map: cef_string_multimap_t) -> usize;
}
extern "C" {
    ///
    pub fn cef_string_multimap_find_count(map: cef_string_multimap_t,
                                          key: *const cef_string_t) -> usize;
}
extern "C" {
    ///
    pub fn cef_string_multimap_enumerate(map: cef_string_multimap_t,
                                         key: *const cef_string_t,
                                         value_index: usize,
                                         value: *mut cef_string_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    ///
    pub fn cef_string_multimap_key(map: cef_string_multimap_t, index: usize,
                                   key: *mut cef_string_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    ///
    pub fn cef_string_multimap_value(map: cef_string_multimap_t, index: usize,
                                     value: *mut cef_string_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    ///
    pub fn cef_string_multimap_append(map: cef_string_multimap_t,
                                      key: *const cef_string_t,
                                      value: *const cef_string_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    ///
    pub fn cef_string_multimap_clear(map: cef_string_multimap_t);
}
extern "C" {
    ///
    pub fn cef_string_multimap_free(map: cef_string_multimap_t);
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_base_t {
    ///
    pub size: usize,
    ///
    pub add_ref: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_base_t)>,
    ///
    pub release: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_base_t)
                                           -> ::std::os::raw::c_int>,
    ///
    pub has_one_ref: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_base_t)
                                               -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_base_t() {
    assert_eq!(::std::mem::size_of::<_cef_base_t>() , 32usize);
    assert_eq!(::std::mem::align_of::<_cef_base_t>() , 8usize);
}
impl Clone for _cef_base_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_base_t = _cef_base_t;
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_binary_value_t {
    ///
    pub base: cef_base_t,
    ///
    pub is_valid: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_binary_value_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub is_owned: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_binary_value_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub is_same: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_binary_value_t,
                                                            that:
                                                                *mut _cef_binary_value_t)
                                           -> ::std::os::raw::c_int>,
    ///
    pub is_equal: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_binary_value_t,
                                                             that:
                                                                 *mut _cef_binary_value_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub copy: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_binary_value_t)
                                        -> *mut _cef_binary_value_t>,
    ///
    pub get_size: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_binary_value_t)
                                            -> ::std::os::raw::c_ulong>,
    ///
    pub get_data: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_binary_value_t,
                                                             buffer:
                                                                 *mut ::std::os::raw::c_void,
                                                             buffer_size:
                                                                 usize,
                                                             data_offset:
                                                                 usize)
                                            -> ::std::os::raw::c_ulong>,
}
#[test]
fn bindgen_test_layout__cef_binary_value_t() {
    assert_eq!(::std::mem::size_of::<_cef_binary_value_t>() , 88usize);
    assert_eq!(::std::mem::align_of::<_cef_binary_value_t>() , 8usize);
}
impl Clone for _cef_binary_value_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_dictionary_value_t {
    ///
    pub base: cef_base_t,
    ///
    pub is_valid: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_dictionary_value_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub is_owned: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_dictionary_value_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub is_read_only: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_dictionary_value_t)
                                                -> ::std::os::raw::c_int>,
    ///
    pub is_same: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_dictionary_value_t,
                                                            that:
                                                                *mut _cef_dictionary_value_t)
                                           -> ::std::os::raw::c_int>,
    ///
    pub is_equal: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_dictionary_value_t,
                                                             that:
                                                                 *mut _cef_dictionary_value_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub copy: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_dictionary_value_t,
                                                         exclude_empty_children:
                                                             ::std::os::raw::c_int)
                                        -> *mut _cef_dictionary_value_t>,
    ///
    pub get_size: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_dictionary_value_t)
                                            -> ::std::os::raw::c_ulong>,
    ///
    pub clear: ::std::option::Option<unsafe extern "C" fn(self_:
                                                              *mut _cef_dictionary_value_t)
                                         -> ::std::os::raw::c_int>,
    ///
    pub has_key: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_dictionary_value_t,
                                                            key:
                                                                *const cef_string_t)
                                           -> ::std::os::raw::c_int>,
    ///
    pub get_keys: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_dictionary_value_t,
                                                             keys:
                                                                 cef_string_list_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub remove: ::std::option::Option<unsafe extern "C" fn(self_:
                                                               *mut _cef_dictionary_value_t,
                                                           key:
                                                               *const cef_string_t)
                                          -> ::std::os::raw::c_int>,
    ///
    pub get_type: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_dictionary_value_t,
                                                             key:
                                                                 *const cef_string_t)
                                            -> _bindgen_ty_25>,
    ///
    pub get_value: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_dictionary_value_t,
                                                              key:
                                                                  *const cef_string_t)
                                             -> *mut _cef_value_t>,
    ///
    pub get_bool: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_dictionary_value_t,
                                                             key:
                                                                 *const cef_string_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub get_int: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_dictionary_value_t,
                                                            key:
                                                                *const cef_string_t)
                                           -> ::std::os::raw::c_int>,
    ///
    pub get_double: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_dictionary_value_t,
                                                               key:
                                                                   *const cef_string_t)
                                              -> f64>,
    ///
    pub get_string: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_dictionary_value_t,
                                                               key:
                                                                   *const cef_string_t)
                                              -> *mut _cef_string_utf16_t>,
    ///
    pub get_binary: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_dictionary_value_t,
                                                               key:
                                                                   *const cef_string_t)
                                              -> *mut _cef_binary_value_t>,
    ///
    pub get_dictionary: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_dictionary_value_t,
                                                                   key:
                                                                       *const cef_string_t)
                                                  ->
                                                      *mut _cef_dictionary_value_t>,
    ///
    pub get_list: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_dictionary_value_t,
                                                             key:
                                                                 *const cef_string_t)
                                            -> *mut _cef_list_value_t>,
    ///
    pub set_value: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_dictionary_value_t,
                                                              key:
                                                                  *const cef_string_t,
                                                              value:
                                                                  *mut _cef_value_t)
                                             -> ::std::os::raw::c_int>,
    ///
    pub set_null: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_dictionary_value_t,
                                                             key:
                                                                 *const cef_string_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub set_bool: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_dictionary_value_t,
                                                             key:
                                                                 *const cef_string_t,
                                                             value:
                                                                 ::std::os::raw::c_int)
                                            -> ::std::os::raw::c_int>,
    ///
    pub set_int: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_dictionary_value_t,
                                                            key:
                                                                *const cef_string_t,
                                                            value:
                                                                ::std::os::raw::c_int)
                                           -> ::std::os::raw::c_int>,
    ///
    pub set_double: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_dictionary_value_t,
                                                               key:
                                                                   *const cef_string_t,
                                                               value: f64)
                                              -> ::std::os::raw::c_int>,
    ///
    pub set_string: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_dictionary_value_t,
                                                               key:
                                                                   *const cef_string_t,
                                                               value:
                                                                   *const cef_string_t)
                                              -> ::std::os::raw::c_int>,
    ///
    pub set_binary: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_dictionary_value_t,
                                                               key:
                                                                   *const cef_string_t,
                                                               value:
                                                                   *mut _cef_binary_value_t)
                                              -> ::std::os::raw::c_int>,
    ///
    pub set_dictionary: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_dictionary_value_t,
                                                                   key:
                                                                       *const cef_string_t,
                                                                   value:
                                                                       *mut _cef_dictionary_value_t)
                                                  -> ::std::os::raw::c_int>,
    ///
    pub set_list: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_dictionary_value_t,
                                                             key:
                                                                 *const cef_string_t,
                                                             value:
                                                                 *mut _cef_list_value_t)
                                            -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_dictionary_value_t() {
    assert_eq!(::std::mem::size_of::<_cef_dictionary_value_t>() , 264usize);
    assert_eq!(::std::mem::align_of::<_cef_dictionary_value_t>() , 8usize);
}
impl Clone for _cef_dictionary_value_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_list_value_t {
    ///
    pub base: cef_base_t,
    ///
    pub is_valid: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_list_value_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub is_owned: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_list_value_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub is_read_only: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_list_value_t)
                                                -> ::std::os::raw::c_int>,
    ///
    pub is_same: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_list_value_t,
                                                            that:
                                                                *mut _cef_list_value_t)
                                           -> ::std::os::raw::c_int>,
    ///
    pub is_equal: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_list_value_t,
                                                             that:
                                                                 *mut _cef_list_value_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub copy: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_list_value_t)
                                        -> *mut _cef_list_value_t>,
    ///
    pub set_size: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_list_value_t,
                                                             size: usize)
                                            -> ::std::os::raw::c_int>,
    ///
    pub get_size: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_list_value_t)
                                            -> ::std::os::raw::c_ulong>,
    ///
    pub clear: ::std::option::Option<unsafe extern "C" fn(self_:
                                                              *mut _cef_list_value_t)
                                         -> ::std::os::raw::c_int>,
    ///
    pub remove: ::std::option::Option<unsafe extern "C" fn(self_:
                                                               *mut _cef_list_value_t,
                                                           index: usize)
                                          -> ::std::os::raw::c_int>,
    ///
    pub get_type: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_list_value_t,
                                                             index: usize)
                                            -> _bindgen_ty_25>,
    ///
    pub get_value: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_list_value_t,
                                                              index: usize)
                                             -> *mut _cef_value_t>,
    ///
    pub get_bool: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_list_value_t,
                                                             index: usize)
                                            -> ::std::os::raw::c_int>,
    ///
    pub get_int: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_list_value_t,
                                                            index: usize)
                                           -> ::std::os::raw::c_int>,
    ///
    pub get_double: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_list_value_t,
                                                               index: usize)
                                              -> f64>,
    ///
    pub get_string: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_list_value_t,
                                                               index: usize)
                                              -> *mut _cef_string_utf16_t>,
    ///
    pub get_binary: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_list_value_t,
                                                               index: usize)
                                              -> *mut _cef_binary_value_t>,
    ///
    pub get_dictionary: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_list_value_t,
                                                                   index:
                                                                       usize)
                                                  ->
                                                      *mut _cef_dictionary_value_t>,
    ///
    pub get_list: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_list_value_t,
                                                             index: usize)
                                            -> *mut _cef_list_value_t>,
    ///
    pub set_value: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_list_value_t,
                                                              index: usize,
                                                              value:
                                                                  *mut _cef_value_t)
                                             -> ::std::os::raw::c_int>,
    ///
    pub set_null: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_list_value_t,
                                                             index: usize)
                                            -> ::std::os::raw::c_int>,
    ///
    pub set_bool: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_list_value_t,
                                                             index: usize,
                                                             value:
                                                                 ::std::os::raw::c_int)
                                            -> ::std::os::raw::c_int>,
    ///
    pub set_int: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_list_value_t,
                                                            index: usize,
                                                            value:
                                                                ::std::os::raw::c_int)
                                           -> ::std::os::raw::c_int>,
    ///
    pub set_double: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_list_value_t,
                                                               index: usize,
                                                               value: f64)
                                              -> ::std::os::raw::c_int>,
    ///
    pub set_string: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_list_value_t,
                                                               index: usize,
                                                               value:
                                                                   *const cef_string_t)
                                              -> ::std::os::raw::c_int>,
    ///
    pub set_binary: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_list_value_t,
                                                               index: usize,
                                                               value:
                                                                   *mut _cef_binary_value_t)
                                              -> ::std::os::raw::c_int>,
    ///
    pub set_dictionary: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_list_value_t,
                                                                   index:
                                                                       usize,
                                                                   value:
                                                                       *mut _cef_dictionary_value_t)
                                                  -> ::std::os::raw::c_int>,
    ///
    pub set_list: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_list_value_t,
                                                             index: usize,
                                                             value:
                                                                 *mut _cef_list_value_t)
                                            -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_list_value_t() {
    assert_eq!(::std::mem::size_of::<_cef_list_value_t>() , 256usize);
    assert_eq!(::std::mem::align_of::<_cef_list_value_t>() , 8usize);
}
impl Clone for _cef_list_value_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_value_t {
    ///
    pub base: cef_base_t,
    ///
    pub is_valid: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_value_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub is_owned: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_value_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub is_read_only: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_value_t)
                                                -> ::std::os::raw::c_int>,
    ///
    pub is_same: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_value_t,
                                                            that:
                                                                *mut _cef_value_t)
                                           -> ::std::os::raw::c_int>,
    ///
    pub is_equal: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_value_t,
                                                             that:
                                                                 *mut _cef_value_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub copy: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_value_t)
                                        -> *mut _cef_value_t>,
    ///
    pub get_type: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_value_t)
                                            -> _bindgen_ty_25>,
    ///
    pub get_bool: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_value_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub get_int: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_value_t)
                                           -> ::std::os::raw::c_int>,
    ///
    pub get_double: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_value_t)
                                              -> f64>,
    ///
    pub get_string: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_value_t)
                                              -> *mut _cef_string_utf16_t>,
    ///
    pub get_binary: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_value_t)
                                              -> *mut _cef_binary_value_t>,
    ///
    pub get_dictionary: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_value_t)
                                                  ->
                                                      *mut _cef_dictionary_value_t>,
    ///
    pub get_list: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_value_t)
                                            -> *mut _cef_list_value_t>,
    ///
    pub set_null: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_value_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub set_bool: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_value_t,
                                                             value:
                                                                 ::std::os::raw::c_int)
                                            -> ::std::os::raw::c_int>,
    ///
    pub set_int: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_value_t,
                                                            value:
                                                                ::std::os::raw::c_int)
                                           -> ::std::os::raw::c_int>,
    ///
    pub set_double: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_value_t,
                                                               value: f64)
                                              -> ::std::os::raw::c_int>,
    ///
    pub set_string: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_value_t,
                                                               value:
                                                                   *const cef_string_t)
                                              -> ::std::os::raw::c_int>,
    ///
    pub set_binary: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_value_t,
                                                               value:
                                                                   *mut _cef_binary_value_t)
                                              -> ::std::os::raw::c_int>,
    ///
    pub set_dictionary: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_value_t,
                                                                   value:
                                                                       *mut _cef_dictionary_value_t)
                                                  -> ::std::os::raw::c_int>,
    ///
    pub set_list: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_value_t,
                                                             value:
                                                                 *mut _cef_list_value_t)
                                            -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_value_t() {
    assert_eq!(::std::mem::size_of::<_cef_value_t>() , 208usize);
    assert_eq!(::std::mem::align_of::<_cef_value_t>() , 8usize);
}
impl Clone for _cef_value_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_value_t = _cef_value_t;
extern "C" {
    ///
    pub fn cef_value_create() -> *mut cef_value_t;
}
pub type cef_binary_value_t = _cef_binary_value_t;
extern "C" {
    ///
    pub fn cef_binary_value_create(data: *const ::std::os::raw::c_void,
                                   data_size: usize)
     -> *mut cef_binary_value_t;
}
pub type cef_dictionary_value_t = _cef_dictionary_value_t;
extern "C" {
    ///
    pub fn cef_dictionary_value_create() -> *mut cef_dictionary_value_t;
}
pub type cef_list_value_t = _cef_list_value_t;
extern "C" {
    ///
    pub fn cef_list_value_create() -> *mut cef_list_value_t;
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_read_handler_t {
    ///
    pub base: cef_base_t,
    ///
    pub read: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_read_handler_t,
                                                         ptr:
                                                             *mut ::std::os::raw::c_void,
                                                         size: usize,
                                                         n: usize)
                                        -> ::std::os::raw::c_ulong>,
    ///
    pub seek: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_read_handler_t,
                                                         offset: int64,
                                                         whence:
                                                             ::std::os::raw::c_int)
                                        -> ::std::os::raw::c_int>,
    ///
    pub tell: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_read_handler_t)
                                        -> ::std::os::raw::c_long>,
    ///
    pub eof: ::std::option::Option<unsafe extern "C" fn(self_:
                                                            *mut _cef_read_handler_t)
                                       -> ::std::os::raw::c_int>,
    ///
    pub may_block: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_read_handler_t)
                                             -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_read_handler_t() {
    assert_eq!(::std::mem::size_of::<_cef_read_handler_t>() , 72usize);
    assert_eq!(::std::mem::align_of::<_cef_read_handler_t>() , 8usize);
}
impl Clone for _cef_read_handler_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_read_handler_t = _cef_read_handler_t;
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_stream_reader_t {
    ///
    pub base: cef_base_t,
    ///
    pub read: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_stream_reader_t,
                                                         ptr:
                                                             *mut ::std::os::raw::c_void,
                                                         size: usize,
                                                         n: usize)
                                        -> ::std::os::raw::c_ulong>,
    ///
    pub seek: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_stream_reader_t,
                                                         offset: int64,
                                                         whence:
                                                             ::std::os::raw::c_int)
                                        -> ::std::os::raw::c_int>,
    ///
    pub tell: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_stream_reader_t)
                                        -> ::std::os::raw::c_long>,
    ///
    pub eof: ::std::option::Option<unsafe extern "C" fn(self_:
                                                            *mut _cef_stream_reader_t)
                                       -> ::std::os::raw::c_int>,
    ///
    pub may_block: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_stream_reader_t)
                                             -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_stream_reader_t() {
    assert_eq!(::std::mem::size_of::<_cef_stream_reader_t>() , 72usize);
    assert_eq!(::std::mem::align_of::<_cef_stream_reader_t>() , 8usize);
}
impl Clone for _cef_stream_reader_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_stream_reader_t = _cef_stream_reader_t;
extern "C" {
    ///
    pub fn cef_stream_reader_create_for_file(fileName: *const cef_string_t)
     -> *mut cef_stream_reader_t;
}
extern "C" {
    ///
    pub fn cef_stream_reader_create_for_data(data:
                                                 *mut ::std::os::raw::c_void,
                                             size: usize)
     -> *mut cef_stream_reader_t;
}
extern "C" {
    ///
    pub fn cef_stream_reader_create_for_handler(handler:
                                                    *mut cef_read_handler_t)
     -> *mut cef_stream_reader_t;
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_write_handler_t {
    ///
    pub base: cef_base_t,
    ///
    pub write: ::std::option::Option<unsafe extern "C" fn(self_:
                                                              *mut _cef_write_handler_t,
                                                          ptr:
                                                              *const ::std::os::raw::c_void,
                                                          size: usize,
                                                          n: usize)
                                         -> ::std::os::raw::c_ulong>,
    ///
    pub seek: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_write_handler_t,
                                                         offset: int64,
                                                         whence:
                                                             ::std::os::raw::c_int)
                                        -> ::std::os::raw::c_int>,
    ///
    pub tell: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_write_handler_t)
                                        -> ::std::os::raw::c_long>,
    ///
    pub flush: ::std::option::Option<unsafe extern "C" fn(self_:
                                                              *mut _cef_write_handler_t)
                                         -> ::std::os::raw::c_int>,
    ///
    pub may_block: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_write_handler_t)
                                             -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_write_handler_t() {
    assert_eq!(::std::mem::size_of::<_cef_write_handler_t>() , 72usize);
    assert_eq!(::std::mem::align_of::<_cef_write_handler_t>() , 8usize);
}
impl Clone for _cef_write_handler_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_write_handler_t = _cef_write_handler_t;
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_stream_writer_t {
    ///
    pub base: cef_base_t,
    ///
    pub write: ::std::option::Option<unsafe extern "C" fn(self_:
                                                              *mut _cef_stream_writer_t,
                                                          ptr:
                                                              *const ::std::os::raw::c_void,
                                                          size: usize,
                                                          n: usize)
                                         -> ::std::os::raw::c_ulong>,
    ///
    pub seek: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_stream_writer_t,
                                                         offset: int64,
                                                         whence:
                                                             ::std::os::raw::c_int)
                                        -> ::std::os::raw::c_int>,
    ///
    pub tell: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_stream_writer_t)
                                        -> ::std::os::raw::c_long>,
    ///
    pub flush: ::std::option::Option<unsafe extern "C" fn(self_:
                                                              *mut _cef_stream_writer_t)
                                         -> ::std::os::raw::c_int>,
    ///
    pub may_block: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_stream_writer_t)
                                             -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_stream_writer_t() {
    assert_eq!(::std::mem::size_of::<_cef_stream_writer_t>() , 72usize);
    assert_eq!(::std::mem::align_of::<_cef_stream_writer_t>() , 8usize);
}
impl Clone for _cef_stream_writer_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_stream_writer_t = _cef_stream_writer_t;
extern "C" {
    ///
    pub fn cef_stream_writer_create_for_file(fileName: *const cef_string_t)
     -> *mut cef_stream_writer_t;
}
extern "C" {
    ///
    pub fn cef_stream_writer_create_for_handler(handler:
                                                    *mut cef_write_handler_t)
     -> *mut cef_stream_writer_t;
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_drag_data_t {
    ///
    pub base: cef_base_t,
    ///
    pub clone: ::std::option::Option<unsafe extern "C" fn(self_:
                                                              *mut _cef_drag_data_t)
                                         -> *mut _cef_drag_data_t>,
    ///
    pub is_read_only: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_drag_data_t)
                                                -> ::std::os::raw::c_int>,
    ///
    pub is_link: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_drag_data_t)
                                           -> ::std::os::raw::c_int>,
    ///
    pub is_fragment: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_drag_data_t)
                                               -> ::std::os::raw::c_int>,
    ///
    pub is_file: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_drag_data_t)
                                           -> ::std::os::raw::c_int>,
    ///
    pub get_link_url: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_drag_data_t)
                                                -> *mut _cef_string_utf16_t>,
    ///
    pub get_link_title: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_drag_data_t)
                                                  ->
                                                      *mut _cef_string_utf16_t>,
    ///
    pub get_link_metadata: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_drag_data_t)
                                                     ->
                                                         *mut _cef_string_utf16_t>,
    ///
    pub get_fragment_text: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_drag_data_t)
                                                     ->
                                                         *mut _cef_string_utf16_t>,
    ///
    pub get_fragment_html: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_drag_data_t)
                                                     ->
                                                         *mut _cef_string_utf16_t>,
    ///
    pub get_fragment_base_url: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              *mut _cef_drag_data_t)
                                                         ->
                                                             *mut _cef_string_utf16_t>,
    ///
    pub get_file_name: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_drag_data_t)
                                                 -> *mut _cef_string_utf16_t>,
    ///
    pub get_file_contents: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_drag_data_t,
                                                                      writer:
                                                                          *mut _cef_stream_writer_t)
                                                     ->
                                                         ::std::os::raw::c_ulong>,
    ///
    pub get_file_names: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_drag_data_t,
                                                                   names:
                                                                       cef_string_list_t)
                                                  -> ::std::os::raw::c_int>,
    ///
    pub set_link_url: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_drag_data_t,
                                                                 url:
                                                                     *const cef_string_t)>,
    ///
    pub set_link_title: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_drag_data_t,
                                                                   title:
                                                                       *const cef_string_t)>,
    ///
    pub set_link_metadata: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_drag_data_t,
                                                                      data:
                                                                          *const cef_string_t)>,
    ///
    pub set_fragment_text: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_drag_data_t,
                                                                      text:
                                                                          *const cef_string_t)>,
    ///
    pub set_fragment_html: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_drag_data_t,
                                                                      html:
                                                                          *const cef_string_t)>,
    ///
    pub set_fragment_base_url: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              *mut _cef_drag_data_t,
                                                                          base_url:
                                                                              *const cef_string_t)>,
    ///
    pub reset_file_contents: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            *mut _cef_drag_data_t)>,
    ///
    pub add_file: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_drag_data_t,
                                                             path:
                                                                 *const cef_string_t,
                                                             display_name:
                                                                 *const cef_string_t)>,
}
#[test]
fn bindgen_test_layout__cef_drag_data_t() {
    assert_eq!(::std::mem::size_of::<_cef_drag_data_t>() , 208usize);
    assert_eq!(::std::mem::align_of::<_cef_drag_data_t>() , 8usize);
}
impl Clone for _cef_drag_data_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_drag_data_t = _cef_drag_data_t;
extern "C" {
    ///
    pub fn cef_drag_data_create() -> *mut cef_drag_data_t;
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_domdocument_t {
    ///
    pub base: cef_base_t,
    ///
    pub get_type: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_domdocument_t)
                                            -> _bindgen_ty_41>,
    ///
    pub get_document: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_domdocument_t)
                                                -> *mut _cef_domnode_t>,
    ///
    pub get_body: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_domdocument_t)
                                            -> *mut _cef_domnode_t>,
    ///
    pub get_head: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_domdocument_t)
                                            -> *mut _cef_domnode_t>,
    ///
    pub get_title: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_domdocument_t)
                                             -> *mut _cef_string_utf16_t>,
    ///
    pub get_element_by_id: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_domdocument_t,
                                                                      id:
                                                                          *const cef_string_t)
                                                     -> *mut _cef_domnode_t>,
    ///
    pub get_focused_node: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_domdocument_t)
                                                    -> *mut _cef_domnode_t>,
    ///
    pub has_selection: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_domdocument_t)
                                                 -> ::std::os::raw::c_int>,
    ///
    pub get_selection_start_offset: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                   *mut _cef_domdocument_t)
                                                              ->
                                                                  ::std::os::raw::c_int>,
    ///
    pub get_selection_end_offset: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                 *mut _cef_domdocument_t)
                                                            ->
                                                                ::std::os::raw::c_int>,
    ///
    pub get_selection_as_markup: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                *mut _cef_domdocument_t)
                                                           ->
                                                               *mut _cef_string_utf16_t>,
    ///
    pub get_selection_as_text: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              *mut _cef_domdocument_t)
                                                         ->
                                                             *mut _cef_string_utf16_t>,
    ///
    pub get_base_url: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_domdocument_t)
                                                -> *mut _cef_string_utf16_t>,
    ///
    pub get_complete_url: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_domdocument_t,
                                                                     partialURL:
                                                                         *const cef_string_t)
                                                    ->
                                                        *mut _cef_string_utf16_t>,
}
#[test]
fn bindgen_test_layout__cef_domdocument_t() {
    assert_eq!(::std::mem::size_of::<_cef_domdocument_t>() , 144usize);
    assert_eq!(::std::mem::align_of::<_cef_domdocument_t>() , 8usize);
}
impl Clone for _cef_domdocument_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_domnode_t {
    ///
    pub base: cef_base_t,
    ///
    pub get_type: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_domnode_t)
                                            -> _bindgen_ty_44>,
    ///
    pub is_text: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_domnode_t)
                                           -> ::std::os::raw::c_int>,
    ///
    pub is_element: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_domnode_t)
                                              -> ::std::os::raw::c_int>,
    ///
    pub is_editable: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_domnode_t)
                                               -> ::std::os::raw::c_int>,
    ///
    pub is_form_control_element: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                *mut _cef_domnode_t)
                                                           ->
                                                               ::std::os::raw::c_int>,
    ///
    pub get_form_control_element_type: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                      *mut _cef_domnode_t)
                                                                 ->
                                                                     *mut _cef_string_utf16_t>,
    ///
    pub is_same: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_domnode_t,
                                                            that:
                                                                *mut _cef_domnode_t)
                                           -> ::std::os::raw::c_int>,
    ///
    pub get_name: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_domnode_t)
                                            -> *mut _cef_string_utf16_t>,
    ///
    pub get_value: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_domnode_t)
                                             -> *mut _cef_string_utf16_t>,
    ///
    pub set_value: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_domnode_t,
                                                              value:
                                                                  *const cef_string_t)
                                             -> ::std::os::raw::c_int>,
    ///
    pub get_as_markup: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_domnode_t)
                                                 -> *mut _cef_string_utf16_t>,
    ///
    pub get_document: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_domnode_t)
                                                -> *mut _cef_domdocument_t>,
    ///
    pub get_parent: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_domnode_t)
                                              -> *mut _cef_domnode_t>,
    ///
    pub get_previous_sibling: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_domnode_t)
                                                        ->
                                                            *mut _cef_domnode_t>,
    ///
    pub get_next_sibling: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_domnode_t)
                                                    -> *mut _cef_domnode_t>,
    ///
    pub has_children: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_domnode_t)
                                                -> ::std::os::raw::c_int>,
    ///
    pub get_first_child: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_domnode_t)
                                                   -> *mut _cef_domnode_t>,
    ///
    pub get_last_child: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_domnode_t)
                                                  -> *mut _cef_domnode_t>,
    ///
    pub get_element_tag_name: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_domnode_t)
                                                        ->
                                                            *mut _cef_string_utf16_t>,
    ///
    pub has_element_attributes: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                               *mut _cef_domnode_t)
                                                          ->
                                                              ::std::os::raw::c_int>,
    ///
    pub has_element_attribute: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              *mut _cef_domnode_t,
                                                                          attrName:
                                                                              *const cef_string_t)
                                                         ->
                                                             ::std::os::raw::c_int>,
    ///
    pub get_element_attribute: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              *mut _cef_domnode_t,
                                                                          attrName:
                                                                              *const cef_string_t)
                                                         ->
                                                             *mut _cef_string_utf16_t>,
    ///
    pub get_element_attributes: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                               *mut _cef_domnode_t,
                                                                           attrMap:
                                                                               cef_string_map_t)>,
    ///
    pub set_element_attribute: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              *mut _cef_domnode_t,
                                                                          attrName:
                                                                              *const cef_string_t,
                                                                          value:
                                                                              *const cef_string_t)
                                                         ->
                                                             ::std::os::raw::c_int>,
    ///
    pub get_element_inner_text: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                               *mut _cef_domnode_t)
                                                          ->
                                                              *mut _cef_string_utf16_t>,
    ///
    pub get_element_bounds: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           *mut _cef_domnode_t)
                                                      -> _cef_rect_t>,
}
#[test]
fn bindgen_test_layout__cef_domnode_t() {
    assert_eq!(::std::mem::size_of::<_cef_domnode_t>() , 240usize);
    assert_eq!(::std::mem::align_of::<_cef_domnode_t>() , 8usize);
}
impl Clone for _cef_domnode_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_domvisitor_t {
    ///
    pub base: cef_base_t,
    ///
    pub visit: ::std::option::Option<unsafe extern "C" fn(self_:
                                                              *mut _cef_domvisitor_t,
                                                          document:
                                                              *mut _cef_domdocument_t)>,
}
#[test]
fn bindgen_test_layout__cef_domvisitor_t() {
    assert_eq!(::std::mem::size_of::<_cef_domvisitor_t>() , 40usize);
    assert_eq!(::std::mem::align_of::<_cef_domvisitor_t>() , 8usize);
}
impl Clone for _cef_domvisitor_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_post_data_element_t {
    ///
    pub base: cef_base_t,
    ///
    pub is_read_only: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_post_data_element_t)
                                                -> ::std::os::raw::c_int>,
    ///
    pub set_to_empty: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_post_data_element_t)>,
    ///
    pub set_to_file: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_post_data_element_t,
                                                                fileName:
                                                                    *const cef_string_t)>,
    ///
    pub set_to_bytes: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_post_data_element_t,
                                                                 size: usize,
                                                                 bytes:
                                                                     *const ::std::os::raw::c_void)>,
    ///
    pub get_type: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_post_data_element_t)
                                            -> _bindgen_ty_15>,
    ///
    pub get_file: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_post_data_element_t)
                                            -> *mut _cef_string_utf16_t>,
    ///
    pub get_bytes_count: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_post_data_element_t)
                                                   ->
                                                       ::std::os::raw::c_ulong>,
    ///
    pub get_bytes: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_post_data_element_t,
                                                              size: usize,
                                                              bytes:
                                                                  *mut ::std::os::raw::c_void)
                                             -> ::std::os::raw::c_ulong>,
}
#[test]
fn bindgen_test_layout__cef_post_data_element_t() {
    assert_eq!(::std::mem::size_of::<_cef_post_data_element_t>() , 96usize);
    assert_eq!(::std::mem::align_of::<_cef_post_data_element_t>() , 8usize);
}
impl Clone for _cef_post_data_element_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_post_data_t {
    ///
    pub base: cef_base_t,
    ///
    pub is_read_only: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_post_data_t)
                                                -> ::std::os::raw::c_int>,
    ///
    pub has_excluded_elements: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              *mut _cef_post_data_t)
                                                         ->
                                                             ::std::os::raw::c_int>,
    ///
    pub get_element_count: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_post_data_t)
                                                     ->
                                                         ::std::os::raw::c_ulong>,
    ///
    pub get_elements: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_post_data_t,
                                                                 elementsCount:
                                                                     *mut usize,
                                                                 elements:
                                                                     *mut *mut _cef_post_data_element_t)>,
    ///
    pub remove_element: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_post_data_t,
                                                                   element:
                                                                       *mut _cef_post_data_element_t)
                                                  -> ::std::os::raw::c_int>,
    ///
    pub add_element: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_post_data_t,
                                                                element:
                                                                    *mut _cef_post_data_element_t)
                                               -> ::std::os::raw::c_int>,
    ///
    pub remove_elements: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_post_data_t)>,
}
#[test]
fn bindgen_test_layout__cef_post_data_t() {
    assert_eq!(::std::mem::size_of::<_cef_post_data_t>() , 88usize);
    assert_eq!(::std::mem::align_of::<_cef_post_data_t>() , 8usize);
}
impl Clone for _cef_post_data_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_request_t {
    ///
    pub base: cef_base_t,
    ///
    pub is_read_only: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_request_t)
                                                -> ::std::os::raw::c_int>,
    ///
    pub get_url: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_request_t)
                                           -> *mut _cef_string_utf16_t>,
    ///
    pub set_url: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_request_t,
                                                            url:
                                                                *const cef_string_t)>,
    ///
    pub get_method: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_request_t)
                                              -> *mut _cef_string_utf16_t>,
    ///
    pub set_method: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_request_t,
                                                               method:
                                                                   *const cef_string_t)>,
    ///
    pub set_referrer: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_request_t,
                                                                 referrer_url:
                                                                     *const cef_string_t,
                                                                 policy:
                                                                     cef_referrer_policy_t)>,
    ///
    pub get_referrer_url: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_request_t)
                                                    ->
                                                        *mut _cef_string_utf16_t>,
    ///
    pub get_referrer_policy: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            *mut _cef_request_t)
                                                       -> _bindgen_ty_57>,
    ///
    pub get_post_data: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_request_t)
                                                 -> *mut _cef_post_data_t>,
    ///
    pub set_post_data: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_request_t,
                                                                  postData:
                                                                      *mut _cef_post_data_t)>,
    ///
    pub get_header_map: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_request_t,
                                                                   headerMap:
                                                                       cef_string_multimap_t)>,
    ///
    pub set_header_map: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_request_t,
                                                                   headerMap:
                                                                       cef_string_multimap_t)>,
    ///
    pub set: ::std::option::Option<unsafe extern "C" fn(self_:
                                                            *mut _cef_request_t,
                                                        url:
                                                            *const cef_string_t,
                                                        method:
                                                            *const cef_string_t,
                                                        postData:
                                                            *mut _cef_post_data_t,
                                                        headerMap:
                                                            cef_string_multimap_t)>,
    ///
    pub get_flags: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_request_t)
                                             -> ::std::os::raw::c_int>,
    ///
    pub set_flags: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_request_t,
                                                              flags:
                                                                  ::std::os::raw::c_int)>,
    ///
    pub get_first_party_for_cookies: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                    *mut _cef_request_t)
                                                               ->
                                                                   *mut _cef_string_utf16_t>,
    ///
    pub set_first_party_for_cookies: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                    *mut _cef_request_t,
                                                                                url:
                                                                                    *const cef_string_t)>,
    ///
    pub get_resource_type: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_request_t)
                                                     -> _bindgen_ty_16>,
    ///
    pub get_transition_type: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            *mut _cef_request_t)
                                                       -> _bindgen_ty_17>,
    ///
    pub get_identifier: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_request_t)
                                                  -> ::std::os::raw::c_ulong>,
}
#[test]
fn bindgen_test_layout__cef_request_t() {
    assert_eq!(::std::mem::size_of::<_cef_request_t>() , 192usize);
    assert_eq!(::std::mem::align_of::<_cef_request_t>() , 8usize);
}
impl Clone for _cef_request_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_request_t = _cef_request_t;
extern "C" {
    ///
    pub fn cef_request_create() -> *mut cef_request_t;
}
pub type cef_post_data_t = _cef_post_data_t;
extern "C" {
    ///
    pub fn cef_post_data_create() -> *mut cef_post_data_t;
}
pub type cef_post_data_element_t = _cef_post_data_element_t;
extern "C" {
    ///
    pub fn cef_post_data_element_create() -> *mut cef_post_data_element_t;
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_string_visitor_t {
    ///
    pub base: cef_base_t,
    ///
    pub visit: ::std::option::Option<unsafe extern "C" fn(self_:
                                                              *mut _cef_string_visitor_t,
                                                          string:
                                                              *const cef_string_t)>,
}
#[test]
fn bindgen_test_layout__cef_string_visitor_t() {
    assert_eq!(::std::mem::size_of::<_cef_string_visitor_t>() , 40usize);
    assert_eq!(::std::mem::align_of::<_cef_string_visitor_t>() , 8usize);
}
impl Clone for _cef_string_visitor_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_browser_t {
    ///
    pub base: cef_base_t,
    ///
    pub get_host: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_browser_t)
                                            -> *mut _cef_browser_host_t>,
    ///
    pub can_go_back: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_browser_t)
                                               -> ::std::os::raw::c_int>,
    ///
    pub go_back: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_browser_t)>,
    ///
    pub can_go_forward: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_browser_t)
                                                  -> ::std::os::raw::c_int>,
    ///
    pub go_forward: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_browser_t)>,
    ///
    pub is_loading: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_browser_t)
                                              -> ::std::os::raw::c_int>,
    ///
    pub reload: ::std::option::Option<unsafe extern "C" fn(self_:
                                                               *mut _cef_browser_t)>,
    ///
    pub reload_ignore_cache: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            *mut _cef_browser_t)>,
    ///
    pub stop_load: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_browser_t)>,
    ///
    pub get_identifier: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_browser_t)
                                                  -> ::std::os::raw::c_int>,
    ///
    pub is_same: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_browser_t,
                                                            that:
                                                                *mut _cef_browser_t)
                                           -> ::std::os::raw::c_int>,
    ///
    pub is_popup: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_browser_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub has_document: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_browser_t)
                                                -> ::std::os::raw::c_int>,
    ///
    pub get_main_frame: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_browser_t)
                                                  -> *mut _cef_frame_t>,
    ///
    pub get_focused_frame: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_browser_t)
                                                     -> *mut _cef_frame_t>,
    ///
    pub get_frame_byident: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_browser_t,
                                                                      identifier:
                                                                          int64)
                                                     -> *mut _cef_frame_t>,
    ///
    pub get_frame: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_browser_t,
                                                              name:
                                                                  *const cef_string_t)
                                             -> *mut _cef_frame_t>,
    ///
    pub get_frame_count: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_browser_t)
                                                   ->
                                                       ::std::os::raw::c_ulong>,
    ///
    pub get_frame_identifiers: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              *mut _cef_browser_t,
                                                                          identifiersCount:
                                                                              *mut usize,
                                                                          identifiers:
                                                                              *mut int64)>,
    ///
    pub get_frame_names: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_browser_t,
                                                                    names:
                                                                        cef_string_list_t)>,
    ///
    pub send_process_message: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_browser_t,
                                                                         target_process:
                                                                             cef_process_id_t,
                                                                         message:
                                                                             *mut _cef_process_message_t)
                                                        ->
                                                            ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_browser_t() {
    assert_eq!(::std::mem::size_of::<_cef_browser_t>() , 200usize);
    assert_eq!(::std::mem::align_of::<_cef_browser_t>() , 8usize);
}
impl Clone for _cef_browser_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_v8context_t {
    ///
    pub base: cef_base_t,
    ///
    pub get_task_runner: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_v8context_t)
                                                   ->
                                                       *mut _cef_task_runner_t>,
    ///
    pub is_valid: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_v8context_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub get_browser: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_v8context_t)
                                               -> *mut _cef_browser_t>,
    ///
    pub get_frame: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_v8context_t)
                                             -> *mut _cef_frame_t>,
    ///
    pub get_global: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_v8context_t)
                                              -> *mut _cef_v8value_t>,
    ///
    pub enter: ::std::option::Option<unsafe extern "C" fn(self_:
                                                              *mut _cef_v8context_t)
                                         -> ::std::os::raw::c_int>,
    ///
    pub exit: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_v8context_t)
                                        -> ::std::os::raw::c_int>,
    ///
    pub is_same: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_v8context_t,
                                                            that:
                                                                *mut _cef_v8context_t)
                                           -> ::std::os::raw::c_int>,
    ///
    pub eval: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_v8context_t,
                                                         code:
                                                             *const cef_string_t,
                                                         script_url:
                                                             *const cef_string_t,
                                                         start_line:
                                                             ::std::os::raw::c_int,
                                                         retval:
                                                             *mut *mut _cef_v8value_t,
                                                         exception:
                                                             *mut *mut _cef_v8exception_t)
                                        -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_v8context_t() {
    assert_eq!(::std::mem::size_of::<_cef_v8context_t>() , 104usize);
    assert_eq!(::std::mem::align_of::<_cef_v8context_t>() , 8usize);
}
impl Clone for _cef_v8context_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_frame_t {
    ///
    pub base: cef_base_t,
    ///
    pub is_valid: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_frame_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub undo: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_frame_t)>,
    ///
    pub redo: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_frame_t)>,
    ///
    pub cut: ::std::option::Option<unsafe extern "C" fn(self_:
                                                            *mut _cef_frame_t)>,
    ///
    pub copy: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_frame_t)>,
    ///
    pub paste: ::std::option::Option<unsafe extern "C" fn(self_:
                                                              *mut _cef_frame_t)>,
    ///
    pub del: ::std::option::Option<unsafe extern "C" fn(self_:
                                                            *mut _cef_frame_t)>,
    ///
    pub select_all: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_frame_t)>,
    ///
    pub view_source: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_frame_t)>,
    ///
    pub get_source: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_frame_t,
                                                               visitor:
                                                                   *mut _cef_string_visitor_t)>,
    ///
    pub get_text: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_frame_t,
                                                             visitor:
                                                                 *mut _cef_string_visitor_t)>,
    ///
    pub load_request: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_frame_t,
                                                                 request:
                                                                     *mut _cef_request_t)>,
    ///
    pub load_url: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_frame_t,
                                                             url:
                                                                 *const cef_string_t)>,
    ///
    pub load_string: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_frame_t,
                                                                string_val:
                                                                    *const cef_string_t,
                                                                url:
                                                                    *const cef_string_t)>,
    ///
    pub execute_java_script: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            *mut _cef_frame_t,
                                                                        code:
                                                                            *const cef_string_t,
                                                                        script_url:
                                                                            *const cef_string_t,
                                                                        start_line:
                                                                            ::std::os::raw::c_int)>,
    ///
    pub is_main: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_frame_t)
                                           -> ::std::os::raw::c_int>,
    ///
    pub is_focused: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_frame_t)
                                              -> ::std::os::raw::c_int>,
    ///
    pub get_name: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_frame_t)
                                            -> *mut _cef_string_utf16_t>,
    ///
    pub get_identifier: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_frame_t)
                                                  -> ::std::os::raw::c_long>,
    ///
    pub get_parent: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_frame_t)
                                              -> *mut _cef_frame_t>,
    ///
    pub get_url: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_frame_t)
                                           -> *mut _cef_string_utf16_t>,
    ///
    pub get_browser: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_frame_t)
                                               -> *mut _cef_browser_t>,
    ///
    pub get_v8context: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_frame_t)
                                                 -> *mut _cef_v8context_t>,
    ///
    pub visit_dom: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_frame_t,
                                                              visitor:
                                                                  *mut _cef_domvisitor_t)>,
}
#[test]
fn bindgen_test_layout__cef_frame_t() {
    assert_eq!(::std::mem::size_of::<_cef_frame_t>() , 224usize);
    assert_eq!(::std::mem::align_of::<_cef_frame_t>() , 8usize);
}
impl Clone for _cef_frame_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_image_t {
    ///
    pub base: cef_base_t,
    ///
    pub is_empty: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_image_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub is_same: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_image_t,
                                                            that:
                                                                *mut _cef_image_t)
                                           -> ::std::os::raw::c_int>,
    ///
    pub add_bitmap: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_image_t,
                                                               scale_factor:
                                                                   f32,
                                                               pixel_width:
                                                                   ::std::os::raw::c_int,
                                                               pixel_height:
                                                                   ::std::os::raw::c_int,
                                                               color_type:
                                                                   cef_color_type_t,
                                                               alpha_type:
                                                                   cef_alpha_type_t,
                                                               pixel_data:
                                                                   *const ::std::os::raw::c_void,
                                                               pixel_data_size:
                                                                   usize)
                                              -> ::std::os::raw::c_int>,
    ///
    pub add_png: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_image_t,
                                                            scale_factor: f32,
                                                            png_data:
                                                                *const ::std::os::raw::c_void,
                                                            png_data_size:
                                                                usize)
                                           -> ::std::os::raw::c_int>,
    ///
    pub add_jpeg: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_image_t,
                                                             scale_factor:
                                                                 f32,
                                                             jpeg_data:
                                                                 *const ::std::os::raw::c_void,
                                                             jpeg_data_size:
                                                                 usize)
                                            -> ::std::os::raw::c_int>,
    ///
    pub get_width: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_image_t)
                                             -> ::std::os::raw::c_ulong>,
    ///
    pub get_height: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_image_t)
                                              -> ::std::os::raw::c_ulong>,
    ///
    pub has_representation: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           *mut _cef_image_t,
                                                                       scale_factor:
                                                                           f32)
                                                      ->
                                                          ::std::os::raw::c_int>,
    ///
    pub remove_representation: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              *mut _cef_image_t,
                                                                          scale_factor:
                                                                              f32)
                                                         ->
                                                             ::std::os::raw::c_int>,
    ///
    pub get_representation_info: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                *mut _cef_image_t,
                                                                            scale_factor:
                                                                                f32,
                                                                            actual_scale_factor:
                                                                                *mut f32,
                                                                            pixel_width:
                                                                                *mut ::std::os::raw::c_int,
                                                                            pixel_height:
                                                                                *mut ::std::os::raw::c_int)
                                                           ->
                                                               ::std::os::raw::c_int>,
    ///
    pub get_as_bitmap: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_image_t,
                                                                  scale_factor:
                                                                      f32,
                                                                  color_type:
                                                                      cef_color_type_t,
                                                                  alpha_type:
                                                                      cef_alpha_type_t,
                                                                  pixel_width:
                                                                      *mut ::std::os::raw::c_int,
                                                                  pixel_height:
                                                                      *mut ::std::os::raw::c_int)
                                                 -> *mut _cef_binary_value_t>,
    ///
    pub get_as_png: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_image_t,
                                                               scale_factor:
                                                                   f32,
                                                               with_transparency:
                                                                   ::std::os::raw::c_int,
                                                               pixel_width:
                                                                   *mut ::std::os::raw::c_int,
                                                               pixel_height:
                                                                   *mut ::std::os::raw::c_int)
                                              -> *mut _cef_binary_value_t>,
    ///
    pub get_as_jpeg: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_image_t,
                                                                scale_factor:
                                                                    f32,
                                                                quality:
                                                                    ::std::os::raw::c_int,
                                                                pixel_width:
                                                                    *mut ::std::os::raw::c_int,
                                                                pixel_height:
                                                                    *mut ::std::os::raw::c_int)
                                               -> *mut _cef_binary_value_t>,
}
#[test]
fn bindgen_test_layout__cef_image_t() {
    assert_eq!(::std::mem::size_of::<_cef_image_t>() , 136usize);
    assert_eq!(::std::mem::align_of::<_cef_image_t>() , 8usize);
}
impl Clone for _cef_image_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_image_t = _cef_image_t;
extern "C" {
    ///
    pub fn cef_image_create() -> *mut cef_image_t;
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_x509cert_principal_t {
    ///
    pub base: cef_base_t,
    ///
    pub get_display_name: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_x509cert_principal_t)
                                                    ->
                                                        *mut _cef_string_utf16_t>,
    ///
    pub get_common_name: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_x509cert_principal_t)
                                                   ->
                                                       *mut _cef_string_utf16_t>,
    ///
    pub get_locality_name: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_x509cert_principal_t)
                                                     ->
                                                         *mut _cef_string_utf16_t>,
    ///
    pub get_state_or_province_name: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                   *mut _cef_x509cert_principal_t)
                                                              ->
                                                                  *mut _cef_string_utf16_t>,
    ///
    pub get_country_name: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_x509cert_principal_t)
                                                    ->
                                                        *mut _cef_string_utf16_t>,
    ///
    pub get_street_addresses: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_x509cert_principal_t,
                                                                         addresses:
                                                                             cef_string_list_t)>,
    ///
    pub get_organization_names: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                               *mut _cef_x509cert_principal_t,
                                                                           names:
                                                                               cef_string_list_t)>,
    ///
    pub get_organization_unit_names: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                    *mut _cef_x509cert_principal_t,
                                                                                names:
                                                                                    cef_string_list_t)>,
    ///
    pub get_domain_components: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              *mut _cef_x509cert_principal_t,
                                                                          components:
                                                                              cef_string_list_t)>,
}
#[test]
fn bindgen_test_layout__cef_x509cert_principal_t() {
    assert_eq!(::std::mem::size_of::<_cef_x509cert_principal_t>() , 104usize);
    assert_eq!(::std::mem::align_of::<_cef_x509cert_principal_t>() , 8usize);
}
impl Clone for _cef_x509cert_principal_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_x509certificate_t {
    ///
    pub base: cef_base_t,
    ///
    pub get_subject: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_x509certificate_t)
                                               ->
                                                   *mut _cef_x509cert_principal_t>,
    ///
    pub get_issuer: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_x509certificate_t)
                                              ->
                                                  *mut _cef_x509cert_principal_t>,
    ///
    pub get_serial_number: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_x509certificate_t)
                                                     ->
                                                         *mut _cef_binary_value_t>,
    ///
    pub get_valid_start: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_x509certificate_t)
                                                   -> _cef_time_t>,
    ///
    pub get_valid_expiry: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_x509certificate_t)
                                                    -> _cef_time_t>,
    ///
    pub get_derencoded: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_x509certificate_t)
                                                  ->
                                                      *mut _cef_binary_value_t>,
    ///
    pub get_pemencoded: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_x509certificate_t)
                                                  ->
                                                      *mut _cef_binary_value_t>,
    ///
    pub get_issuer_chain_size: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              *mut _cef_x509certificate_t)
                                                         ->
                                                             ::std::os::raw::c_ulong>,
    ///
    pub get_derencoded_issuer_chain: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                    *mut _cef_x509certificate_t,
                                                                                chainCount:
                                                                                    *mut usize,
                                                                                chain:
                                                                                    *mut *mut _cef_binary_value_t)>,
    ///
    pub get_pemencoded_issuer_chain: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                    *mut _cef_x509certificate_t,
                                                                                chainCount:
                                                                                    *mut usize,
                                                                                chain:
                                                                                    *mut *mut _cef_binary_value_t)>,
}
#[test]
fn bindgen_test_layout__cef_x509certificate_t() {
    assert_eq!(::std::mem::size_of::<_cef_x509certificate_t>() , 112usize);
    assert_eq!(::std::mem::align_of::<_cef_x509certificate_t>() , 8usize);
}
impl Clone for _cef_x509certificate_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_sslstatus_t {
    ///
    pub base: cef_base_t,
    ///
    pub is_secure_connection: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_sslstatus_t)
                                                        ->
                                                            ::std::os::raw::c_int>,
    ///
    pub get_cert_status: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_sslstatus_t)
                                                   -> _bindgen_ty_10>,
    ///
    pub get_sslversion: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_sslstatus_t)
                                                  -> _bindgen_ty_67>,
    ///
    pub get_content_status: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           *mut _cef_sslstatus_t)
                                                      -> _bindgen_ty_68>,
    ///
    pub get_x509certificate: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            *mut _cef_sslstatus_t)
                                                       ->
                                                           *mut _cef_x509certificate_t>,
}
#[test]
fn bindgen_test_layout__cef_sslstatus_t() {
    assert_eq!(::std::mem::size_of::<_cef_sslstatus_t>() , 72usize);
    assert_eq!(::std::mem::align_of::<_cef_sslstatus_t>() , 8usize);
}
impl Clone for _cef_sslstatus_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_navigation_entry_t {
    ///
    pub base: cef_base_t,
    ///
    pub is_valid: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_navigation_entry_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub get_url: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_navigation_entry_t)
                                           -> *mut _cef_string_utf16_t>,
    ///
    pub get_display_url: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_navigation_entry_t)
                                                   ->
                                                       *mut _cef_string_utf16_t>,
    ///
    pub get_original_url: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_navigation_entry_t)
                                                    ->
                                                        *mut _cef_string_utf16_t>,
    ///
    pub get_title: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_navigation_entry_t)
                                             -> *mut _cef_string_utf16_t>,
    ///
    pub get_transition_type: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            *mut _cef_navigation_entry_t)
                                                       -> _bindgen_ty_17>,
    ///
    pub has_post_data: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_navigation_entry_t)
                                                 -> ::std::os::raw::c_int>,
    ///
    pub get_completion_time: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            *mut _cef_navigation_entry_t)
                                                       -> _cef_time_t>,
    ///
    pub get_http_status_code: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_navigation_entry_t)
                                                        ->
                                                            ::std::os::raw::c_int>,
    ///
    pub get_sslstatus: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_navigation_entry_t)
                                                 -> *mut _cef_sslstatus_t>,
}
#[test]
fn bindgen_test_layout__cef_navigation_entry_t() {
    assert_eq!(::std::mem::size_of::<_cef_navigation_entry_t>() , 112usize);
    assert_eq!(::std::mem::align_of::<_cef_navigation_entry_t>() , 8usize);
}
impl Clone for _cef_navigation_entry_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_process_message_t {
    ///
    pub base: cef_base_t,
    ///
    pub is_valid: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_process_message_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub is_read_only: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_process_message_t)
                                                -> ::std::os::raw::c_int>,
    ///
    pub copy: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_process_message_t)
                                        -> *mut _cef_process_message_t>,
    ///
    pub get_name: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_process_message_t)
                                            -> *mut _cef_string_utf16_t>,
    ///
    pub get_argument_list: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_process_message_t)
                                                     ->
                                                         *mut _cef_list_value_t>,
}
#[test]
fn bindgen_test_layout__cef_process_message_t() {
    assert_eq!(::std::mem::size_of::<_cef_process_message_t>() , 72usize);
    assert_eq!(::std::mem::align_of::<_cef_process_message_t>() , 8usize);
}
impl Clone for _cef_process_message_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_process_message_t = _cef_process_message_t;
extern "C" {
    ///
    pub fn cef_process_message_create(name: *const cef_string_t)
     -> *mut cef_process_message_t;
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_callback_t {
    ///
    pub base: cef_base_t,
    ///
    pub cont: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_callback_t)>,
    ///
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                               *mut _cef_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_callback_t() {
    assert_eq!(::std::mem::size_of::<_cef_callback_t>() , 48usize);
    assert_eq!(::std::mem::align_of::<_cef_callback_t>() , 8usize);
}
impl Clone for _cef_callback_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_completion_callback_t {
    ///
    pub base: cef_base_t,
    ///
    pub on_complete: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_completion_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_completion_callback_t() {
    assert_eq!(::std::mem::size_of::<_cef_completion_callback_t>() , 40usize);
    assert_eq!(::std::mem::align_of::<_cef_completion_callback_t>() , 8usize);
}
impl Clone for _cef_completion_callback_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_cookie_visitor_t {
    ///
    pub base: cef_base_t,
    ///
    pub visit: ::std::option::Option<unsafe extern "C" fn(self_:
                                                              *mut _cef_cookie_visitor_t,
                                                          cookie:
                                                              *const _cef_cookie_t,
                                                          count:
                                                              ::std::os::raw::c_int,
                                                          total:
                                                              ::std::os::raw::c_int,
                                                          deleteCookie:
                                                              *mut ::std::os::raw::c_int)
                                         -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_cookie_visitor_t() {
    assert_eq!(::std::mem::size_of::<_cef_cookie_visitor_t>() , 40usize);
    assert_eq!(::std::mem::align_of::<_cef_cookie_visitor_t>() , 8usize);
}
impl Clone for _cef_cookie_visitor_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_delete_cookies_callback_t {
    ///
    pub base: cef_base_t,
    ///
    pub on_complete: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_delete_cookies_callback_t,
                                                                num_deleted:
                                                                    ::std::os::raw::c_int)>,
}
#[test]
fn bindgen_test_layout__cef_delete_cookies_callback_t() {
    assert_eq!(::std::mem::size_of::<_cef_delete_cookies_callback_t>() ,
               40usize);
    assert_eq!(::std::mem::align_of::<_cef_delete_cookies_callback_t>() ,
               8usize);
}
impl Clone for _cef_delete_cookies_callback_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_set_cookie_callback_t {
    ///
    pub base: cef_base_t,
    ///
    pub on_complete: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_set_cookie_callback_t,
                                                                success:
                                                                    ::std::os::raw::c_int)>,
}
#[test]
fn bindgen_test_layout__cef_set_cookie_callback_t() {
    assert_eq!(::std::mem::size_of::<_cef_set_cookie_callback_t>() , 40usize);
    assert_eq!(::std::mem::align_of::<_cef_set_cookie_callback_t>() , 8usize);
}
impl Clone for _cef_set_cookie_callback_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_cookie_manager_t {
    ///
    pub base: cef_base_t,
    ///
    pub set_supported_schemes: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              *mut _cef_cookie_manager_t,
                                                                          schemes:
                                                                              cef_string_list_t,
                                                                          callback:
                                                                              *mut _cef_completion_callback_t)>,
    ///
    pub visit_all_cookies: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_cookie_manager_t,
                                                                      visitor:
                                                                          *mut _cef_cookie_visitor_t)
                                                     ->
                                                         ::std::os::raw::c_int>,
    ///
    pub visit_url_cookies: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_cookie_manager_t,
                                                                      url:
                                                                          *const cef_string_t,
                                                                      includeHttpOnly:
                                                                          ::std::os::raw::c_int,
                                                                      visitor:
                                                                          *mut _cef_cookie_visitor_t)
                                                     ->
                                                         ::std::os::raw::c_int>,
    ///
    pub set_cookie: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_cookie_manager_t,
                                                               url:
                                                                   *const cef_string_t,
                                                               cookie:
                                                                   *const _cef_cookie_t,
                                                               callback:
                                                                   *mut _cef_set_cookie_callback_t)
                                              -> ::std::os::raw::c_int>,
    ///
    pub delete_cookies: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_cookie_manager_t,
                                                                   url:
                                                                       *const cef_string_t,
                                                                   cookie_name:
                                                                       *const cef_string_t,
                                                                   callback:
                                                                       *mut _cef_delete_cookies_callback_t)
                                                  -> ::std::os::raw::c_int>,
    ///
    pub set_storage_path: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_cookie_manager_t,
                                                                     path:
                                                                         *const cef_string_t,
                                                                     persist_session_cookies:
                                                                         ::std::os::raw::c_int,
                                                                     callback:
                                                                         *mut _cef_completion_callback_t)
                                                    -> ::std::os::raw::c_int>,
    ///
    pub flush_store: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_cookie_manager_t,
                                                                callback:
                                                                    *mut _cef_completion_callback_t)
                                               -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_cookie_manager_t() {
    assert_eq!(::std::mem::size_of::<_cef_cookie_manager_t>() , 88usize);
    assert_eq!(::std::mem::align_of::<_cef_cookie_manager_t>() , 8usize);
}
impl Clone for _cef_cookie_manager_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_cookie_manager_t = _cef_cookie_manager_t;
extern "C" {
    ///
    pub fn cef_cookie_manager_get_global_manager(callback:
                                                     *mut _cef_completion_callback_t)
     -> *mut cef_cookie_manager_t;
}
extern "C" {
    ///
    pub fn cef_cookie_manager_create_manager(path: *const cef_string_t,
                                             persist_session_cookies:
                                                 ::std::os::raw::c_int,
                                             callback:
                                                 *mut _cef_completion_callback_t)
     -> *mut cef_cookie_manager_t;
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_web_plugin_info_t {
    ///
    pub base: cef_base_t,
    ///
    pub get_name: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_web_plugin_info_t)
                                            -> *mut _cef_string_utf16_t>,
    ///
    pub get_path: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_web_plugin_info_t)
                                            -> *mut _cef_string_utf16_t>,
    ///
    pub get_version: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_web_plugin_info_t)
                                               -> *mut _cef_string_utf16_t>,
    ///
    pub get_description: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_web_plugin_info_t)
                                                   ->
                                                       *mut _cef_string_utf16_t>,
}
#[test]
fn bindgen_test_layout__cef_web_plugin_info_t() {
    assert_eq!(::std::mem::size_of::<_cef_web_plugin_info_t>() , 64usize);
    assert_eq!(::std::mem::align_of::<_cef_web_plugin_info_t>() , 8usize);
}
impl Clone for _cef_web_plugin_info_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_web_plugin_info_visitor_t {
    ///
    pub base: cef_base_t,
    ///
    pub visit: ::std::option::Option<unsafe extern "C" fn(self_:
                                                              *mut _cef_web_plugin_info_visitor_t,
                                                          info:
                                                              *mut _cef_web_plugin_info_t,
                                                          count:
                                                              ::std::os::raw::c_int,
                                                          total:
                                                              ::std::os::raw::c_int)
                                         -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_web_plugin_info_visitor_t() {
    assert_eq!(::std::mem::size_of::<_cef_web_plugin_info_visitor_t>() ,
               40usize);
    assert_eq!(::std::mem::align_of::<_cef_web_plugin_info_visitor_t>() ,
               8usize);
}
impl Clone for _cef_web_plugin_info_visitor_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_web_plugin_info_visitor_t = _cef_web_plugin_info_visitor_t;
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_web_plugin_unstable_callback_t {
    ///
    pub base: cef_base_t,
    ///
    pub is_unstable: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_web_plugin_unstable_callback_t,
                                                                path:
                                                                    *const cef_string_t,
                                                                unstable:
                                                                    ::std::os::raw::c_int)>,
}
#[test]
fn bindgen_test_layout__cef_web_plugin_unstable_callback_t() {
    assert_eq!(::std::mem::size_of::<_cef_web_plugin_unstable_callback_t>() ,
               40usize);
    assert_eq!(::std::mem::align_of::<_cef_web_plugin_unstable_callback_t>() ,
               8usize);
}
impl Clone for _cef_web_plugin_unstable_callback_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_web_plugin_unstable_callback_t =
    _cef_web_plugin_unstable_callback_t;
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_register_cdm_callback_t {
    ///
    pub base: cef_base_t,
    ///
    pub on_cdm_registration_complete: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                     *mut _cef_register_cdm_callback_t,
                                                                                 result:
                                                                                     cef_cdm_registration_error_t,
                                                                                 error_message:
                                                                                     *const cef_string_t)>,
}
#[test]
fn bindgen_test_layout__cef_register_cdm_callback_t() {
    assert_eq!(::std::mem::size_of::<_cef_register_cdm_callback_t>() ,
               40usize);
    assert_eq!(::std::mem::align_of::<_cef_register_cdm_callback_t>() ,
               8usize);
}
impl Clone for _cef_register_cdm_callback_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_register_cdm_callback_t = _cef_register_cdm_callback_t;
extern "C" {
    ///
    pub fn cef_visit_web_plugin_info(visitor:
                                         *mut cef_web_plugin_info_visitor_t);
}
extern "C" {
    ///
    pub fn cef_refresh_web_plugins();
}
extern "C" {
    ///
    pub fn cef_unregister_internal_web_plugin(path: *const cef_string_t);
}
extern "C" {
    ///
    pub fn cef_register_web_plugin_crash(path: *const cef_string_t);
}
extern "C" {
    ///
    pub fn cef_is_web_plugin_unstable(path: *const cef_string_t,
                                      callback:
                                          *mut cef_web_plugin_unstable_callback_t);
}
extern "C" {
    ///
    pub fn cef_register_widevine_cdm(path: *const cef_string_t,
                                     callback:
                                         *mut cef_register_cdm_callback_t);
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_request_context_handler_t {
    ///
    pub base: cef_base_t,
    ///
    pub get_cookie_manager: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           *mut _cef_request_context_handler_t)
                                                      ->
                                                          *mut _cef_cookie_manager_t>,
    ///
    pub on_before_plugin_load: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              *mut _cef_request_context_handler_t,
                                                                          mime_type:
                                                                              *const cef_string_t,
                                                                          plugin_url:
                                                                              *const cef_string_t,
                                                                          is_main_frame:
                                                                              ::std::os::raw::c_int,
                                                                          top_origin_url:
                                                                              *const cef_string_t,
                                                                          plugin_info:
                                                                              *mut _cef_web_plugin_info_t,
                                                                          plugin_policy:
                                                                              *mut cef_plugin_policy_t)
                                                         ->
                                                             ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_request_context_handler_t() {
    assert_eq!(::std::mem::size_of::<_cef_request_context_handler_t>() ,
               48usize);
    assert_eq!(::std::mem::align_of::<_cef_request_context_handler_t>() ,
               8usize);
}
impl Clone for _cef_request_context_handler_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_scheme_handler_factory_t {
    ///
    pub base: cef_base_t,
    ///
    pub create: ::std::option::Option<unsafe extern "C" fn(self_:
                                                               *mut _cef_scheme_handler_factory_t,
                                                           browser:
                                                               *mut _cef_browser_t,
                                                           frame:
                                                               *mut _cef_frame_t,
                                                           scheme_name:
                                                               *const cef_string_t,
                                                           request:
                                                               *mut _cef_request_t)
                                          -> *mut _cef_resource_handler_t>,
}
#[test]
fn bindgen_test_layout__cef_scheme_handler_factory_t() {
    assert_eq!(::std::mem::size_of::<_cef_scheme_handler_factory_t>() ,
               40usize);
    assert_eq!(::std::mem::align_of::<_cef_scheme_handler_factory_t>() ,
               8usize);
}
impl Clone for _cef_scheme_handler_factory_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_resolve_callback_t {
    ///
    pub base: cef_base_t,
    ///
    pub on_resolve_completed: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_resolve_callback_t,
                                                                         result:
                                                                             cef_errorcode_t,
                                                                         resolved_ips:
                                                                             cef_string_list_t)>,
}
#[test]
fn bindgen_test_layout__cef_resolve_callback_t() {
    assert_eq!(::std::mem::size_of::<_cef_resolve_callback_t>() , 40usize);
    assert_eq!(::std::mem::align_of::<_cef_resolve_callback_t>() , 8usize);
}
impl Clone for _cef_resolve_callback_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_request_context_t {
    ///
    pub base: cef_base_t,
    ///
    pub is_same: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_request_context_t,
                                                            other:
                                                                *mut _cef_request_context_t)
                                           -> ::std::os::raw::c_int>,
    ///
    pub is_sharing_with: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_request_context_t,
                                                                    other:
                                                                        *mut _cef_request_context_t)
                                                   -> ::std::os::raw::c_int>,
    ///
    pub is_global: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_request_context_t)
                                             -> ::std::os::raw::c_int>,
    ///
    pub get_handler: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_request_context_t)
                                               ->
                                                   *mut _cef_request_context_handler_t>,
    ///
    pub get_cache_path: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_request_context_t)
                                                  ->
                                                      *mut _cef_string_utf16_t>,
    ///
    pub get_default_cookie_manager: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                   *mut _cef_request_context_t,
                                                                               callback:
                                                                                   *mut _cef_completion_callback_t)
                                                              ->
                                                                  *mut _cef_cookie_manager_t>,
    ///
    pub register_scheme_handler_factory: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                        *mut _cef_request_context_t,
                                                                                    scheme_name:
                                                                                        *const cef_string_t,
                                                                                    domain_name:
                                                                                        *const cef_string_t,
                                                                                    factory:
                                                                                        *mut _cef_scheme_handler_factory_t)
                                                                   ->
                                                                       ::std::os::raw::c_int>,
    ///
    pub clear_scheme_handler_factories: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                       *mut _cef_request_context_t)
                                                                  ->
                                                                      ::std::os::raw::c_int>,
    ///
    pub purge_plugin_list_cache: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                *mut _cef_request_context_t,
                                                                            reload_pages:
                                                                                ::std::os::raw::c_int)>,
    ///
    pub has_preference: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_request_context_t,
                                                                   name:
                                                                       *const cef_string_t)
                                                  -> ::std::os::raw::c_int>,
    ///
    pub get_preference: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_request_context_t,
                                                                   name:
                                                                       *const cef_string_t)
                                                  -> *mut _cef_value_t>,
    ///
    pub get_all_preferences: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            *mut _cef_request_context_t,
                                                                        include_defaults:
                                                                            ::std::os::raw::c_int)
                                                       ->
                                                           *mut _cef_dictionary_value_t>,
    ///
    pub can_set_preference: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           *mut _cef_request_context_t,
                                                                       name:
                                                                           *const cef_string_t)
                                                      ->
                                                          ::std::os::raw::c_int>,
    ///
    pub set_preference: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_request_context_t,
                                                                   name:
                                                                       *const cef_string_t,
                                                                   value:
                                                                       *mut _cef_value_t,
                                                                   error:
                                                                       *mut cef_string_t)
                                                  -> ::std::os::raw::c_int>,
    ///
    pub clear_certificate_exceptions: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                     *mut _cef_request_context_t,
                                                                                 callback:
                                                                                     *mut _cef_completion_callback_t)>,
    ///
    pub close_all_connections: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              *mut _cef_request_context_t,
                                                                          callback:
                                                                              *mut _cef_completion_callback_t)>,
    ///
    pub resolve_host: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_request_context_t,
                                                                 origin:
                                                                     *const cef_string_t,
                                                                 callback:
                                                                     *mut _cef_resolve_callback_t)>,
    ///
    pub resolve_host_cached: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            *mut _cef_request_context_t,
                                                                        origin:
                                                                            *const cef_string_t,
                                                                        resolved_ips:
                                                                            cef_string_list_t)
                                                       -> _bindgen_ty_9>,
}
#[test]
fn bindgen_test_layout__cef_request_context_t() {
    assert_eq!(::std::mem::size_of::<_cef_request_context_t>() , 176usize);
    assert_eq!(::std::mem::align_of::<_cef_request_context_t>() , 8usize);
}
impl Clone for _cef_request_context_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_request_context_t = _cef_request_context_t;
extern "C" {
    ///
    pub fn cef_request_context_get_global_context()
     -> *mut cef_request_context_t;
}
extern "C" {
    ///
    pub fn cef_request_context_create_context(settings:
                                                  *const _cef_request_context_settings_t,
                                              handler:
                                                  *mut _cef_request_context_handler_t)
     -> *mut cef_request_context_t;
}
extern "C" {
    ///
    pub fn cef_create_context_shared(other: *mut cef_request_context_t,
                                     handler:
                                         *mut _cef_request_context_handler_t)
     -> *mut cef_request_context_t;
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_browser_host_t {
    ///
    pub base: cef_base_t,
    ///
    pub get_browser: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_browser_host_t)
                                               -> *mut _cef_browser_t>,
    ///
    pub close_browser: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_browser_host_t,
                                                                  force_close:
                                                                      ::std::os::raw::c_int)>,
    ///
    pub try_close_browser: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_browser_host_t)
                                                     ->
                                                         ::std::os::raw::c_int>,
    ///
    pub set_focus: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_browser_host_t,
                                                              focus:
                                                                  ::std::os::raw::c_int)>,
    ///
    pub get_window_handle: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_browser_host_t)
                                                     ->
                                                         ::std::os::raw::c_ulong>,
    ///
    pub get_opener_window_handle: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                 *mut _cef_browser_host_t)
                                                            ->
                                                                ::std::os::raw::c_ulong>,
    ///
    pub has_view: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_browser_host_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub get_client: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_browser_host_t)
                                              -> *mut _cef_client_t>,
    ///
    pub get_request_context: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            *mut _cef_browser_host_t)
                                                       ->
                                                           *mut _cef_request_context_t>,
    ///
    pub get_zoom_level: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_browser_host_t)
                                                  -> f64>,
    ///
    pub set_zoom_level: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_browser_host_t,
                                                                   zoomLevel:
                                                                       f64)>,
    ///
    pub run_file_dialog: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_browser_host_t,
                                                                    mode:
                                                                        cef_file_dialog_mode_t,
                                                                    title:
                                                                        *const cef_string_t,
                                                                    default_file_path:
                                                                        *const cef_string_t,
                                                                    accept_filters:
                                                                        cef_string_list_t,
                                                                    selected_accept_filter:
                                                                        ::std::os::raw::c_int,
                                                                    callback:
                                                                        *mut _cef_run_file_dialog_callback_t)>,
    ///
    pub start_download: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_browser_host_t,
                                                                   url:
                                                                       *const cef_string_t)>,
    ///
    pub download_image: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_browser_host_t,
                                                                   image_url:
                                                                       *const cef_string_t,
                                                                   is_favicon:
                                                                       ::std::os::raw::c_int,
                                                                   max_image_size:
                                                                       uint32,
                                                                   bypass_cache:
                                                                       ::std::os::raw::c_int,
                                                                   callback:
                                                                       *mut _cef_download_image_callback_t)>,
    ///
    pub print: ::std::option::Option<unsafe extern "C" fn(self_:
                                                              *mut _cef_browser_host_t)>,
    ///
    pub print_to_pdf: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_browser_host_t,
                                                                 path:
                                                                     *const cef_string_t,
                                                                 settings:
                                                                     *const _cef_pdf_print_settings_t,
                                                                 callback:
                                                                     *mut _cef_pdf_print_callback_t)>,
    ///
    pub find: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_browser_host_t,
                                                         identifier:
                                                             ::std::os::raw::c_int,
                                                         searchText:
                                                             *const cef_string_t,
                                                         forward:
                                                             ::std::os::raw::c_int,
                                                         matchCase:
                                                             ::std::os::raw::c_int,
                                                         findNext:
                                                             ::std::os::raw::c_int)>,
    ///
    pub stop_finding: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_browser_host_t,
                                                                 clearSelection:
                                                                     ::std::os::raw::c_int)>,
    ///
    pub show_dev_tools: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_browser_host_t,
                                                                   windowInfo:
                                                                       *const _cef_window_info_t,
                                                                   client:
                                                                       *mut _cef_client_t,
                                                                   settings:
                                                                       *const _cef_browser_settings_t,
                                                                   inspect_element_at:
                                                                       *const cef_point_t)>,
    ///
    pub close_dev_tools: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_browser_host_t)>,
    ///
    pub has_dev_tools: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_browser_host_t)
                                                 -> ::std::os::raw::c_int>,
    ///
    pub get_navigation_entries: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                               *mut _cef_browser_host_t,
                                                                           visitor:
                                                                               *mut _cef_navigation_entry_visitor_t,
                                                                           current_only:
                                                                               ::std::os::raw::c_int)>,
    ///
    pub set_mouse_cursor_change_disabled: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                         *mut _cef_browser_host_t,
                                                                                     disabled:
                                                                                         ::std::os::raw::c_int)>,
    ///
    pub is_mouse_cursor_change_disabled: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                        *mut _cef_browser_host_t)
                                                                   ->
                                                                       ::std::os::raw::c_int>,
    ///
    pub replace_misspelling: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            *mut _cef_browser_host_t,
                                                                        word:
                                                                            *const cef_string_t)>,
    ///
    pub add_word_to_dictionary: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                               *mut _cef_browser_host_t,
                                                                           word:
                                                                               *const cef_string_t)>,
    ///
    pub is_window_rendering_disabled: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                     *mut _cef_browser_host_t)
                                                                ->
                                                                    ::std::os::raw::c_int>,
    ///
    pub was_resized: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_browser_host_t)>,
    ///
    pub was_hidden: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_browser_host_t,
                                                               hidden:
                                                                   ::std::os::raw::c_int)>,
    ///
    pub notify_screen_info_changed: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                   *mut _cef_browser_host_t)>,
    ///
    pub invalidate: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_browser_host_t,
                                                               type_:
                                                                   cef_paint_element_type_t)>,
    ///
    pub send_key_event: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_browser_host_t,
                                                                   event:
                                                                       *const _cef_key_event_t)>,
    ///
    pub send_mouse_click_event: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                               *mut _cef_browser_host_t,
                                                                           event:
                                                                               *const _cef_mouse_event_t,
                                                                           type_:
                                                                               cef_mouse_button_type_t,
                                                                           mouseUp:
                                                                               ::std::os::raw::c_int,
                                                                           clickCount:
                                                                               ::std::os::raw::c_int)>,
    ///
    pub send_mouse_move_event: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              *mut _cef_browser_host_t,
                                                                          event:
                                                                              *const _cef_mouse_event_t,
                                                                          mouseLeave:
                                                                              ::std::os::raw::c_int)>,
    ///
    pub send_mouse_wheel_event: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                               *mut _cef_browser_host_t,
                                                                           event:
                                                                               *const _cef_mouse_event_t,
                                                                           deltaX:
                                                                               ::std::os::raw::c_int,
                                                                           deltaY:
                                                                               ::std::os::raw::c_int)>,
    ///
    pub send_focus_event: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_browser_host_t,
                                                                     setFocus:
                                                                         ::std::os::raw::c_int)>,
    ///
    pub send_capture_lost_event: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                *mut _cef_browser_host_t)>,
    ///
    pub notify_move_or_resize_started: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                      *mut _cef_browser_host_t)>,
    ///
    pub get_windowless_frame_rate: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                  *mut _cef_browser_host_t)
                                                             ->
                                                                 ::std::os::raw::c_int>,
    ///
    pub set_windowless_frame_rate: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                  *mut _cef_browser_host_t,
                                                                              frame_rate:
                                                                                  ::std::os::raw::c_int)>,
    ///
    pub ime_set_composition: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            *mut _cef_browser_host_t,
                                                                        text:
                                                                            *const cef_string_t,
                                                                        underlinesCount:
                                                                            usize,
                                                                        underlines:
                                                                            *const cef_composition_underline_t,
                                                                        replacement_range:
                                                                            *const cef_range_t,
                                                                        selection_range:
                                                                            *const cef_range_t)>,
    ///
    pub ime_commit_text: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_browser_host_t,
                                                                    text:
                                                                        *const cef_string_t,
                                                                    replacement_range:
                                                                        *const cef_range_t,
                                                                    relative_cursor_pos:
                                                                        ::std::os::raw::c_int)>,
    ///
    pub ime_finish_composing_text: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                  *mut _cef_browser_host_t,
                                                                              keep_selection:
                                                                                  ::std::os::raw::c_int)>,
    ///
    pub ime_cancel_composition: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                               *mut _cef_browser_host_t)>,
    ///
    pub drag_target_drag_enter: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                               *mut _cef_browser_host_t,
                                                                           drag_data:
                                                                               *mut _cef_drag_data_t,
                                                                           event:
                                                                               *const _cef_mouse_event_t,
                                                                           allowed_ops:
                                                                               cef_drag_operations_mask_t)>,
    ///
    pub drag_target_drag_over: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              *mut _cef_browser_host_t,
                                                                          event:
                                                                              *const _cef_mouse_event_t,
                                                                          allowed_ops:
                                                                              cef_drag_operations_mask_t)>,
    ///
    pub drag_target_drag_leave: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                               *mut _cef_browser_host_t)>,
    ///
    pub drag_target_drop: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_browser_host_t,
                                                                     event:
                                                                         *const _cef_mouse_event_t)>,
    ///
    pub drag_source_ended_at: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_browser_host_t,
                                                                         x:
                                                                             ::std::os::raw::c_int,
                                                                         y:
                                                                             ::std::os::raw::c_int,
                                                                         op:
                                                                             cef_drag_operations_mask_t)>,
    ///
    pub drag_source_system_drag_ended: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                      *mut _cef_browser_host_t)>,
    ///
    pub get_visible_navigation_entry: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                     *mut _cef_browser_host_t)
                                                                ->
                                                                    *mut _cef_navigation_entry_t>,
}
#[test]
fn bindgen_test_layout__cef_browser_host_t() {
    assert_eq!(::std::mem::size_of::<_cef_browser_host_t>() , 440usize);
    assert_eq!(::std::mem::align_of::<_cef_browser_host_t>() , 8usize);
}
impl Clone for _cef_browser_host_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_client_t {
    ///
    pub base: cef_base_t,
    ///
    pub get_context_menu_handler: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                 *mut _cef_client_t)
                                                            ->
                                                                *mut _cef_context_menu_handler_t>,
    ///
    pub get_dialog_handler: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           *mut _cef_client_t)
                                                      ->
                                                          *mut _cef_dialog_handler_t>,
    ///
    pub get_display_handler: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            *mut _cef_client_t)
                                                       ->
                                                           *mut _cef_display_handler_t>,
    ///
    pub get_download_handler: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_client_t)
                                                        ->
                                                            *mut _cef_download_handler_t>,
    ///
    pub get_drag_handler: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_client_t)
                                                    ->
                                                        *mut _cef_drag_handler_t>,
    ///
    pub get_find_handler: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_client_t)
                                                    ->
                                                        *mut _cef_find_handler_t>,
    ///
    pub get_focus_handler: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_client_t)
                                                     ->
                                                         *mut _cef_focus_handler_t>,
    ///
    pub get_geolocation_handler: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                *mut _cef_client_t)
                                                           ->
                                                               *mut _cef_geolocation_handler_t>,
    ///
    pub get_jsdialog_handler: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_client_t)
                                                        ->
                                                            *mut _cef_jsdialog_handler_t>,
    ///
    pub get_keyboard_handler: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_client_t)
                                                        ->
                                                            *mut _cef_keyboard_handler_t>,
    ///
    pub get_life_span_handler: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              *mut _cef_client_t)
                                                         ->
                                                             *mut _cef_life_span_handler_t>,
    ///
    pub get_load_handler: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_client_t)
                                                    ->
                                                        *mut _cef_load_handler_t>,
    ///
    pub get_render_handler: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           *mut _cef_client_t)
                                                      ->
                                                          *mut _cef_render_handler_t>,
    ///
    pub get_request_handler: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            *mut _cef_client_t)
                                                       ->
                                                           *mut _cef_request_handler_t>,
    ///
    pub on_process_message_received: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                    *mut _cef_client_t,
                                                                                browser:
                                                                                    *mut _cef_browser_t,
                                                                                source_process:
                                                                                    cef_process_id_t,
                                                                                message:
                                                                                    *mut _cef_process_message_t)
                                                               ->
                                                                   ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_client_t() {
    assert_eq!(::std::mem::size_of::<_cef_client_t>() , 152usize);
    assert_eq!(::std::mem::align_of::<_cef_client_t>() , 8usize);
}
impl Clone for _cef_client_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_browser_t = _cef_browser_t;
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_run_file_dialog_callback_t {
    ///
    pub base: cef_base_t,
    ///
    pub on_file_dialog_dismissed: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                 *mut _cef_run_file_dialog_callback_t,
                                                                             selected_accept_filter:
                                                                                 ::std::os::raw::c_int,
                                                                             file_paths:
                                                                                 cef_string_list_t)>,
}
#[test]
fn bindgen_test_layout__cef_run_file_dialog_callback_t() {
    assert_eq!(::std::mem::size_of::<_cef_run_file_dialog_callback_t>() ,
               40usize);
    assert_eq!(::std::mem::align_of::<_cef_run_file_dialog_callback_t>() ,
               8usize);
}
impl Clone for _cef_run_file_dialog_callback_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_navigation_entry_visitor_t {
    ///
    pub base: cef_base_t,
    ///
    pub visit: ::std::option::Option<unsafe extern "C" fn(self_:
                                                              *mut _cef_navigation_entry_visitor_t,
                                                          entry:
                                                              *mut _cef_navigation_entry_t,
                                                          current:
                                                              ::std::os::raw::c_int,
                                                          index:
                                                              ::std::os::raw::c_int,
                                                          total:
                                                              ::std::os::raw::c_int)
                                         -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_navigation_entry_visitor_t() {
    assert_eq!(::std::mem::size_of::<_cef_navigation_entry_visitor_t>() ,
               40usize);
    assert_eq!(::std::mem::align_of::<_cef_navigation_entry_visitor_t>() ,
               8usize);
}
impl Clone for _cef_navigation_entry_visitor_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_pdf_print_callback_t {
    ///
    pub base: cef_base_t,
    ///
    pub on_pdf_print_finished: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              *mut _cef_pdf_print_callback_t,
                                                                          path:
                                                                              *const cef_string_t,
                                                                          ok:
                                                                              ::std::os::raw::c_int)>,
}
#[test]
fn bindgen_test_layout__cef_pdf_print_callback_t() {
    assert_eq!(::std::mem::size_of::<_cef_pdf_print_callback_t>() , 40usize);
    assert_eq!(::std::mem::align_of::<_cef_pdf_print_callback_t>() , 8usize);
}
impl Clone for _cef_pdf_print_callback_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_download_image_callback_t {
    ///
    pub base: cef_base_t,
    ///
    pub on_download_image_finished: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                   *mut _cef_download_image_callback_t,
                                                                               image_url:
                                                                                   *const cef_string_t,
                                                                               http_status_code:
                                                                                   ::std::os::raw::c_int,
                                                                               image:
                                                                                   *mut _cef_image_t)>,
}
#[test]
fn bindgen_test_layout__cef_download_image_callback_t() {
    assert_eq!(::std::mem::size_of::<_cef_download_image_callback_t>() ,
               40usize);
    assert_eq!(::std::mem::align_of::<_cef_download_image_callback_t>() ,
               8usize);
}
impl Clone for _cef_download_image_callback_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    ///
    pub fn cef_browser_host_create_browser(windowInfo:
                                               *const cef_window_info_t,
                                           client: *mut _cef_client_t,
                                           url: *const cef_string_t,
                                           settings:
                                               *const _cef_browser_settings_t,
                                           request_context:
                                               *mut _cef_request_context_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    ///
    pub fn cef_browser_host_create_browser_sync(windowInfo:
                                                    *const cef_window_info_t,
                                                client: *mut _cef_client_t,
                                                url: *const cef_string_t,
                                                settings:
                                                    *const _cef_browser_settings_t,
                                                request_context:
                                                    *mut _cef_request_context_t)
     -> *mut cef_browser_t;
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_print_settings_t {
    ///
    pub base: cef_base_t,
    ///
    pub is_valid: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_print_settings_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub is_read_only: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_print_settings_t)
                                                -> ::std::os::raw::c_int>,
    ///
    pub copy: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_print_settings_t)
                                        -> *mut _cef_print_settings_t>,
    ///
    pub set_orientation: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_print_settings_t,
                                                                    landscape:
                                                                        ::std::os::raw::c_int)>,
    ///
    pub is_landscape: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_print_settings_t)
                                                -> ::std::os::raw::c_int>,
    ///
    pub set_printer_printable_area: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                   *mut _cef_print_settings_t,
                                                                               physical_size_device_units:
                                                                                   *const cef_size_t,
                                                                               printable_area_device_units:
                                                                                   *const cef_rect_t,
                                                                               landscape_needs_flip:
                                                                                   ::std::os::raw::c_int)>,
    ///
    pub set_device_name: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_print_settings_t,
                                                                    name:
                                                                        *const cef_string_t)>,
    ///
    pub get_device_name: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_print_settings_t)
                                                   ->
                                                       *mut _cef_string_utf16_t>,
    ///
    pub set_dpi: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_print_settings_t,
                                                            dpi:
                                                                ::std::os::raw::c_int)>,
    ///
    pub get_dpi: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_print_settings_t)
                                           -> ::std::os::raw::c_int>,
    ///
    pub set_page_ranges: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_print_settings_t,
                                                                    rangesCount:
                                                                        usize,
                                                                    ranges:
                                                                        *const cef_range_t)>,
    ///
    pub get_page_ranges_count: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              *mut _cef_print_settings_t)
                                                         ->
                                                             ::std::os::raw::c_ulong>,
    ///
    pub get_page_ranges: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_print_settings_t,
                                                                    rangesCount:
                                                                        *mut usize,
                                                                    ranges:
                                                                        *mut cef_range_t)>,
    ///
    pub set_selection_only: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           *mut _cef_print_settings_t,
                                                                       selection_only:
                                                                           ::std::os::raw::c_int)>,
    ///
    pub is_selection_only: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_print_settings_t)
                                                     ->
                                                         ::std::os::raw::c_int>,
    ///
    pub set_collate: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_print_settings_t,
                                                                collate:
                                                                    ::std::os::raw::c_int)>,
    ///
    pub will_collate: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_print_settings_t)
                                                -> ::std::os::raw::c_int>,
    ///
    pub set_color_model: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_print_settings_t,
                                                                    model:
                                                                        cef_color_model_t)>,
    ///
    pub get_color_model: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_print_settings_t)
                                                   -> _bindgen_ty_47>,
    ///
    pub set_copies: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_print_settings_t,
                                                               copies:
                                                                   ::std::os::raw::c_int)>,
    ///
    pub get_copies: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_print_settings_t)
                                              -> ::std::os::raw::c_int>,
    ///
    pub set_duplex_mode: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_print_settings_t,
                                                                    mode:
                                                                        cef_duplex_mode_t)>,
    ///
    pub get_duplex_mode: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_print_settings_t)
                                                   -> _bindgen_ty_48>,
}
#[test]
fn bindgen_test_layout__cef_print_settings_t() {
    assert_eq!(::std::mem::size_of::<_cef_print_settings_t>() , 216usize);
    assert_eq!(::std::mem::align_of::<_cef_print_settings_t>() , 8usize);
}
impl Clone for _cef_print_settings_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_print_settings_t = _cef_print_settings_t;
extern "C" {
    ///
    pub fn cef_print_settings_create() -> *mut cef_print_settings_t;
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_print_dialog_callback_t {
    ///
    pub base: cef_base_t,
    ///
    pub cont: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_print_dialog_callback_t,
                                                         settings:
                                                             *mut _cef_print_settings_t)>,
    ///
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                               *mut _cef_print_dialog_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_print_dialog_callback_t() {
    assert_eq!(::std::mem::size_of::<_cef_print_dialog_callback_t>() ,
               48usize);
    assert_eq!(::std::mem::align_of::<_cef_print_dialog_callback_t>() ,
               8usize);
}
impl Clone for _cef_print_dialog_callback_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_print_job_callback_t {
    ///
    pub base: cef_base_t,
    ///
    pub cont: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_print_job_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_print_job_callback_t() {
    assert_eq!(::std::mem::size_of::<_cef_print_job_callback_t>() , 40usize);
    assert_eq!(::std::mem::align_of::<_cef_print_job_callback_t>() , 8usize);
}
impl Clone for _cef_print_job_callback_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_print_handler_t {
    ///
    pub base: cef_base_t,
    ///
    pub on_print_start: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_print_handler_t,
                                                                   browser:
                                                                       *mut _cef_browser_t)>,
    ///
    pub on_print_settings: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_print_handler_t,
                                                                      settings:
                                                                          *mut _cef_print_settings_t,
                                                                      get_defaults:
                                                                          ::std::os::raw::c_int)>,
    ///
    pub on_print_dialog: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_print_handler_t,
                                                                    has_selection:
                                                                        ::std::os::raw::c_int,
                                                                    callback:
                                                                        *mut _cef_print_dialog_callback_t)
                                                   -> ::std::os::raw::c_int>,
    ///
    pub on_print_job: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_print_handler_t,
                                                                 document_name:
                                                                     *const cef_string_t,
                                                                 pdf_file_path:
                                                                     *const cef_string_t,
                                                                 callback:
                                                                     *mut _cef_print_job_callback_t)
                                                -> ::std::os::raw::c_int>,
    ///
    pub on_print_reset: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_print_handler_t)>,
    ///
    pub get_pdf_paper_size: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           *mut _cef_print_handler_t,
                                                                       device_units_per_inch:
                                                                           ::std::os::raw::c_int)
                                                      -> _cef_size_t>,
}
#[test]
fn bindgen_test_layout__cef_print_handler_t() {
    assert_eq!(::std::mem::size_of::<_cef_print_handler_t>() , 80usize);
    assert_eq!(::std::mem::align_of::<_cef_print_handler_t>() , 8usize);
}
impl Clone for _cef_print_handler_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_menu_model_t {
    ///
    pub base: cef_base_t,
    ///
    pub clear: ::std::option::Option<unsafe extern "C" fn(self_:
                                                              *mut _cef_menu_model_t)
                                         -> ::std::os::raw::c_int>,
    ///
    pub get_count: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_menu_model_t)
                                             -> ::std::os::raw::c_int>,
    ///
    pub add_separator: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_menu_model_t)
                                                 -> ::std::os::raw::c_int>,
    ///
    pub add_item: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_menu_model_t,
                                                             command_id:
                                                                 ::std::os::raw::c_int,
                                                             label:
                                                                 *const cef_string_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub add_check_item: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_menu_model_t,
                                                                   command_id:
                                                                       ::std::os::raw::c_int,
                                                                   label:
                                                                       *const cef_string_t)
                                                  -> ::std::os::raw::c_int>,
    ///
    pub add_radio_item: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_menu_model_t,
                                                                   command_id:
                                                                       ::std::os::raw::c_int,
                                                                   label:
                                                                       *const cef_string_t,
                                                                   group_id:
                                                                       ::std::os::raw::c_int)
                                                  -> ::std::os::raw::c_int>,
    ///
    pub add_sub_menu: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_menu_model_t,
                                                                 command_id:
                                                                     ::std::os::raw::c_int,
                                                                 label:
                                                                     *const cef_string_t)
                                                -> *mut _cef_menu_model_t>,
    ///
    pub insert_separator_at: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            *mut _cef_menu_model_t,
                                                                        index:
                                                                            ::std::os::raw::c_int)
                                                       ->
                                                           ::std::os::raw::c_int>,
    ///
    pub insert_item_at: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_menu_model_t,
                                                                   index:
                                                                       ::std::os::raw::c_int,
                                                                   command_id:
                                                                       ::std::os::raw::c_int,
                                                                   label:
                                                                       *const cef_string_t)
                                                  -> ::std::os::raw::c_int>,
    ///
    pub insert_check_item_at: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_menu_model_t,
                                                                         index:
                                                                             ::std::os::raw::c_int,
                                                                         command_id:
                                                                             ::std::os::raw::c_int,
                                                                         label:
                                                                             *const cef_string_t)
                                                        ->
                                                            ::std::os::raw::c_int>,
    ///
    pub insert_radio_item_at: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_menu_model_t,
                                                                         index:
                                                                             ::std::os::raw::c_int,
                                                                         command_id:
                                                                             ::std::os::raw::c_int,
                                                                         label:
                                                                             *const cef_string_t,
                                                                         group_id:
                                                                             ::std::os::raw::c_int)
                                                        ->
                                                            ::std::os::raw::c_int>,
    ///
    pub insert_sub_menu_at: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           *mut _cef_menu_model_t,
                                                                       index:
                                                                           ::std::os::raw::c_int,
                                                                       command_id:
                                                                           ::std::os::raw::c_int,
                                                                       label:
                                                                           *const cef_string_t)
                                                      ->
                                                          *mut _cef_menu_model_t>,
    ///
    pub remove: ::std::option::Option<unsafe extern "C" fn(self_:
                                                               *mut _cef_menu_model_t,
                                                           command_id:
                                                               ::std::os::raw::c_int)
                                          -> ::std::os::raw::c_int>,
    ///
    pub remove_at: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_menu_model_t,
                                                              index:
                                                                  ::std::os::raw::c_int)
                                             -> ::std::os::raw::c_int>,
    ///
    pub get_index_of: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_menu_model_t,
                                                                 command_id:
                                                                     ::std::os::raw::c_int)
                                                -> ::std::os::raw::c_int>,
    ///
    pub get_command_id_at: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_menu_model_t,
                                                                      index:
                                                                          ::std::os::raw::c_int)
                                                     ->
                                                         ::std::os::raw::c_int>,
    ///
    pub set_command_id_at: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_menu_model_t,
                                                                      index:
                                                                          ::std::os::raw::c_int,
                                                                      command_id:
                                                                          ::std::os::raw::c_int)
                                                     ->
                                                         ::std::os::raw::c_int>,
    ///
    pub get_label: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_menu_model_t,
                                                              command_id:
                                                                  ::std::os::raw::c_int)
                                             -> *mut _cef_string_utf16_t>,
    ///
    pub get_label_at: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_menu_model_t,
                                                                 index:
                                                                     ::std::os::raw::c_int)
                                                -> *mut _cef_string_utf16_t>,
    ///
    pub set_label: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_menu_model_t,
                                                              command_id:
                                                                  ::std::os::raw::c_int,
                                                              label:
                                                                  *const cef_string_t)
                                             -> ::std::os::raw::c_int>,
    ///
    pub set_label_at: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_menu_model_t,
                                                                 index:
                                                                     ::std::os::raw::c_int,
                                                                 label:
                                                                     *const cef_string_t)
                                                -> ::std::os::raw::c_int>,
    ///
    pub get_type: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_menu_model_t,
                                                             command_id:
                                                                 ::std::os::raw::c_int)
                                            -> _bindgen_ty_31>,
    ///
    pub get_type_at: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_menu_model_t,
                                                                index:
                                                                    ::std::os::raw::c_int)
                                               -> _bindgen_ty_31>,
    ///
    pub get_group_id: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_menu_model_t,
                                                                 command_id:
                                                                     ::std::os::raw::c_int)
                                                -> ::std::os::raw::c_int>,
    ///
    pub get_group_id_at: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_menu_model_t,
                                                                    index:
                                                                        ::std::os::raw::c_int)
                                                   -> ::std::os::raw::c_int>,
    ///
    pub set_group_id: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_menu_model_t,
                                                                 command_id:
                                                                     ::std::os::raw::c_int,
                                                                 group_id:
                                                                     ::std::os::raw::c_int)
                                                -> ::std::os::raw::c_int>,
    ///
    pub set_group_id_at: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_menu_model_t,
                                                                    index:
                                                                        ::std::os::raw::c_int,
                                                                    group_id:
                                                                        ::std::os::raw::c_int)
                                                   -> ::std::os::raw::c_int>,
    ///
    pub get_sub_menu: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_menu_model_t,
                                                                 command_id:
                                                                     ::std::os::raw::c_int)
                                                -> *mut _cef_menu_model_t>,
    ///
    pub get_sub_menu_at: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_menu_model_t,
                                                                    index:
                                                                        ::std::os::raw::c_int)
                                                   -> *mut _cef_menu_model_t>,
    ///
    pub is_visible: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_menu_model_t,
                                                               command_id:
                                                                   ::std::os::raw::c_int)
                                              -> ::std::os::raw::c_int>,
    ///
    pub is_visible_at: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_menu_model_t,
                                                                  index:
                                                                      ::std::os::raw::c_int)
                                                 -> ::std::os::raw::c_int>,
    ///
    pub set_visible: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_menu_model_t,
                                                                command_id:
                                                                    ::std::os::raw::c_int,
                                                                visible:
                                                                    ::std::os::raw::c_int)
                                               -> ::std::os::raw::c_int>,
    ///
    pub set_visible_at: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_menu_model_t,
                                                                   index:
                                                                       ::std::os::raw::c_int,
                                                                   visible:
                                                                       ::std::os::raw::c_int)
                                                  -> ::std::os::raw::c_int>,
    ///
    pub is_enabled: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_menu_model_t,
                                                               command_id:
                                                                   ::std::os::raw::c_int)
                                              -> ::std::os::raw::c_int>,
    ///
    pub is_enabled_at: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_menu_model_t,
                                                                  index:
                                                                      ::std::os::raw::c_int)
                                                 -> ::std::os::raw::c_int>,
    ///
    pub set_enabled: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_menu_model_t,
                                                                command_id:
                                                                    ::std::os::raw::c_int,
                                                                enabled:
                                                                    ::std::os::raw::c_int)
                                               -> ::std::os::raw::c_int>,
    ///
    pub set_enabled_at: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_menu_model_t,
                                                                   index:
                                                                       ::std::os::raw::c_int,
                                                                   enabled:
                                                                       ::std::os::raw::c_int)
                                                  -> ::std::os::raw::c_int>,
    ///
    pub is_checked: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_menu_model_t,
                                                               command_id:
                                                                   ::std::os::raw::c_int)
                                              -> ::std::os::raw::c_int>,
    ///
    pub is_checked_at: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_menu_model_t,
                                                                  index:
                                                                      ::std::os::raw::c_int)
                                                 -> ::std::os::raw::c_int>,
    ///
    pub set_checked: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_menu_model_t,
                                                                command_id:
                                                                    ::std::os::raw::c_int,
                                                                checked:
                                                                    ::std::os::raw::c_int)
                                               -> ::std::os::raw::c_int>,
    ///
    pub set_checked_at: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_menu_model_t,
                                                                   index:
                                                                       ::std::os::raw::c_int,
                                                                   checked:
                                                                       ::std::os::raw::c_int)
                                                  -> ::std::os::raw::c_int>,
    ///
    pub has_accelerator: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_menu_model_t,
                                                                    command_id:
                                                                        ::std::os::raw::c_int)
                                                   -> ::std::os::raw::c_int>,
    ///
    pub has_accelerator_at: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           *mut _cef_menu_model_t,
                                                                       index:
                                                                           ::std::os::raw::c_int)
                                                      ->
                                                          ::std::os::raw::c_int>,
    ///
    pub set_accelerator: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_menu_model_t,
                                                                    command_id:
                                                                        ::std::os::raw::c_int,
                                                                    key_code:
                                                                        ::std::os::raw::c_int,
                                                                    shift_pressed:
                                                                        ::std::os::raw::c_int,
                                                                    ctrl_pressed:
                                                                        ::std::os::raw::c_int,
                                                                    alt_pressed:
                                                                        ::std::os::raw::c_int)
                                                   -> ::std::os::raw::c_int>,
    ///
    pub set_accelerator_at: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           *mut _cef_menu_model_t,
                                                                       index:
                                                                           ::std::os::raw::c_int,
                                                                       key_code:
                                                                           ::std::os::raw::c_int,
                                                                       shift_pressed:
                                                                           ::std::os::raw::c_int,
                                                                       ctrl_pressed:
                                                                           ::std::os::raw::c_int,
                                                                       alt_pressed:
                                                                           ::std::os::raw::c_int)
                                                      ->
                                                          ::std::os::raw::c_int>,
    ///
    pub remove_accelerator: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           *mut _cef_menu_model_t,
                                                                       command_id:
                                                                           ::std::os::raw::c_int)
                                                      ->
                                                          ::std::os::raw::c_int>,
    ///
    pub remove_accelerator_at: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              *mut _cef_menu_model_t,
                                                                          index:
                                                                              ::std::os::raw::c_int)
                                                         ->
                                                             ::std::os::raw::c_int>,
    ///
    pub get_accelerator: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_menu_model_t,
                                                                    command_id:
                                                                        ::std::os::raw::c_int,
                                                                    key_code:
                                                                        *mut ::std::os::raw::c_int,
                                                                    shift_pressed:
                                                                        *mut ::std::os::raw::c_int,
                                                                    ctrl_pressed:
                                                                        *mut ::std::os::raw::c_int,
                                                                    alt_pressed:
                                                                        *mut ::std::os::raw::c_int)
                                                   -> ::std::os::raw::c_int>,
    ///
    pub get_accelerator_at: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           *mut _cef_menu_model_t,
                                                                       index:
                                                                           ::std::os::raw::c_int,
                                                                       key_code:
                                                                           *mut ::std::os::raw::c_int,
                                                                       shift_pressed:
                                                                           *mut ::std::os::raw::c_int,
                                                                       ctrl_pressed:
                                                                           *mut ::std::os::raw::c_int,
                                                                       alt_pressed:
                                                                           *mut ::std::os::raw::c_int)
                                                      ->
                                                          ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_menu_model_t() {
    assert_eq!(::std::mem::size_of::<_cef_menu_model_t>() , 424usize);
    assert_eq!(::std::mem::align_of::<_cef_menu_model_t>() , 8usize);
}
impl Clone for _cef_menu_model_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_menu_model_delegate_t {
    ///
    pub base: cef_base_t,
    ///
    pub execute_command: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_menu_model_delegate_t,
                                                                    menu_model:
                                                                        *mut _cef_menu_model_t,
                                                                    command_id:
                                                                        ::std::os::raw::c_int,
                                                                    event_flags:
                                                                        cef_event_flags_t)>,
    ///
    pub menu_will_show: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_menu_model_delegate_t,
                                                                   menu_model:
                                                                       *mut _cef_menu_model_t)>,
    ///
    pub menu_closed: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_menu_model_delegate_t,
                                                                menu_model:
                                                                    *mut _cef_menu_model_t)>,
    ///
    pub format_label: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_menu_model_delegate_t,
                                                                 menu_model:
                                                                     *mut _cef_menu_model_t,
                                                                 label:
                                                                     *mut cef_string_t)
                                                -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_menu_model_delegate_t() {
    assert_eq!(::std::mem::size_of::<_cef_menu_model_delegate_t>() , 64usize);
    assert_eq!(::std::mem::align_of::<_cef_menu_model_delegate_t>() , 8usize);
}
impl Clone for _cef_menu_model_delegate_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_menu_model_t = _cef_menu_model_t;
extern "C" {
    ///
    pub fn cef_menu_model_create(delegate: *mut _cef_menu_model_delegate_t)
     -> *mut cef_menu_model_t;
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_context_menu_params_t {
    ///
    pub base: cef_base_t,
    ///
    pub get_xcoord: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_context_menu_params_t)
                                              -> ::std::os::raw::c_int>,
    ///
    pub get_ycoord: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_context_menu_params_t)
                                              -> ::std::os::raw::c_int>,
    ///
    pub get_type_flags: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_context_menu_params_t)
                                                  -> _bindgen_ty_32>,
    ///
    pub get_link_url: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_context_menu_params_t)
                                                -> *mut _cef_string_utf16_t>,
    ///
    pub get_unfiltered_link_url: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                *mut _cef_context_menu_params_t)
                                                           ->
                                                               *mut _cef_string_utf16_t>,
    ///
    pub get_source_url: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_context_menu_params_t)
                                                  ->
                                                      *mut _cef_string_utf16_t>,
    ///
    pub has_image_contents: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           *mut _cef_context_menu_params_t)
                                                      ->
                                                          ::std::os::raw::c_int>,
    ///
    pub get_title_text: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_context_menu_params_t)
                                                  ->
                                                      *mut _cef_string_utf16_t>,
    ///
    pub get_page_url: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_context_menu_params_t)
                                                -> *mut _cef_string_utf16_t>,
    ///
    pub get_frame_url: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_context_menu_params_t)
                                                 -> *mut _cef_string_utf16_t>,
    ///
    pub get_frame_charset: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_context_menu_params_t)
                                                     ->
                                                         *mut _cef_string_utf16_t>,
    ///
    pub get_media_type: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_context_menu_params_t)
                                                  -> _bindgen_ty_33>,
    ///
    pub get_media_state_flags: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              *mut _cef_context_menu_params_t)
                                                         -> _bindgen_ty_34>,
    ///
    pub get_selection_text: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           *mut _cef_context_menu_params_t)
                                                      ->
                                                          *mut _cef_string_utf16_t>,
    ///
    pub get_misspelled_word: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            *mut _cef_context_menu_params_t)
                                                       ->
                                                           *mut _cef_string_utf16_t>,
    ///
    pub get_dictionary_suggestions: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                   *mut _cef_context_menu_params_t,
                                                                               suggestions:
                                                                                   cef_string_list_t)
                                                              ->
                                                                  ::std::os::raw::c_int>,
    ///
    pub is_editable: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_context_menu_params_t)
                                               -> ::std::os::raw::c_int>,
    ///
    pub is_spell_check_enabled: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                               *mut _cef_context_menu_params_t)
                                                          ->
                                                              ::std::os::raw::c_int>,
    ///
    pub get_edit_state_flags: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_context_menu_params_t)
                                                        -> _bindgen_ty_35>,
    ///
    pub is_custom_menu: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_context_menu_params_t)
                                                  -> ::std::os::raw::c_int>,
    ///
    pub is_pepper_menu: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_context_menu_params_t)
                                                  -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_context_menu_params_t() {
    assert_eq!(::std::mem::size_of::<_cef_context_menu_params_t>() ,
               200usize);
    assert_eq!(::std::mem::align_of::<_cef_context_menu_params_t>() , 8usize);
}
impl Clone for _cef_context_menu_params_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_run_context_menu_callback_t {
    ///
    pub base: cef_base_t,
    ///
    pub cont: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_run_context_menu_callback_t,
                                                         command_id:
                                                             ::std::os::raw::c_int,
                                                         event_flags:
                                                             cef_event_flags_t)>,
    ///
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                               *mut _cef_run_context_menu_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_run_context_menu_callback_t() {
    assert_eq!(::std::mem::size_of::<_cef_run_context_menu_callback_t>() ,
               48usize);
    assert_eq!(::std::mem::align_of::<_cef_run_context_menu_callback_t>() ,
               8usize);
}
impl Clone for _cef_run_context_menu_callback_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_context_menu_handler_t {
    ///
    pub base: cef_base_t,
    ///
    pub on_before_context_menu: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                               *mut _cef_context_menu_handler_t,
                                                                           browser:
                                                                               *mut _cef_browser_t,
                                                                           frame:
                                                                               *mut _cef_frame_t,
                                                                           params:
                                                                               *mut _cef_context_menu_params_t,
                                                                           model:
                                                                               *mut _cef_menu_model_t)>,
    ///
    pub run_context_menu: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_context_menu_handler_t,
                                                                     browser:
                                                                         *mut _cef_browser_t,
                                                                     frame:
                                                                         *mut _cef_frame_t,
                                                                     params:
                                                                         *mut _cef_context_menu_params_t,
                                                                     model:
                                                                         *mut _cef_menu_model_t,
                                                                     callback:
                                                                         *mut _cef_run_context_menu_callback_t)
                                                    -> ::std::os::raw::c_int>,
    ///
    pub on_context_menu_command: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                *mut _cef_context_menu_handler_t,
                                                                            browser:
                                                                                *mut _cef_browser_t,
                                                                            frame:
                                                                                *mut _cef_frame_t,
                                                                            params:
                                                                                *mut _cef_context_menu_params_t,
                                                                            command_id:
                                                                                ::std::os::raw::c_int,
                                                                            event_flags:
                                                                                cef_event_flags_t)
                                                           ->
                                                               ::std::os::raw::c_int>,
    ///
    pub on_context_menu_dismissed: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                  *mut _cef_context_menu_handler_t,
                                                                              browser:
                                                                                  *mut _cef_browser_t,
                                                                              frame:
                                                                                  *mut _cef_frame_t)>,
}
#[test]
fn bindgen_test_layout__cef_context_menu_handler_t() {
    assert_eq!(::std::mem::size_of::<_cef_context_menu_handler_t>() ,
               64usize);
    assert_eq!(::std::mem::align_of::<_cef_context_menu_handler_t>() ,
               8usize);
}
impl Clone for _cef_context_menu_handler_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_command_line_t {
    ///
    pub base: cef_base_t,
    ///
    pub is_valid: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_command_line_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub is_read_only: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_command_line_t)
                                                -> ::std::os::raw::c_int>,
    ///
    pub copy: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_command_line_t)
                                        -> *mut _cef_command_line_t>,
    ///
    pub init_from_argv: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_command_line_t,
                                                                   argc:
                                                                       ::std::os::raw::c_int,
                                                                   argv:
                                                                       *const *const ::std::os::raw::c_char)>,
    ///
    pub init_from_string: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_command_line_t,
                                                                     command_line:
                                                                         *const cef_string_t)>,
    ///
    pub reset: ::std::option::Option<unsafe extern "C" fn(self_:
                                                              *mut _cef_command_line_t)>,
    ///
    pub get_argv: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_command_line_t,
                                                             argv:
                                                                 cef_string_list_t)>,
    ///
    pub get_command_line_string: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                *mut _cef_command_line_t)
                                                           ->
                                                               *mut _cef_string_utf16_t>,
    ///
    pub get_program: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_command_line_t)
                                               -> *mut _cef_string_utf16_t>,
    ///
    pub set_program: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_command_line_t,
                                                                program:
                                                                    *const cef_string_t)>,
    ///
    pub has_switches: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_command_line_t)
                                                -> ::std::os::raw::c_int>,
    ///
    pub has_switch: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_command_line_t,
                                                               name:
                                                                   *const cef_string_t)
                                              -> ::std::os::raw::c_int>,
    ///
    pub get_switch_value: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_command_line_t,
                                                                     name:
                                                                         *const cef_string_t)
                                                    ->
                                                        *mut _cef_string_utf16_t>,
    ///
    pub get_switches: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_command_line_t,
                                                                 switches:
                                                                     cef_string_map_t)>,
    ///
    pub append_switch: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_command_line_t,
                                                                  name:
                                                                      *const cef_string_t)>,
    ///
    pub append_switch_with_value: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                 *mut _cef_command_line_t,
                                                                             name:
                                                                                 *const cef_string_t,
                                                                             value:
                                                                                 *const cef_string_t)>,
    ///
    pub has_arguments: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_command_line_t)
                                                 -> ::std::os::raw::c_int>,
    ///
    pub get_arguments: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_command_line_t,
                                                                  arguments:
                                                                      cef_string_list_t)>,
    ///
    pub append_argument: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_command_line_t,
                                                                    argument:
                                                                        *const cef_string_t)>,
    ///
    pub prepend_wrapper: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_command_line_t,
                                                                    wrapper:
                                                                        *const cef_string_t)>,
}
#[test]
fn bindgen_test_layout__cef_command_line_t() {
    assert_eq!(::std::mem::size_of::<_cef_command_line_t>() , 192usize);
    assert_eq!(::std::mem::align_of::<_cef_command_line_t>() , 8usize);
}
impl Clone for _cef_command_line_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_command_line_t = _cef_command_line_t;
extern "C" {
    ///
    pub fn cef_command_line_create() -> *mut cef_command_line_t;
}
extern "C" {
    ///
    pub fn cef_command_line_get_global() -> *mut cef_command_line_t;
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_browser_process_handler_t {
    ///
    pub base: cef_base_t,
    ///
    pub on_context_initialized: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                               *mut _cef_browser_process_handler_t)>,
    ///
    pub on_before_child_process_launch: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                       *mut _cef_browser_process_handler_t,
                                                                                   command_line:
                                                                                       *mut _cef_command_line_t)>,
    ///
    pub on_render_process_thread_created: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                         *mut _cef_browser_process_handler_t,
                                                                                     extra_info:
                                                                                         *mut _cef_list_value_t)>,
    ///
    pub get_print_handler: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_browser_process_handler_t)
                                                     ->
                                                         *mut _cef_print_handler_t>,
    ///
    pub on_schedule_message_pump_work: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                      *mut _cef_browser_process_handler_t,
                                                                                  delay_ms:
                                                                                      int64)>,
}
#[test]
fn bindgen_test_layout__cef_browser_process_handler_t() {
    assert_eq!(::std::mem::size_of::<_cef_browser_process_handler_t>() ,
               72usize);
    assert_eq!(::std::mem::align_of::<_cef_browser_process_handler_t>() ,
               8usize);
}
impl Clone for _cef_browser_process_handler_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_load_handler_t {
    ///
    pub base: cef_base_t,
    ///
    pub on_loading_state_change: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                *mut _cef_load_handler_t,
                                                                            browser:
                                                                                *mut _cef_browser_t,
                                                                            isLoading:
                                                                                ::std::os::raw::c_int,
                                                                            canGoBack:
                                                                                ::std::os::raw::c_int,
                                                                            canGoForward:
                                                                                ::std::os::raw::c_int)>,
    ///
    pub on_load_start: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_load_handler_t,
                                                                  browser:
                                                                      *mut _cef_browser_t,
                                                                  frame:
                                                                      *mut _cef_frame_t,
                                                                  transition_type:
                                                                      cef_transition_type_t)>,
    ///
    pub on_load_end: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_load_handler_t,
                                                                browser:
                                                                    *mut _cef_browser_t,
                                                                frame:
                                                                    *mut _cef_frame_t,
                                                                httpStatusCode:
                                                                    ::std::os::raw::c_int)>,
    ///
    pub on_load_error: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_load_handler_t,
                                                                  browser:
                                                                      *mut _cef_browser_t,
                                                                  frame:
                                                                      *mut _cef_frame_t,
                                                                  errorCode:
                                                                      cef_errorcode_t,
                                                                  errorText:
                                                                      *const cef_string_t,
                                                                  failedUrl:
                                                                      *const cef_string_t)>,
}
#[test]
fn bindgen_test_layout__cef_load_handler_t() {
    assert_eq!(::std::mem::size_of::<_cef_load_handler_t>() , 64usize);
    assert_eq!(::std::mem::align_of::<_cef_load_handler_t>() , 8usize);
}
impl Clone for _cef_load_handler_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_task_t {
    ///
    pub base: cef_base_t,
    ///
    pub execute: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_task_t)>,
}
#[test]
fn bindgen_test_layout__cef_task_t() {
    assert_eq!(::std::mem::size_of::<_cef_task_t>() , 40usize);
    assert_eq!(::std::mem::align_of::<_cef_task_t>() , 8usize);
}
impl Clone for _cef_task_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_task_t = _cef_task_t;
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_task_runner_t {
    ///
    pub base: cef_base_t,
    ///
    pub is_same: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_task_runner_t,
                                                            that:
                                                                *mut _cef_task_runner_t)
                                           -> ::std::os::raw::c_int>,
    ///
    pub belongs_to_current_thread: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                  *mut _cef_task_runner_t)
                                                             ->
                                                                 ::std::os::raw::c_int>,
    ///
    pub belongs_to_thread: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_task_runner_t,
                                                                      threadId:
                                                                          cef_thread_id_t)
                                                     ->
                                                         ::std::os::raw::c_int>,
    ///
    pub post_task: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_task_runner_t,
                                                              task:
                                                                  *mut _cef_task_t)
                                             -> ::std::os::raw::c_int>,
    ///
    pub post_delayed_task: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_task_runner_t,
                                                                      task:
                                                                          *mut _cef_task_t,
                                                                      delay_ms:
                                                                          int64)
                                                     ->
                                                         ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_task_runner_t() {
    assert_eq!(::std::mem::size_of::<_cef_task_runner_t>() , 72usize);
    assert_eq!(::std::mem::align_of::<_cef_task_runner_t>() , 8usize);
}
impl Clone for _cef_task_runner_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_task_runner_t = _cef_task_runner_t;
extern "C" {
    ///
    pub fn cef_task_runner_get_for_current_thread() -> *mut cef_task_runner_t;
}
extern "C" {
    ///
    pub fn cef_task_runner_get_for_thread(threadId: cef_thread_id_t)
     -> *mut cef_task_runner_t;
}
extern "C" {
    ///
    pub fn cef_currently_on(threadId: cef_thread_id_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    ///
    pub fn cef_post_task(threadId: cef_thread_id_t, task: *mut cef_task_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    ///
    pub fn cef_post_delayed_task(threadId: cef_thread_id_t,
                                 task: *mut cef_task_t, delay_ms: int64)
     -> ::std::os::raw::c_int;
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_v8exception_t {
    ///
    pub base: cef_base_t,
    ///
    pub get_message: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_v8exception_t)
                                               -> *mut _cef_string_utf16_t>,
    ///
    pub get_source_line: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_v8exception_t)
                                                   ->
                                                       *mut _cef_string_utf16_t>,
    ///
    pub get_script_resource_name: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                 *mut _cef_v8exception_t)
                                                            ->
                                                                *mut _cef_string_utf16_t>,
    ///
    pub get_line_number: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_v8exception_t)
                                                   -> ::std::os::raw::c_int>,
    ///
    pub get_start_position: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           *mut _cef_v8exception_t)
                                                      ->
                                                          ::std::os::raw::c_int>,
    ///
    pub get_end_position: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_v8exception_t)
                                                    -> ::std::os::raw::c_int>,
    ///
    pub get_start_column: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_v8exception_t)
                                                    -> ::std::os::raw::c_int>,
    ///
    pub get_end_column: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_v8exception_t)
                                                  -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_v8exception_t() {
    assert_eq!(::std::mem::size_of::<_cef_v8exception_t>() , 96usize);
    assert_eq!(::std::mem::align_of::<_cef_v8exception_t>() , 8usize);
}
impl Clone for _cef_v8exception_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_v8handler_t {
    ///
    pub base: cef_base_t,
    ///
    pub execute: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_v8handler_t,
                                                            name:
                                                                *const cef_string_t,
                                                            object:
                                                                *mut _cef_v8value_t,
                                                            argumentsCount:
                                                                usize,
                                                            arguments:
                                                                *const *const _cef_v8value_t,
                                                            retval:
                                                                *mut *mut _cef_v8value_t,
                                                            exception:
                                                                *mut cef_string_t)
                                           -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_v8handler_t() {
    assert_eq!(::std::mem::size_of::<_cef_v8handler_t>() , 40usize);
    assert_eq!(::std::mem::align_of::<_cef_v8handler_t>() , 8usize);
}
impl Clone for _cef_v8handler_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_v8stack_frame_t {
    ///
    pub base: cef_base_t,
    ///
    pub is_valid: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_v8stack_frame_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub get_script_name: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_v8stack_frame_t)
                                                   ->
                                                       *mut _cef_string_utf16_t>,
    ///
    pub get_script_name_or_source_url: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                      *mut _cef_v8stack_frame_t)
                                                                 ->
                                                                     *mut _cef_string_utf16_t>,
    ///
    pub get_function_name: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_v8stack_frame_t)
                                                     ->
                                                         *mut _cef_string_utf16_t>,
    ///
    pub get_line_number: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_v8stack_frame_t)
                                                   -> ::std::os::raw::c_int>,
    ///
    pub get_column: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_v8stack_frame_t)
                                              -> ::std::os::raw::c_int>,
    ///
    pub is_eval: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_v8stack_frame_t)
                                           -> ::std::os::raw::c_int>,
    ///
    pub is_constructor: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_v8stack_frame_t)
                                                  -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_v8stack_frame_t() {
    assert_eq!(::std::mem::size_of::<_cef_v8stack_frame_t>() , 96usize);
    assert_eq!(::std::mem::align_of::<_cef_v8stack_frame_t>() , 8usize);
}
impl Clone for _cef_v8stack_frame_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_v8value_t {
    ///
    pub base: cef_base_t,
    ///
    pub is_valid: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_v8value_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub is_undefined: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_v8value_t)
                                                -> ::std::os::raw::c_int>,
    ///
    pub is_null: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_v8value_t)
                                           -> ::std::os::raw::c_int>,
    ///
    pub is_bool: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_v8value_t)
                                           -> ::std::os::raw::c_int>,
    ///
    pub is_int: ::std::option::Option<unsafe extern "C" fn(self_:
                                                               *mut _cef_v8value_t)
                                          -> ::std::os::raw::c_int>,
    ///
    pub is_uint: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_v8value_t)
                                           -> ::std::os::raw::c_int>,
    ///
    pub is_double: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_v8value_t)
                                             -> ::std::os::raw::c_int>,
    ///
    pub is_date: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_v8value_t)
                                           -> ::std::os::raw::c_int>,
    ///
    pub is_string: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_v8value_t)
                                             -> ::std::os::raw::c_int>,
    ///
    pub is_object: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_v8value_t)
                                             -> ::std::os::raw::c_int>,
    ///
    pub is_array: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_v8value_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub is_function: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_v8value_t)
                                               -> ::std::os::raw::c_int>,
    ///
    pub is_same: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_v8value_t,
                                                            that:
                                                                *mut _cef_v8value_t)
                                           -> ::std::os::raw::c_int>,
    ///
    pub get_bool_value: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_v8value_t)
                                                  -> ::std::os::raw::c_int>,
    ///
    pub get_int_value: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_v8value_t)
                                                 -> ::std::os::raw::c_int>,
    ///
    pub get_uint_value: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_v8value_t)
                                                  -> ::std::os::raw::c_uint>,
    ///
    pub get_double_value: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_v8value_t)
                                                    -> f64>,
    ///
    pub get_date_value: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_v8value_t)
                                                  -> _cef_time_t>,
    ///
    pub get_string_value: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_v8value_t)
                                                    ->
                                                        *mut _cef_string_utf16_t>,
    ///
    pub is_user_created: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_v8value_t)
                                                   -> ::std::os::raw::c_int>,
    ///
    pub has_exception: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_v8value_t)
                                                 -> ::std::os::raw::c_int>,
    ///
    pub get_exception: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_v8value_t)
                                                 -> *mut _cef_v8exception_t>,
    ///
    pub clear_exception: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_v8value_t)
                                                   -> ::std::os::raw::c_int>,
    ///
    pub will_rethrow_exceptions: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                *mut _cef_v8value_t)
                                                           ->
                                                               ::std::os::raw::c_int>,
    ///
    pub set_rethrow_exceptions: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                               *mut _cef_v8value_t,
                                                                           rethrow:
                                                                               ::std::os::raw::c_int)
                                                          ->
                                                              ::std::os::raw::c_int>,
    ///
    pub has_value_bykey: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_v8value_t,
                                                                    key:
                                                                        *const cef_string_t)
                                                   -> ::std::os::raw::c_int>,
    ///
    pub has_value_byindex: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_v8value_t,
                                                                      index:
                                                                          ::std::os::raw::c_int)
                                                     ->
                                                         ::std::os::raw::c_int>,
    ///
    pub delete_value_bykey: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           *mut _cef_v8value_t,
                                                                       key:
                                                                           *const cef_string_t)
                                                      ->
                                                          ::std::os::raw::c_int>,
    ///
    pub delete_value_byindex: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_v8value_t,
                                                                         index:
                                                                             ::std::os::raw::c_int)
                                                        ->
                                                            ::std::os::raw::c_int>,
    ///
    pub get_value_bykey: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_v8value_t,
                                                                    key:
                                                                        *const cef_string_t)
                                                   -> *mut _cef_v8value_t>,
    ///
    pub get_value_byindex: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_v8value_t,
                                                                      index:
                                                                          ::std::os::raw::c_int)
                                                     -> *mut _cef_v8value_t>,
    ///
    pub set_value_bykey: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_v8value_t,
                                                                    key:
                                                                        *const cef_string_t,
                                                                    value:
                                                                        *mut _cef_v8value_t,
                                                                    attribute:
                                                                        cef_v8_propertyattribute_t)
                                                   -> ::std::os::raw::c_int>,
    ///
    pub set_value_byindex: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_v8value_t,
                                                                      index:
                                                                          ::std::os::raw::c_int,
                                                                      value:
                                                                          *mut _cef_v8value_t)
                                                     ->
                                                         ::std::os::raw::c_int>,
    ///
    pub set_value_byaccessor: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_v8value_t,
                                                                         key:
                                                                             *const cef_string_t,
                                                                         settings:
                                                                             cef_v8_accesscontrol_t,
                                                                         attribute:
                                                                             cef_v8_propertyattribute_t)
                                                        ->
                                                            ::std::os::raw::c_int>,
    ///
    pub get_keys: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_v8value_t,
                                                             keys:
                                                                 cef_string_list_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub set_user_data: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_v8value_t,
                                                                  user_data:
                                                                      *mut _cef_base_t)
                                                 -> ::std::os::raw::c_int>,
    ///
    pub get_user_data: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_v8value_t)
                                                 -> *mut _cef_base_t>,
    ///
    pub get_externally_allocated_memory: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                        *mut _cef_v8value_t)
                                                                   ->
                                                                       ::std::os::raw::c_int>,
    ///
    pub adjust_externally_allocated_memory: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                           *mut _cef_v8value_t,
                                                                                       change_in_bytes:
                                                                                           ::std::os::raw::c_int)
                                                                      ->
                                                                          ::std::os::raw::c_int>,
    ///
    pub get_array_length: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_v8value_t)
                                                    -> ::std::os::raw::c_int>,
    ///
    pub get_function_name: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_v8value_t)
                                                     ->
                                                         *mut _cef_string_utf16_t>,
    ///
    pub get_function_handler: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_v8value_t)
                                                        ->
                                                            *mut _cef_v8handler_t>,
    ///
    pub execute_function: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_v8value_t,
                                                                     object:
                                                                         *mut _cef_v8value_t,
                                                                     argumentsCount:
                                                                         usize,
                                                                     arguments:
                                                                         *const *const _cef_v8value_t)
                                                    -> *mut _cef_v8value_t>,
    ///
    pub execute_function_with_context: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                      *mut _cef_v8value_t,
                                                                                  context:
                                                                                      *mut _cef_v8context_t,
                                                                                  object:
                                                                                      *mut _cef_v8value_t,
                                                                                  argumentsCount:
                                                                                      usize,
                                                                                  arguments:
                                                                                      *const *const _cef_v8value_t)
                                                                 ->
                                                                     *mut _cef_v8value_t>,
}
#[test]
fn bindgen_test_layout__cef_v8value_t() {
    assert_eq!(::std::mem::size_of::<_cef_v8value_t>() , 384usize);
    assert_eq!(::std::mem::align_of::<_cef_v8value_t>() , 8usize);
}
impl Clone for _cef_v8value_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_v8context_t = _cef_v8context_t;
extern "C" {
    ///
    pub fn cef_v8context_get_current_context() -> *mut cef_v8context_t;
}
extern "C" {
    ///
    pub fn cef_v8context_get_entered_context() -> *mut cef_v8context_t;
}
extern "C" {
    ///
    pub fn cef_v8context_in_context() -> ::std::os::raw::c_int;
}
pub type cef_v8handler_t = _cef_v8handler_t;
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_v8accessor_t {
    ///
    pub base: cef_base_t,
    ///
    pub get: ::std::option::Option<unsafe extern "C" fn(self_:
                                                            *mut _cef_v8accessor_t,
                                                        name:
                                                            *const cef_string_t,
                                                        object:
                                                            *mut _cef_v8value_t,
                                                        retval:
                                                            *mut *mut _cef_v8value_t,
                                                        exception:
                                                            *mut cef_string_t)
                                       -> ::std::os::raw::c_int>,
    ///
    pub set: ::std::option::Option<unsafe extern "C" fn(self_:
                                                            *mut _cef_v8accessor_t,
                                                        name:
                                                            *const cef_string_t,
                                                        object:
                                                            *mut _cef_v8value_t,
                                                        value:
                                                            *mut _cef_v8value_t,
                                                        exception:
                                                            *mut cef_string_t)
                                       -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_v8accessor_t() {
    assert_eq!(::std::mem::size_of::<_cef_v8accessor_t>() , 48usize);
    assert_eq!(::std::mem::align_of::<_cef_v8accessor_t>() , 8usize);
}
impl Clone for _cef_v8accessor_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_v8accessor_t = _cef_v8accessor_t;
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_v8interceptor_t {
    ///
    pub base: cef_base_t,
    ///
    pub get_byname: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_v8interceptor_t,
                                                               name:
                                                                   *const cef_string_t,
                                                               object:
                                                                   *mut _cef_v8value_t,
                                                               retval:
                                                                   *mut *mut _cef_v8value_t,
                                                               exception:
                                                                   *mut cef_string_t)
                                              -> ::std::os::raw::c_int>,
    ///
    pub get_byindex: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_v8interceptor_t,
                                                                index:
                                                                    ::std::os::raw::c_int,
                                                                object:
                                                                    *mut _cef_v8value_t,
                                                                retval:
                                                                    *mut *mut _cef_v8value_t,
                                                                exception:
                                                                    *mut cef_string_t)
                                               -> ::std::os::raw::c_int>,
    ///
    pub set_byname: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_v8interceptor_t,
                                                               name:
                                                                   *const cef_string_t,
                                                               object:
                                                                   *mut _cef_v8value_t,
                                                               value:
                                                                   *mut _cef_v8value_t,
                                                               exception:
                                                                   *mut cef_string_t)
                                              -> ::std::os::raw::c_int>,
    ///
    pub set_byindex: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_v8interceptor_t,
                                                                index:
                                                                    ::std::os::raw::c_int,
                                                                object:
                                                                    *mut _cef_v8value_t,
                                                                value:
                                                                    *mut _cef_v8value_t,
                                                                exception:
                                                                    *mut cef_string_t)
                                               -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_v8interceptor_t() {
    assert_eq!(::std::mem::size_of::<_cef_v8interceptor_t>() , 64usize);
    assert_eq!(::std::mem::align_of::<_cef_v8interceptor_t>() , 8usize);
}
impl Clone for _cef_v8interceptor_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_v8interceptor_t = _cef_v8interceptor_t;
pub type cef_v8value_t = _cef_v8value_t;
extern "C" {
    ///
    pub fn cef_v8value_create_undefined() -> *mut cef_v8value_t;
}
extern "C" {
    ///
    pub fn cef_v8value_create_null() -> *mut cef_v8value_t;
}
extern "C" {
    ///
    pub fn cef_v8value_create_bool(value: ::std::os::raw::c_int)
     -> *mut cef_v8value_t;
}
extern "C" {
    ///
    pub fn cef_v8value_create_int(value: int32) -> *mut cef_v8value_t;
}
extern "C" {
    ///
    pub fn cef_v8value_create_uint(value: uint32) -> *mut cef_v8value_t;
}
extern "C" {
    ///
    pub fn cef_v8value_create_double(value: f64) -> *mut cef_v8value_t;
}
extern "C" {
    ///
    pub fn cef_v8value_create_date(date: *const cef_time_t)
     -> *mut cef_v8value_t;
}
extern "C" {
    ///
    pub fn cef_v8value_create_string(value: *const cef_string_t)
     -> *mut cef_v8value_t;
}
extern "C" {
    ///
    pub fn cef_v8value_create_object(accessor: *mut cef_v8accessor_t,
                                     interceptor: *mut cef_v8interceptor_t)
     -> *mut cef_v8value_t;
}
extern "C" {
    ///
    pub fn cef_v8value_create_array(length: ::std::os::raw::c_int)
     -> *mut cef_v8value_t;
}
extern "C" {
    ///
    pub fn cef_v8value_create_function(name: *const cef_string_t,
                                       handler: *mut cef_v8handler_t)
     -> *mut cef_v8value_t;
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_v8stack_trace_t {
    ///
    pub base: cef_base_t,
    ///
    pub is_valid: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_v8stack_trace_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub get_frame_count: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_v8stack_trace_t)
                                                   -> ::std::os::raw::c_int>,
    ///
    pub get_frame: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_v8stack_trace_t,
                                                              index:
                                                                  ::std::os::raw::c_int)
                                             -> *mut _cef_v8stack_frame_t>,
}
#[test]
fn bindgen_test_layout__cef_v8stack_trace_t() {
    assert_eq!(::std::mem::size_of::<_cef_v8stack_trace_t>() , 56usize);
    assert_eq!(::std::mem::align_of::<_cef_v8stack_trace_t>() , 8usize);
}
impl Clone for _cef_v8stack_trace_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_v8stack_trace_t = _cef_v8stack_trace_t;
extern "C" {
    ///
    pub fn cef_v8stack_trace_get_current(frame_limit: ::std::os::raw::c_int)
     -> *mut cef_v8stack_trace_t;
}
extern "C" {
    ///
    pub fn cef_register_extension(extension_name: *const cef_string_t,
                                  javascript_code: *const cef_string_t,
                                  handler: *mut cef_v8handler_t)
     -> ::std::os::raw::c_int;
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_render_process_handler_t {
    ///
    pub base: cef_base_t,
    ///
    pub on_render_thread_created: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                 *mut _cef_render_process_handler_t,
                                                                             extra_info:
                                                                                 *mut _cef_list_value_t)>,
    ///
    pub on_web_kit_initialized: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                               *mut _cef_render_process_handler_t)>,
    ///
    pub on_browser_created: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           *mut _cef_render_process_handler_t,
                                                                       browser:
                                                                           *mut _cef_browser_t)>,
    ///
    pub on_browser_destroyed: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_render_process_handler_t,
                                                                         browser:
                                                                             *mut _cef_browser_t)>,
    ///
    pub get_load_handler: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_render_process_handler_t)
                                                    ->
                                                        *mut _cef_load_handler_t>,
    ///
    pub on_before_navigation: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_render_process_handler_t,
                                                                         browser:
                                                                             *mut _cef_browser_t,
                                                                         frame:
                                                                             *mut _cef_frame_t,
                                                                         request:
                                                                             *mut _cef_request_t,
                                                                         navigation_type:
                                                                             cef_navigation_type_t,
                                                                         is_redirect:
                                                                             ::std::os::raw::c_int)
                                                        ->
                                                            ::std::os::raw::c_int>,
    ///
    pub on_context_created: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           *mut _cef_render_process_handler_t,
                                                                       browser:
                                                                           *mut _cef_browser_t,
                                                                       frame:
                                                                           *mut _cef_frame_t,
                                                                       context:
                                                                           *mut _cef_v8context_t)>,
    ///
    pub on_context_released: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            *mut _cef_render_process_handler_t,
                                                                        browser:
                                                                            *mut _cef_browser_t,
                                                                        frame:
                                                                            *mut _cef_frame_t,
                                                                        context:
                                                                            *mut _cef_v8context_t)>,
    ///
    pub on_uncaught_exception: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              *mut _cef_render_process_handler_t,
                                                                          browser:
                                                                              *mut _cef_browser_t,
                                                                          frame:
                                                                              *mut _cef_frame_t,
                                                                          context:
                                                                              *mut _cef_v8context_t,
                                                                          exception:
                                                                              *mut _cef_v8exception_t,
                                                                          stackTrace:
                                                                              *mut _cef_v8stack_trace_t)>,
    ///
    pub on_focused_node_changed: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                *mut _cef_render_process_handler_t,
                                                                            browser:
                                                                                *mut _cef_browser_t,
                                                                            frame:
                                                                                *mut _cef_frame_t,
                                                                            node:
                                                                                *mut _cef_domnode_t)>,
    ///
    pub on_process_message_received: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                    *mut _cef_render_process_handler_t,
                                                                                browser:
                                                                                    *mut _cef_browser_t,
                                                                                source_process:
                                                                                    cef_process_id_t,
                                                                                message:
                                                                                    *mut _cef_process_message_t)
                                                               ->
                                                                   ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_render_process_handler_t() {
    assert_eq!(::std::mem::size_of::<_cef_render_process_handler_t>() ,
               120usize);
    assert_eq!(::std::mem::align_of::<_cef_render_process_handler_t>() ,
               8usize);
}
impl Clone for _cef_render_process_handler_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_resource_bundle_handler_t {
    ///
    pub base: cef_base_t,
    ///
    pub get_localized_string: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_resource_bundle_handler_t,
                                                                         string_id:
                                                                             ::std::os::raw::c_int,
                                                                         string:
                                                                             *mut cef_string_t)
                                                        ->
                                                            ::std::os::raw::c_int>,
    ///
    pub get_data_resource: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_resource_bundle_handler_t,
                                                                      resource_id:
                                                                          ::std::os::raw::c_int,
                                                                      data:
                                                                          *mut *mut ::std::os::raw::c_void,
                                                                      data_size:
                                                                          *mut usize)
                                                     ->
                                                         ::std::os::raw::c_int>,
    ///
    pub get_data_resource_for_scale: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                    *mut _cef_resource_bundle_handler_t,
                                                                                resource_id:
                                                                                    ::std::os::raw::c_int,
                                                                                scale_factor:
                                                                                    cef_scale_factor_t,
                                                                                data:
                                                                                    *mut *mut ::std::os::raw::c_void,
                                                                                data_size:
                                                                                    *mut usize)
                                                               ->
                                                                   ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_resource_bundle_handler_t() {
    assert_eq!(::std::mem::size_of::<_cef_resource_bundle_handler_t>() ,
               56usize);
    assert_eq!(::std::mem::align_of::<_cef_resource_bundle_handler_t>() ,
               8usize);
}
impl Clone for _cef_resource_bundle_handler_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_response_t {
    ///
    pub base: cef_base_t,
    ///
    pub is_read_only: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_response_t)
                                                -> ::std::os::raw::c_int>,
    ///
    pub get_error: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_response_t)
                                             -> _bindgen_ty_9>,
    ///
    pub set_error: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                  *mut _cef_response_t,
                                                              error:
                                                                  cef_errorcode_t)>,
    ///
    pub get_status: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_response_t)
                                              -> ::std::os::raw::c_int>,
    ///
    pub set_status: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_response_t,
                                                               status:
                                                                   ::std::os::raw::c_int)>,
    ///
    pub get_status_text: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_response_t)
                                                   ->
                                                       *mut _cef_string_utf16_t>,
    ///
    pub set_status_text: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_response_t,
                                                                    statusText:
                                                                        *const cef_string_t)>,
    ///
    pub get_mime_type: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_response_t)
                                                 -> *mut _cef_string_utf16_t>,
    ///
    pub set_mime_type: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_response_t,
                                                                  mimeType:
                                                                      *const cef_string_t)>,
    ///
    pub get_header: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_response_t,
                                                               name:
                                                                   *const cef_string_t)
                                              -> *mut _cef_string_utf16_t>,
    ///
    pub get_header_map: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_response_t,
                                                                   headerMap:
                                                                       cef_string_multimap_t)>,
    ///
    pub set_header_map: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_response_t,
                                                                   headerMap:
                                                                       cef_string_multimap_t)>,
}
#[test]
fn bindgen_test_layout__cef_response_t() {
    assert_eq!(::std::mem::size_of::<_cef_response_t>() , 128usize);
    assert_eq!(::std::mem::align_of::<_cef_response_t>() , 8usize);
}
impl Clone for _cef_response_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_response_t = _cef_response_t;
extern "C" {
    ///
    pub fn cef_response_create() -> *mut cef_response_t;
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_resource_handler_t {
    ///
    pub base: cef_base_t,
    ///
    pub process_request: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_resource_handler_t,
                                                                    request:
                                                                        *mut _cef_request_t,
                                                                    callback:
                                                                        *mut _cef_callback_t)
                                                   -> ::std::os::raw::c_int>,
    ///
    pub get_response_headers: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_resource_handler_t,
                                                                         response:
                                                                             *mut _cef_response_t,
                                                                         response_length:
                                                                             *mut int64,
                                                                         redirectUrl:
                                                                             *mut cef_string_t)>,
    ///
    pub read_response: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_resource_handler_t,
                                                                  data_out:
                                                                      *mut ::std::os::raw::c_void,
                                                                  bytes_to_read:
                                                                      ::std::os::raw::c_int,
                                                                  bytes_read:
                                                                      *mut ::std::os::raw::c_int,
                                                                  callback:
                                                                      *mut _cef_callback_t)
                                                 -> ::std::os::raw::c_int>,
    ///
    pub can_get_cookie: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_resource_handler_t,
                                                                   cookie:
                                                                       *const _cef_cookie_t)
                                                  -> ::std::os::raw::c_int>,
    ///
    pub can_set_cookie: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_resource_handler_t,
                                                                   cookie:
                                                                       *const _cef_cookie_t)
                                                  -> ::std::os::raw::c_int>,
    ///
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                               *mut _cef_resource_handler_t)>,
}
#[test]
fn bindgen_test_layout__cef_resource_handler_t() {
    assert_eq!(::std::mem::size_of::<_cef_resource_handler_t>() , 80usize);
    assert_eq!(::std::mem::align_of::<_cef_resource_handler_t>() , 8usize);
}
impl Clone for _cef_resource_handler_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_scheme_registrar_t {
    ///
    pub base: cef_base_t,
    ///
    pub add_custom_scheme: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_scheme_registrar_t,
                                                                      scheme_name:
                                                                          *const cef_string_t,
                                                                      is_standard:
                                                                          ::std::os::raw::c_int,
                                                                      is_local:
                                                                          ::std::os::raw::c_int,
                                                                      is_display_isolated:
                                                                          ::std::os::raw::c_int)
                                                     ->
                                                         ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_scheme_registrar_t() {
    assert_eq!(::std::mem::size_of::<_cef_scheme_registrar_t>() , 40usize);
    assert_eq!(::std::mem::align_of::<_cef_scheme_registrar_t>() , 8usize);
}
impl Clone for _cef_scheme_registrar_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_scheme_handler_factory_t = _cef_scheme_handler_factory_t;
extern "C" {
    ///
    pub fn cef_register_scheme_handler_factory(scheme_name:
                                                   *const cef_string_t,
                                               domain_name:
                                                   *const cef_string_t,
                                               factory:
                                                   *mut cef_scheme_handler_factory_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    ///
    pub fn cef_clear_scheme_handler_factories() -> ::std::os::raw::c_int;
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_app_t {
    ///
    pub base: cef_base_t,
    ///
    pub on_before_command_line_processing: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                          *mut _cef_app_t,
                                                                                      process_type:
                                                                                          *const cef_string_t,
                                                                                      command_line:
                                                                                          *mut _cef_command_line_t)>,
    ///
    pub on_register_custom_schemes: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                   *mut _cef_app_t,
                                                                               registrar:
                                                                                   *mut _cef_scheme_registrar_t)>,
    ///
    pub get_resource_bundle_handler: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                    *mut _cef_app_t)
                                                               ->
                                                                   *mut _cef_resource_bundle_handler_t>,
    ///
    pub get_browser_process_handler: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                    *mut _cef_app_t)
                                                               ->
                                                                   *mut _cef_browser_process_handler_t>,
    ///
    pub get_render_process_handler: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                   *mut _cef_app_t)
                                                              ->
                                                                  *mut _cef_render_process_handler_t>,
}
#[test]
fn bindgen_test_layout__cef_app_t() {
    assert_eq!(::std::mem::size_of::<_cef_app_t>() , 72usize);
    assert_eq!(::std::mem::align_of::<_cef_app_t>() , 8usize);
}
impl Clone for _cef_app_t {
    fn clone(&self) -> Self { *self }
}
pub type cef_app_t = _cef_app_t;
extern "C" {
    ///
    pub fn cef_execute_process(args: *const _cef_main_args_t,
                               application: *mut cef_app_t,
                               windows_sandbox_info:
                                   *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    ///
    pub fn cef_initialize(args: *const _cef_main_args_t,
                          settings: *const _cef_settings_t,
                          application: *mut cef_app_t,
                          windows_sandbox_info: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    ///
    pub fn cef_shutdown();
}
extern "C" {
    ///
    pub fn cef_do_message_loop_work();
}
extern "C" {
    ///
    pub fn cef_run_message_loop();
}
extern "C" {
    ///
    pub fn cef_quit_message_loop();
}
extern "C" {
    ///
    pub fn cef_set_osmodal_loop(osModalLoop: ::std::os::raw::c_int);
}
extern "C" {
    ///
    pub fn cef_enable_highdpi_support();
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_file_dialog_callback_t {
    ///
    pub base: cef_base_t,
    ///
    pub cont: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_file_dialog_callback_t,
                                                         selected_accept_filter:
                                                             ::std::os::raw::c_int,
                                                         file_paths:
                                                             cef_string_list_t)>,
    ///
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                               *mut _cef_file_dialog_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_file_dialog_callback_t() {
    assert_eq!(::std::mem::size_of::<_cef_file_dialog_callback_t>() ,
               48usize);
    assert_eq!(::std::mem::align_of::<_cef_file_dialog_callback_t>() ,
               8usize);
}
impl Clone for _cef_file_dialog_callback_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_dialog_handler_t {
    ///
    pub base: cef_base_t,
    ///
    pub on_file_dialog: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_dialog_handler_t,
                                                                   browser:
                                                                       *mut _cef_browser_t,
                                                                   mode:
                                                                       cef_file_dialog_mode_t,
                                                                   title:
                                                                       *const cef_string_t,
                                                                   default_file_path:
                                                                       *const cef_string_t,
                                                                   accept_filters:
                                                                       cef_string_list_t,
                                                                   selected_accept_filter:
                                                                       ::std::os::raw::c_int,
                                                                   callback:
                                                                       *mut _cef_file_dialog_callback_t)
                                                  -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_dialog_handler_t() {
    assert_eq!(::std::mem::size_of::<_cef_dialog_handler_t>() , 40usize);
    assert_eq!(::std::mem::align_of::<_cef_dialog_handler_t>() , 8usize);
}
impl Clone for _cef_dialog_handler_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_display_handler_t {
    ///
    pub base: cef_base_t,
    ///
    pub on_address_change: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_display_handler_t,
                                                                      browser:
                                                                          *mut _cef_browser_t,
                                                                      frame:
                                                                          *mut _cef_frame_t,
                                                                      url:
                                                                          *const cef_string_t)>,
    ///
    pub on_title_change: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_display_handler_t,
                                                                    browser:
                                                                        *mut _cef_browser_t,
                                                                    title:
                                                                        *const cef_string_t)>,
    ///
    pub on_favicon_urlchange: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_display_handler_t,
                                                                         browser:
                                                                             *mut _cef_browser_t,
                                                                         icon_urls:
                                                                             cef_string_list_t)>,
    ///
    pub on_fullscreen_mode_change: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                  *mut _cef_display_handler_t,
                                                                              browser:
                                                                                  *mut _cef_browser_t,
                                                                              fullscreen:
                                                                                  ::std::os::raw::c_int)>,
    ///
    pub on_tooltip: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                   *mut _cef_display_handler_t,
                                                               browser:
                                                                   *mut _cef_browser_t,
                                                               text:
                                                                   *mut cef_string_t)
                                              -> ::std::os::raw::c_int>,
    ///
    pub on_status_message: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_display_handler_t,
                                                                      browser:
                                                                          *mut _cef_browser_t,
                                                                      value:
                                                                          *const cef_string_t)>,
    ///
    pub on_console_message: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           *mut _cef_display_handler_t,
                                                                       browser:
                                                                           *mut _cef_browser_t,
                                                                       message:
                                                                           *const cef_string_t,
                                                                       source:
                                                                           *const cef_string_t,
                                                                       line:
                                                                           ::std::os::raw::c_int)
                                                      ->
                                                          ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_display_handler_t() {
    assert_eq!(::std::mem::size_of::<_cef_display_handler_t>() , 88usize);
    assert_eq!(::std::mem::align_of::<_cef_display_handler_t>() , 8usize);
}
impl Clone for _cef_display_handler_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_download_item_t {
    ///
    pub base: cef_base_t,
    ///
    pub is_valid: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_download_item_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub is_in_progress: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_download_item_t)
                                                  -> ::std::os::raw::c_int>,
    ///
    pub is_complete: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_download_item_t)
                                               -> ::std::os::raw::c_int>,
    ///
    pub is_canceled: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_download_item_t)
                                               -> ::std::os::raw::c_int>,
    ///
    pub get_current_speed: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_download_item_t)
                                                     ->
                                                         ::std::os::raw::c_long>,
    ///
    pub get_percent_complete: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_download_item_t)
                                                        ->
                                                            ::std::os::raw::c_int>,
    ///
    pub get_total_bytes: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_download_item_t)
                                                   -> ::std::os::raw::c_long>,
    ///
    pub get_received_bytes: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           *mut _cef_download_item_t)
                                                      ->
                                                          ::std::os::raw::c_long>,
    ///
    pub get_start_time: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_download_item_t)
                                                  -> _cef_time_t>,
    ///
    pub get_end_time: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_download_item_t)
                                                -> _cef_time_t>,
    ///
    pub get_full_path: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_download_item_t)
                                                 -> *mut _cef_string_utf16_t>,
    ///
    pub get_id: ::std::option::Option<unsafe extern "C" fn(self_:
                                                               *mut _cef_download_item_t)
                                          -> ::std::os::raw::c_uint>,
    ///
    pub get_url: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                *mut _cef_download_item_t)
                                           -> *mut _cef_string_utf16_t>,
    ///
    pub get_original_url: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_download_item_t)
                                                    ->
                                                        *mut _cef_string_utf16_t>,
    ///
    pub get_suggested_file_name: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                *mut _cef_download_item_t)
                                                           ->
                                                               *mut _cef_string_utf16_t>,
    ///
    pub get_content_disposition: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                *mut _cef_download_item_t)
                                                           ->
                                                               *mut _cef_string_utf16_t>,
    ///
    pub get_mime_type: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_download_item_t)
                                                 -> *mut _cef_string_utf16_t>,
}
#[test]
fn bindgen_test_layout__cef_download_item_t() {
    assert_eq!(::std::mem::size_of::<_cef_download_item_t>() , 168usize);
    assert_eq!(::std::mem::align_of::<_cef_download_item_t>() , 8usize);
}
impl Clone for _cef_download_item_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_before_download_callback_t {
    ///
    pub base: cef_base_t,
    ///
    pub cont: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_before_download_callback_t,
                                                         download_path:
                                                             *const cef_string_t,
                                                         show_dialog:
                                                             ::std::os::raw::c_int)>,
}
#[test]
fn bindgen_test_layout__cef_before_download_callback_t() {
    assert_eq!(::std::mem::size_of::<_cef_before_download_callback_t>() ,
               40usize);
    assert_eq!(::std::mem::align_of::<_cef_before_download_callback_t>() ,
               8usize);
}
impl Clone for _cef_before_download_callback_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_download_item_callback_t {
    ///
    pub base: cef_base_t,
    ///
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                               *mut _cef_download_item_callback_t)>,
    ///
    pub pause: ::std::option::Option<unsafe extern "C" fn(self_:
                                                              *mut _cef_download_item_callback_t)>,
    ///
    pub resume: ::std::option::Option<unsafe extern "C" fn(self_:
                                                               *mut _cef_download_item_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_download_item_callback_t() {
    assert_eq!(::std::mem::size_of::<_cef_download_item_callback_t>() ,
               56usize);
    assert_eq!(::std::mem::align_of::<_cef_download_item_callback_t>() ,
               8usize);
}
impl Clone for _cef_download_item_callback_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_download_handler_t {
    ///
    pub base: cef_base_t,
    ///
    pub on_before_download: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           *mut _cef_download_handler_t,
                                                                       browser:
                                                                           *mut _cef_browser_t,
                                                                       download_item:
                                                                           *mut _cef_download_item_t,
                                                                       suggested_name:
                                                                           *const cef_string_t,
                                                                       callback:
                                                                           *mut _cef_before_download_callback_t)>,
    ///
    pub on_download_updated: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            *mut _cef_download_handler_t,
                                                                        browser:
                                                                            *mut _cef_browser_t,
                                                                        download_item:
                                                                            *mut _cef_download_item_t,
                                                                        callback:
                                                                            *mut _cef_download_item_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_download_handler_t() {
    assert_eq!(::std::mem::size_of::<_cef_download_handler_t>() , 48usize);
    assert_eq!(::std::mem::align_of::<_cef_download_handler_t>() , 8usize);
}
impl Clone for _cef_download_handler_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_drag_handler_t {
    ///
    pub base: cef_base_t,
    ///
    pub on_drag_enter: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_drag_handler_t,
                                                                  browser:
                                                                      *mut _cef_browser_t,
                                                                  dragData:
                                                                      *mut _cef_drag_data_t,
                                                                  mask:
                                                                      cef_drag_operations_mask_t)
                                                 -> ::std::os::raw::c_int>,
    ///
    pub on_draggable_regions_changed: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                     *mut _cef_drag_handler_t,
                                                                                 browser:
                                                                                     *mut _cef_browser_t,
                                                                                 regionsCount:
                                                                                     usize,
                                                                                 regions:
                                                                                     *const cef_draggable_region_t)>,
}
#[test]
fn bindgen_test_layout__cef_drag_handler_t() {
    assert_eq!(::std::mem::size_of::<_cef_drag_handler_t>() , 48usize);
    assert_eq!(::std::mem::align_of::<_cef_drag_handler_t>() , 8usize);
}
impl Clone for _cef_drag_handler_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_find_handler_t {
    ///
    pub base: cef_base_t,
    ///
    pub on_find_result: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_find_handler_t,
                                                                   browser:
                                                                       *mut _cef_browser_t,
                                                                   identifier:
                                                                       ::std::os::raw::c_int,
                                                                   count:
                                                                       ::std::os::raw::c_int,
                                                                   selectionRect:
                                                                       *const cef_rect_t,
                                                                   activeMatchOrdinal:
                                                                       ::std::os::raw::c_int,
                                                                   finalUpdate:
                                                                       ::std::os::raw::c_int)>,
}
#[test]
fn bindgen_test_layout__cef_find_handler_t() {
    assert_eq!(::std::mem::size_of::<_cef_find_handler_t>() , 40usize);
    assert_eq!(::std::mem::align_of::<_cef_find_handler_t>() , 8usize);
}
impl Clone for _cef_find_handler_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_focus_handler_t {
    ///
    pub base: cef_base_t,
    ///
    pub on_take_focus: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_focus_handler_t,
                                                                  browser:
                                                                      *mut _cef_browser_t,
                                                                  next:
                                                                      ::std::os::raw::c_int)>,
    ///
    pub on_set_focus: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_focus_handler_t,
                                                                 browser:
                                                                     *mut _cef_browser_t,
                                                                 source:
                                                                     cef_focus_source_t)
                                                -> ::std::os::raw::c_int>,
    ///
    pub on_got_focus: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_focus_handler_t,
                                                                 browser:
                                                                     *mut _cef_browser_t)>,
}
#[test]
fn bindgen_test_layout__cef_focus_handler_t() {
    assert_eq!(::std::mem::size_of::<_cef_focus_handler_t>() , 56usize);
    assert_eq!(::std::mem::align_of::<_cef_focus_handler_t>() , 8usize);
}
impl Clone for _cef_focus_handler_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_geolocation_callback_t {
    ///
    pub base: cef_base_t,
    ///
    pub cont: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_geolocation_callback_t,
                                                         allow:
                                                             ::std::os::raw::c_int)>,
}
#[test]
fn bindgen_test_layout__cef_geolocation_callback_t() {
    assert_eq!(::std::mem::size_of::<_cef_geolocation_callback_t>() ,
               40usize);
    assert_eq!(::std::mem::align_of::<_cef_geolocation_callback_t>() ,
               8usize);
}
impl Clone for _cef_geolocation_callback_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_geolocation_handler_t {
    ///
    pub base: cef_base_t,
    ///
    pub on_request_geolocation_permission: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                          *mut _cef_geolocation_handler_t,
                                                                                      browser:
                                                                                          *mut _cef_browser_t,
                                                                                      requesting_url:
                                                                                          *const cef_string_t,
                                                                                      request_id:
                                                                                          ::std::os::raw::c_int,
                                                                                      callback:
                                                                                          *mut _cef_geolocation_callback_t)
                                                                     ->
                                                                         ::std::os::raw::c_int>,
    ///
    pub on_cancel_geolocation_permission: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                         *mut _cef_geolocation_handler_t,
                                                                                     browser:
                                                                                         *mut _cef_browser_t,
                                                                                     request_id:
                                                                                         ::std::os::raw::c_int)>,
}
#[test]
fn bindgen_test_layout__cef_geolocation_handler_t() {
    assert_eq!(::std::mem::size_of::<_cef_geolocation_handler_t>() , 48usize);
    assert_eq!(::std::mem::align_of::<_cef_geolocation_handler_t>() , 8usize);
}
impl Clone for _cef_geolocation_handler_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_jsdialog_callback_t {
    ///
    pub base: cef_base_t,
    ///
    pub cont: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_jsdialog_callback_t,
                                                         success:
                                                             ::std::os::raw::c_int,
                                                         user_input:
                                                             *const cef_string_t)>,
}
#[test]
fn bindgen_test_layout__cef_jsdialog_callback_t() {
    assert_eq!(::std::mem::size_of::<_cef_jsdialog_callback_t>() , 40usize);
    assert_eq!(::std::mem::align_of::<_cef_jsdialog_callback_t>() , 8usize);
}
impl Clone for _cef_jsdialog_callback_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_jsdialog_handler_t {
    ///
    pub base: cef_base_t,
    ///
    pub on_jsdialog: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_jsdialog_handler_t,
                                                                browser:
                                                                    *mut _cef_browser_t,
                                                                origin_url:
                                                                    *const cef_string_t,
                                                                dialog_type:
                                                                    cef_jsdialog_type_t,
                                                                message_text:
                                                                    *const cef_string_t,
                                                                default_prompt_text:
                                                                    *const cef_string_t,
                                                                callback:
                                                                    *mut _cef_jsdialog_callback_t,
                                                                suppress_message:
                                                                    *mut ::std::os::raw::c_int)
                                               -> ::std::os::raw::c_int>,
    ///
    pub on_before_unload_dialog: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                *mut _cef_jsdialog_handler_t,
                                                                            browser:
                                                                                *mut _cef_browser_t,
                                                                            message_text:
                                                                                *const cef_string_t,
                                                                            is_reload:
                                                                                ::std::os::raw::c_int,
                                                                            callback:
                                                                                *mut _cef_jsdialog_callback_t)
                                                           ->
                                                               ::std::os::raw::c_int>,
    ///
    pub on_reset_dialog_state: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              *mut _cef_jsdialog_handler_t,
                                                                          browser:
                                                                              *mut _cef_browser_t)>,
    ///
    pub on_dialog_closed: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_jsdialog_handler_t,
                                                                     browser:
                                                                         *mut _cef_browser_t)>,
}
#[test]
fn bindgen_test_layout__cef_jsdialog_handler_t() {
    assert_eq!(::std::mem::size_of::<_cef_jsdialog_handler_t>() , 64usize);
    assert_eq!(::std::mem::align_of::<_cef_jsdialog_handler_t>() , 8usize);
}
impl Clone for _cef_jsdialog_handler_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_keyboard_handler_t {
    ///
    pub base: cef_base_t,
    ///
    pub on_pre_key_event: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_keyboard_handler_t,
                                                                     browser:
                                                                         *mut _cef_browser_t,
                                                                     event:
                                                                         *const _cef_key_event_t,
                                                                     os_event:
                                                                         *mut XEvent,
                                                                     is_keyboard_shortcut:
                                                                         *mut ::std::os::raw::c_int)
                                                    -> ::std::os::raw::c_int>,
    ///
    pub on_key_event: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                     *mut _cef_keyboard_handler_t,
                                                                 browser:
                                                                     *mut _cef_browser_t,
                                                                 event:
                                                                     *const _cef_key_event_t,
                                                                 os_event:
                                                                     *mut XEvent)
                                                -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__cef_keyboard_handler_t() {
    assert_eq!(::std::mem::size_of::<_cef_keyboard_handler_t>() , 48usize);
    assert_eq!(::std::mem::align_of::<_cef_keyboard_handler_t>() , 8usize);
}
impl Clone for _cef_keyboard_handler_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_life_span_handler_t {
    ///
    pub base: cef_base_t,
    ///
    pub on_before_popup: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_life_span_handler_t,
                                                                    browser:
                                                                        *mut _cef_browser_t,
                                                                    frame:
                                                                        *mut _cef_frame_t,
                                                                    target_url:
                                                                        *const cef_string_t,
                                                                    target_frame_name:
                                                                        *const cef_string_t,
                                                                    target_disposition:
                                                                        cef_window_open_disposition_t,
                                                                    user_gesture:
                                                                        ::std::os::raw::c_int,
                                                                    popupFeatures:
                                                                        *const _cef_popup_features_t,
                                                                    windowInfo:
                                                                        *mut _cef_window_info_t,
                                                                    client:
                                                                        *mut *mut _cef_client_t,
                                                                    settings:
                                                                        *mut _cef_browser_settings_t,
                                                                    no_javascript_access:
                                                                        *mut ::std::os::raw::c_int)
                                                   -> ::std::os::raw::c_int>,
    ///
    pub on_after_created: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_life_span_handler_t,
                                                                     browser:
                                                                         *mut _cef_browser_t)>,
    ///
    pub do_close: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_life_span_handler_t,
                                                             browser:
                                                                 *mut _cef_browser_t)
                                            -> ::std::os::raw::c_int>,
    ///
    pub on_before_close: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_life_span_handler_t,
                                                                    browser:
                                                                        *mut _cef_browser_t)>,
}
#[test]
fn bindgen_test_layout__cef_life_span_handler_t() {
    assert_eq!(::std::mem::size_of::<_cef_life_span_handler_t>() , 64usize);
    assert_eq!(::std::mem::align_of::<_cef_life_span_handler_t>() , 8usize);
}
impl Clone for _cef_life_span_handler_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_render_handler_t {
    ///
    pub base: cef_base_t,
    ///
    pub get_root_screen_rect: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_render_handler_t,
                                                                         browser:
                                                                             *mut _cef_browser_t,
                                                                         rect:
                                                                             *mut cef_rect_t)
                                                        ->
                                                            ::std::os::raw::c_int>,
    ///
    pub get_view_rect: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_render_handler_t,
                                                                  browser:
                                                                      *mut _cef_browser_t,
                                                                  rect:
                                                                      *mut cef_rect_t)
                                                 -> ::std::os::raw::c_int>,
    ///
    pub get_screen_point: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_render_handler_t,
                                                                     browser:
                                                                         *mut _cef_browser_t,
                                                                     viewX:
                                                                         ::std::os::raw::c_int,
                                                                     viewY:
                                                                         ::std::os::raw::c_int,
                                                                     screenX:
                                                                         *mut ::std::os::raw::c_int,
                                                                     screenY:
                                                                         *mut ::std::os::raw::c_int)
                                                    -> ::std::os::raw::c_int>,
    ///
    pub get_screen_info: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_render_handler_t,
                                                                    browser:
                                                                        *mut _cef_browser_t,
                                                                    screen_info:
                                                                        *mut _cef_screen_info_t)
                                                   -> ::std::os::raw::c_int>,
    ///
    pub on_popup_show: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_render_handler_t,
                                                                  browser:
                                                                      *mut _cef_browser_t,
                                                                  show:
                                                                      ::std::os::raw::c_int)>,
    ///
    pub on_popup_size: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                      *mut _cef_render_handler_t,
                                                                  browser:
                                                                      *mut _cef_browser_t,
                                                                  rect:
                                                                      *const cef_rect_t)>,
    ///
    pub on_paint: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                 *mut _cef_render_handler_t,
                                                             browser:
                                                                 *mut _cef_browser_t,
                                                             type_:
                                                                 cef_paint_element_type_t,
                                                             dirtyRectsCount:
                                                                 usize,
                                                             dirtyRects:
                                                                 *const cef_rect_t,
                                                             buffer:
                                                                 *const ::std::os::raw::c_void,
                                                             width:
                                                                 ::std::os::raw::c_int,
                                                             height:
                                                                 ::std::os::raw::c_int)>,
    ///
    pub on_cursor_change: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_render_handler_t,
                                                                     browser:
                                                                         *mut _cef_browser_t,
                                                                     cursor:
                                                                         ::std::os::raw::c_ulong,
                                                                     type_:
                                                                         cef_cursor_type_t,
                                                                     custom_cursor_info:
                                                                         *const _cef_cursor_info_t)>,
    ///
    pub start_dragging: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                       *mut _cef_render_handler_t,
                                                                   browser:
                                                                       *mut _cef_browser_t,
                                                                   drag_data:
                                                                       *mut _cef_drag_data_t,
                                                                   allowed_ops:
                                                                       cef_drag_operations_mask_t,
                                                                   x:
                                                                       ::std::os::raw::c_int,
                                                                   y:
                                                                       ::std::os::raw::c_int)
                                                  -> ::std::os::raw::c_int>,
    ///
    pub update_drag_cursor: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                           *mut _cef_render_handler_t,
                                                                       browser:
                                                                           *mut _cef_browser_t,
                                                                       operation:
                                                                           cef_drag_operations_mask_t)>,
    ///
    pub on_scroll_offset_changed: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                 *mut _cef_render_handler_t,
                                                                             browser:
                                                                                 *mut _cef_browser_t,
                                                                             x:
                                                                                 f64,
                                                                             y:
                                                                                 f64)>,
    ///
    pub on_ime_composition_range_changed: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                         *mut _cef_render_handler_t,
                                                                                     browser:
                                                                                         *mut _cef_browser_t,
                                                                                     selected_range:
                                                                                         *const cef_range_t,
                                                                                     character_boundsCount:
                                                                                         usize,
                                                                                     character_bounds:
                                                                                         *const cef_rect_t)>,
}
#[test]
fn bindgen_test_layout__cef_render_handler_t() {
    assert_eq!(::std::mem::size_of::<_cef_render_handler_t>() , 128usize);
    assert_eq!(::std::mem::align_of::<_cef_render_handler_t>() , 8usize);
}
impl Clone for _cef_render_handler_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_auth_callback_t {
    ///
    pub base: cef_base_t,
    ///
    pub cont: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_auth_callback_t,
                                                         username:
                                                             *const cef_string_t,
                                                         password:
                                                             *const cef_string_t)>,
    ///
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                               *mut _cef_auth_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_auth_callback_t() {
    assert_eq!(::std::mem::size_of::<_cef_auth_callback_t>() , 48usize);
    assert_eq!(::std::mem::align_of::<_cef_auth_callback_t>() , 8usize);
}
impl Clone for _cef_auth_callback_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_response_filter_t {
    ///
    pub base: cef_base_t,
    ///
    pub init_filter: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                    *mut _cef_response_filter_t)
                                               -> ::std::os::raw::c_int>,
    ///
    pub filter: ::std::option::Option<unsafe extern "C" fn(self_:
                                                               *mut _cef_response_filter_t,
                                                           data_in:
                                                               *mut ::std::os::raw::c_void,
                                                           data_in_size:
                                                               usize,
                                                           data_in_read:
                                                               *mut usize,
                                                           data_out:
                                                               *mut ::std::os::raw::c_void,
                                                           data_out_size:
                                                               usize,
                                                           data_out_written:
                                                               *mut usize)
                                          -> _bindgen_ty_58>,
}
#[test]
fn bindgen_test_layout__cef_response_filter_t() {
    assert_eq!(::std::mem::size_of::<_cef_response_filter_t>() , 48usize);
    assert_eq!(::std::mem::align_of::<_cef_response_filter_t>() , 8usize);
}
impl Clone for _cef_response_filter_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_sslinfo_t {
    ///
    pub base: cef_base_t,
    ///
    pub get_cert_status: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                        *mut _cef_sslinfo_t)
                                                   -> _bindgen_ty_10>,
    ///
    pub get_x509certificate: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            *mut _cef_sslinfo_t)
                                                       ->
                                                           *mut _cef_x509certificate_t>,
}
#[test]
fn bindgen_test_layout__cef_sslinfo_t() {
    assert_eq!(::std::mem::size_of::<_cef_sslinfo_t>() , 48usize);
    assert_eq!(::std::mem::align_of::<_cef_sslinfo_t>() , 8usize);
}
impl Clone for _cef_sslinfo_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    ///
    pub fn cef_is_cert_status_error(status: cef_cert_status_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    ///
    pub fn cef_is_cert_status_minor_error(status: cef_cert_status_t)
     -> ::std::os::raw::c_int;
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_request_callback_t {
    ///
    pub base: cef_base_t,
    ///
    pub cont: ::std::option::Option<unsafe extern "C" fn(self_:
                                                             *mut _cef_request_callback_t,
                                                         allow:
                                                             ::std::os::raw::c_int)>,
    ///
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_:
                                                               *mut _cef_request_callback_t)>,
}
#[test]
fn bindgen_test_layout__cef_request_callback_t() {
    assert_eq!(::std::mem::size_of::<_cef_request_callback_t>() , 48usize);
    assert_eq!(::std::mem::align_of::<_cef_request_callback_t>() , 8usize);
}
impl Clone for _cef_request_callback_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_select_client_certificate_callback_t {
    ///
    pub base: cef_base_t,
    ///
    pub select: ::std::option::Option<unsafe extern "C" fn(self_:
                                                               *mut _cef_select_client_certificate_callback_t,
                                                           cert:
                                                               *mut _cef_x509certificate_t)>,
}
#[test]
fn bindgen_test_layout__cef_select_client_certificate_callback_t() {
    assert_eq!(::std::mem::size_of::<_cef_select_client_certificate_callback_t>()
               , 40usize);
    assert_eq!(::std::mem::align_of::<_cef_select_client_certificate_callback_t>()
               , 8usize);
}
impl Clone for _cef_select_client_certificate_callback_t {
    fn clone(&self) -> Self { *self }
}
///
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _cef_request_handler_t {
    ///
    pub base: cef_base_t,
    ///
    pub on_before_browse: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_request_handler_t,
                                                                     browser:
                                                                         *mut _cef_browser_t,
                                                                     frame:
                                                                         *mut _cef_frame_t,
                                                                     request:
                                                                         *mut _cef_request_t,
                                                                     is_redirect:
                                                                         ::std::os::raw::c_int)
                                                    -> ::std::os::raw::c_int>,
    ///
    pub on_open_urlfrom_tab: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                            *mut _cef_request_handler_t,
                                                                        browser:
                                                                            *mut _cef_browser_t,
                                                                        frame:
                                                                            *mut _cef_frame_t,
                                                                        target_url:
                                                                            *const cef_string_t,
                                                                        target_disposition:
                                                                            cef_window_open_disposition_t,
                                                                        user_gesture:
                                                                            ::std::os::raw::c_int)
                                                       ->
                                                           ::std::os::raw::c_int>,
    ///
    pub on_before_resource_load: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                *mut _cef_request_handler_t,
                                                                            browser:
                                                                                *mut _cef_browser_t,
                                                                            frame:
                                                                                *mut _cef_frame_t,
                                                                            request:
                                                                                *mut _cef_request_t,
                                                                            callback:
                                                                                *mut _cef_request_callback_t)
                                                           -> _bindgen_ty_5>,
    ///
    pub get_resource_handler: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_request_handler_t,
                                                                         browser:
                                                                             *mut _cef_browser_t,
                                                                         frame:
                                                                             *mut _cef_frame_t,
                                                                         request:
                                                                             *mut _cef_request_t)
                                                        ->
                                                            *mut _cef_resource_handler_t>,
    ///
    pub on_resource_redirect: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_request_handler_t,
                                                                         browser:
                                                                             *mut _cef_browser_t,
                                                                         frame:
                                                                             *mut _cef_frame_t,
                                                                         request:
                                                                             *mut _cef_request_t,
                                                                         response:
                                                                             *mut _cef_response_t,
                                                                         new_url:
                                                                             *mut cef_string_t)>,
    ///
    pub on_resource_response: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_request_handler_t,
                                                                         browser:
                                                                             *mut _cef_browser_t,
                                                                         frame:
                                                                             *mut _cef_frame_t,
                                                                         request:
                                                                             *mut _cef_request_t,
                                                                         response:
                                                                             *mut _cef_response_t)
                                                        ->
                                                            ::std::os::raw::c_int>,
    ///
    pub get_resource_response_filter: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                     *mut _cef_request_handler_t,
                                                                                 browser:
                                                                                     *mut _cef_browser_t,
                                                                                 frame:
                                                                                     *mut _cef_frame_t,
                                                                                 request:
                                                                                     *mut _cef_request_t,
                                                                                 response:
                                                                                     *mut _cef_response_t)
                                                                ->
                                                                    *mut _cef_response_filter_t>,
    ///
    pub on_resource_load_complete: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                  *mut _cef_request_handler_t,
                                                                              browser:
                                                                                  *mut _cef_browser_t,
                                                                              frame:
                                                                                  *mut _cef_frame_t,
                                                                              request:
                                                                                  *mut _cef_request_t,
                                                                              response:
                                                                                  *mut _cef_response_t,
                                                                              status:
                                                                                  cef_urlrequest_status_t,
                                                                              received_content_length:
                                                                                  int64)>,
    ///
    pub get_auth_credentials: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_request_handler_t,
                                                                         browser:
                                                                             *mut _cef_browser_t,
                                                                         frame:
                                                                             *mut _cef_frame_t,
                                                                         isProxy:
                                                                             ::std::os::raw::c_int,
                                                                         host:
                                                                             *const cef_string_t,
                                                                         port:
                                                                             ::std::os::raw::c_int,
                                                                         realm:
                                                                             *const cef_string_t,
                                                                         scheme:
                                                                             *const cef_string_t,
                                                                         callback:
                                                                             *mut _cef_auth_callback_t)
                                                        ->
                                                            ::std::os::raw::c_int>,
    ///
    pub on_quota_request: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                         *mut _cef_request_handler_t,
                                                                     browser:
                                                                         *mut _cef_browser_t,
                                                                     origin_url:
                                                                         *const cef_string_t,
                                                                     new_size:
                                                                         int64,
                                                                     callback:
                                                                         *mut _cef_request_callback_t)
                                                    -> ::std::os::raw::c_int>,
    ///
    pub on_protocol_execution: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                              *mut _cef_request_handler_t,
                                                                          browser:
                                                                              *mut _cef_browser_t,
                                                                          url:
                                                                              *const cef_string_t,
                                                                          allow_os_execution:
                                                                              *mut ::std::os::raw::c_int)>,
    ///
    pub on_certificate_error: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_request_handler_t,
                                                                         browser:
                                                                             *mut _cef_browser_t,
                                                                         cert_error:
                                                                             cef_errorcode_t,
                                                                         request_url:
                                                                             *const cef_string_t,
                                                                         ssl_info:
                                                                             *mut _cef_sslinfo_t,
                                                                         callback:
                                                                             *mut _cef_request_callback_t)
                                                        ->
                                                            ::std::os::raw::c_int>,
    ///
    pub on_select_client_certificate: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                     *mut _cef_request_handler_t,
                                                                                 browser:
                                                                                     *mut _cef_browser_t,
                                                                                 isProxy:
                                                                                     ::std::os::raw::c_int,
                                                                                 host:
                                                                                     *const cef_string_t,
                                                                                 port:
                                                                                     ::std::os::raw::c_int,
                                                                                 certificatesCount:
                                                                                     usize,
                                                                                 certificates:
                                                                                     *const *const _cef_x509certificate_t,
                                                                                 callback:
                                                                                     *mut _cef_select_client_certificate_callback_t)
                                                                ->
                                                                    ::std::os::raw::c_int>,
    ///
    pub on_plugin_crashed: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                          *mut _cef_request_handler_t,
                                                                      browser:
                                                                          *mut _cef_browser_t,
                                                                      plugin_path:
                                                                          *const cef_string_t)>,
    ///
    pub on_render_view_ready: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                             *mut _cef_request_handler_t,
                                                                         browser:
                                                                             *mut _cef_browser_t)>,
    ///
    pub on_render_process_terminated: ::std::option::Option<unsafe extern "C" fn(self_:
                                                                                     *mut _cef_request_handler_t,
                                                                                 browser:
                                                                                     *mut _cef_browser_t,
                                                                                 status:
                                                                                     cef_termination_status_t)>,
}
#[test]
fn bindgen_test_layout__cef_request_handler_t() {
    assert_eq!(::std::mem::size_of::<_cef_request_handler_t>() , 160usize);
    assert_eq!(::std::mem::align_of::<_cef_request_handler_t>() , 8usize);
}
impl Clone for _cef_request_handler_t {
    fn clone(&self) -> Self { *self }
}
